-- =============================================
-- Author: Fiama
-- Create date: 11/09/2018
-- Description: Procedure para carga das tabelas temporárias (BD Stage) para alimentação do DW
-- =============================================

USE [VAGAS_DW] ;

IF EXISTS ( SELECT * FROM SYS.OBJECTS WHERE NAME = 'SPR_OLAP_Calculo_SLA_Solucoes_Personalizadas' AND SCHEMA_NAME(SCHEMA_ID) = 'VAGAS_DW')
DROP PROCEDURE [VAGAS_DW].[SPR_OLAP_Calculo_SLA_Solucoes_Personalizadas] ;
GO

CREATE PROCEDURE [VAGAS_DW].[SPR_OLAP_Calculo_SLA_Solucoes_Personalizadas]
AS
SET NOCOUNT ON

-- Limpeza da tabela:
TRUNCATE TABLE [VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] ;

-- Populando tabela FATO:
INSERT INTO [VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] (NUMERO_DEMANDA, DATA_REC_VIAB_NORMALIZADA, DATA_CON_CAN_VIAB_NORMALIZADA, DATA_REC_ORC_NORMALIZADA, DATA_CON_ORC_NORMALIZADA, DATA_CADASTRAMENTO_NORMALIZADA, DATA_CONCLUSAO_NORMALIZADA)
SELECT	DISTINCT A.NUMERO_DEMANDA ,
		A.DATA_REC_VIAB ,
		A.DATA_CON_CAN_VIAB ,
		A.DATA_REC_ORC ,
		A.DATA_CON_ORC ,
		A.DATA_CADASTRAMENTO ,
		A.DATA_CONCLUSAO
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'Soluções Personalizadas'
		AND A.FLAG_ROOT = 1
		AND NOT ( A.DATA_CON_CAN_VIAB IS NULL
				  AND A.DATA_REC_VIAB IS NULL
				  AND A.DATA_REC_ORC IS NULL
				  AND A.DATA_CON_ORC IS NULL
				  AND A.DATA_CADASTRAMENTO IS NULL
				  AND A.DATA_CONCLUSAO IS NULL ) ;

---------------------------------------
-- Atribuição do valor SLA_VIABILIDADE:
---------------------------------------

-- Atualização do DATA_REC_VIAB_NORMALIZADA:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP]
SET		DATA_REC_VIAB_NORMALIZADA =
									CASE WHEN DATEPART(WEEKDAY, A.DATA_REC_VIAB_NORMALIZADA) = 7 -- SÁBADO
											THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,2, A.DATA_REC_VIAB_NORMALIZADA),112)))
										WHEN DATEPART(WEEKDAY, A.DATA_REC_VIAB_NORMALIZADA) = 1 -- DOMINGO
											THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,1, A.DATA_REC_VIAB_NORMALIZADA),112)))
										ELSE A.DATA_REC_VIAB_NORMALIZADA
									END
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A ;


-- Atualização do DATA_CON_CAN_VIAB_NORMALIZADA:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP]
SET		DATA_CON_CAN_VIAB_NORMALIZADA = 
									CASE WHEN DATEPART(WEEKDAY, A.DATA_CON_CAN_VIAB_NORMALIZADA) = 7 -- SÁBADO
											THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,2, A.DATA_CON_CAN_VIAB_NORMALIZADA),112)))
										WHEN DATEPART(WEEKDAY, A.DATA_CON_CAN_VIAB_NORMALIZADA) = 1 -- DOMINGO
											THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,1, A.DATA_CON_CAN_VIAB_NORMALIZADA),112)))
										ELSE A.DATA_CON_CAN_VIAB_NORMALIZADA
									END
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A ;


DECLARE	@MENOR_DATA_REC_VIAB SMALLDATETIME ;
SET	@MENOR_DATA_REC_VIAB = ( SELECT	MIN(DATA_REC_VIAB_NORMALIZADA)
							 FROM	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A
							 WHERE	DATA_REC_VIAB_NORMALIZADA IS NOT NULL ) ;



DECLARE	@MAIOR_DATA_CON_CAN_VIAB SMALLDATETIME ;
SET	@MAIOR_DATA_CON_CAN_VIAB = ( SELECT	MAX(DATA_CON_CAN_VIAB_NORMALIZADA)
								 FROM  [VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A
								 WHERE	DATA_CON_CAN_VIAB_NORMALIZADA IS NOT NULL ) ;


WITH CTE_DATAS (DATA)
AS
	(
		SELECT	@MENOR_DATA_REC_VIAB
		UNION ALL
		SELECT	DATEADD(DAY, 1, DATA)
		FROM	CTE_DATAS
		WHERE	DATEADD(DAY, 1, DATA) <= @MAIOR_DATA_CON_CAN_VIAB
		)
SELECT	*
INTO	#TMP_DATAS_INTERVALO_DIAS_UTEIS
FROM	CTE_DATAS
WHERE	NOT EXISTS ( SELECT	1
					 FROM	[VAGAS_DW].[FERIADOS_NACIONAIS] AS A1
					 WHERE	CTE_DATAS.DATA = A1.DATA )
		AND DATEPART(WEEKDAY, CTE_DATAS.DATA) NOT IN (1, 7)
OPTION (MAXRECURSION 10000) ;


-- Cálculo: Dias úteis entre a DATA_INICIAL e DATA_FINAL.
SELECT	A.NUMERO_DEMANDA , 
		A.DATA_REC_VIAB_NORMALIZADA ,
		A.DATA_CON_CAN_VIAB_NORMALIZADA ,
		COUNT(*) AS QTD_DIAS_UTEIS
INTO	#TMP_SLA_VIABILIDADE
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A	LEFT OUTER JOIN #TMP_DATAS_INTERVALO_DIAS_UTEIS AS B ON B.DATA >= A.DATA_REC_VIAB_NORMALIZADA 
																											AND B.DATA <= A.DATA_CON_CAN_VIAB_NORMALIZADA
WHERE	NOT ( A.DATA_REC_VIAB_NORMALIZADA IS NULL
			  OR A.DATA_CON_CAN_VIAB_NORMALIZADA IS NULL )
GROUP BY
		A.NUMERO_DEMANDA ,
		A.DATA_REC_VIAB_NORMALIZADA ,
		A.DATA_CON_CAN_VIAB_NORMALIZADA ;


-- Atualização dos registros cubo DEMANDAS_EQUIPES:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP]
SET		SLA_VIABILIDADE = B.QTD_DIAS_UTEIS
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A		LEFT OUTER JOIN #TMP_SLA_VIABILIDADE AS B ON A.NUMERO_DEMANDA = B.NUMERO_DEMANDA
WHERE	NOT ( A.DATA_REC_VIAB_NORMALIZADA IS NULL
			  OR A.DATA_CON_CAN_VIAB_NORMALIZADA IS NULL ) ;

--------------------------------------
-- Atualização do valor SLA_ORCAMENTO:
--------------------------------------

-- Atualização do DATA_REC_ORC_NORMALIZADA:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP]
SET		DATA_REC_ORC_NORMALIZADA =
									CASE WHEN DATEPART(WEEKDAY, A.DATA_REC_ORC_NORMALIZADA) = 7 -- SÁBADO
													THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,2, A.DATA_REC_ORC_NORMALIZADA),112)))
												WHEN DATEPART(WEEKDAY, A.DATA_REC_ORC_NORMALIZADA) = 1 -- DOMINGO
													THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,1, A.DATA_REC_ORC_NORMALIZADA),112)))
												ELSE A.DATA_REC_ORC_NORMALIZADA
											END
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A ;


-- Atualização do DATA_CON_ORC_NORMALIZADA:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP]
SET		DATA_CON_ORC_NORMALIZADA = 
									CASE WHEN DATEPART(WEEKDAY, A.DATA_CON_ORC_NORMALIZADA) = 7 -- SÁBADO
											THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,2, A.DATA_CON_ORC_NORMALIZADA),112)))
										WHEN DATEPART(WEEKDAY, A.DATA_CON_ORC_NORMALIZADA) = 1 -- DOMINGO
											THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,1, A.DATA_CON_ORC_NORMALIZADA),112)))
										ELSE A.DATA_CON_ORC_NORMALIZADA
									END
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A ;


DECLARE	@MENOR_DATA_REC_ORC SMALLDATETIME ;
SET	@MENOR_DATA_REC_ORC = ( SELECT	MIN(DATA_REC_ORC_NORMALIZADA)
							FROM	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A
							WHERE	DATA_REC_ORC_NORMALIZADA IS NOT NULL ) ;



DECLARE	@MAIOR_DATA_CON_ORC SMALLDATETIME ;
SET	@MAIOR_DATA_CON_ORC = ( SELECT MAX(DATA_CON_ORC_NORMALIZADA)
							FROM   [VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A
							WHERE  DATA_CON_ORC_NORMALIZADA IS NOT NULL ) ;


WITH CTE_DATAS (DATA)
AS
	(
		SELECT	@MENOR_DATA_REC_ORC
		UNION ALL
		SELECT	DATEADD(DAY, 1, DATA)
		FROM	CTE_DATAS
		WHERE	DATEADD(DAY, 1, DATA) <= @MAIOR_DATA_CON_ORC
		)
SELECT	*
INTO	#TMP_DATAS_INTERVALO_DIAS_UTEIS_ORCAMENTO
FROM	CTE_DATAS
WHERE	NOT EXISTS ( SELECT	1
					 FROM	[VAGAS_DW].[FERIADOS_NACIONAIS] AS A1
					 WHERE	CTE_DATAS.DATA = A1.DATA )
		AND DATEPART(WEEKDAY, CTE_DATAS.DATA) NOT IN (1, 7)
OPTION (MAXRECURSION 10000) ;


-- Cálculo: Dias úteis entre a DATA_INICIAL e DATA_FINAL.
SELECT	A.NUMERO_DEMANDA , 
		A.DATA_REC_ORC_NORMALIZADA ,
		A.DATA_CON_ORC_NORMALIZADA ,
		COUNT(*) AS QTD_DIAS_UTEIS
INTO	#TMP_SLA_ORCAMENTO
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A	LEFT OUTER JOIN #TMP_DATAS_INTERVALO_DIAS_UTEIS_ORCAMENTO AS B ON B.DATA >= A.DATA_REC_ORC_NORMALIZADA 
																													  AND B.DATA <= A.DATA_CON_ORC_NORMALIZADA
WHERE	NOT ( A.DATA_REC_ORC_NORMALIZADA IS NULL
			  OR A.DATA_CON_ORC_NORMALIZADA IS NULL )
GROUP BY
		A.NUMERO_DEMANDA ,
		A.DATA_REC_ORC_NORMALIZADA ,
		A.DATA_CON_ORC_NORMALIZADA ;


-- Atualização dos registros cubo DEMANDAS_EQUIPES:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP]
SET		SLA_ORCAMENTO = B.QTD_DIAS_UTEIS
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A		LEFT OUTER JOIN #TMP_SLA_ORCAMENTO AS B ON A.NUMERO_DEMANDA = B.NUMERO_DEMANDA
WHERE	NOT ( A.DATA_REC_ORC_NORMALIZADA IS NULL
			  OR A.DATA_CON_ORC_NORMALIZADA IS NULL ) ;



------------------------------------
-- Atualização do valor SLA_PROJETO:
------------------------------------

-- Atualização do DATA_CADASTRAMENTO_NORMALIZADA:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP]
SET		DATA_CADASTRAMENTO_NORMALIZADA =
									CASE WHEN DATEPART(WEEKDAY, A.DATA_CADASTRAMENTO_NORMALIZADA) = 7 -- SÁBADO
													THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,2, A.DATA_CADASTRAMENTO_NORMALIZADA),112)))
												WHEN DATEPART(WEEKDAY, A.DATA_CADASTRAMENTO_NORMALIZADA) = 1 -- DOMINGO
													THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,1, A.DATA_CADASTRAMENTO_NORMALIZADA),112)))
												ELSE A.DATA_CADASTRAMENTO_NORMALIZADA
											END
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A ;


-- Atualização do DATA_CONCLUSAO_NORMALIZADA:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP]
SET		DATA_CONCLUSAO_NORMALIZADA = 
									CASE WHEN DATEPART(WEEKDAY, A.DATA_CONCLUSAO_NORMALIZADA) = 7 -- SÁBADO
											THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,2, A.DATA_CONCLUSAO_NORMALIZADA),112)))
										WHEN DATEPART(WEEKDAY, A.DATA_CONCLUSAO_NORMALIZADA) = 1 -- DOMINGO
											THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,1, A.DATA_CONCLUSAO_NORMALIZADA),112)))
										ELSE A.DATA_CONCLUSAO_NORMALIZADA
									END
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A ;


DECLARE	@MENOR_DATA_CADASTRAMENTO SMALLDATETIME ;
SET	@MENOR_DATA_CADASTRAMENTO = ( SELECT MIN(DATA_CADASTRAMENTO_NORMALIZADA)
								  FROM	 [VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A
								  WHERE  DATA_CADASTRAMENTO_NORMALIZADA IS NOT NULL ) ;



DECLARE	@MAIOR_DATA_CONCLUSAO SMALLDATETIME ;
SET	@MAIOR_DATA_CONCLUSAO = ( SELECT MAX(DATA_CONCLUSAO_NORMALIZADA)
							  FROM   [VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A
							  WHERE  DATA_CONCLUSAO_NORMALIZADA IS NOT NULL ) ;


WITH CTE_DATAS (DATA)
AS
	(
		SELECT	@MENOR_DATA_CADASTRAMENTO
		UNION ALL
		SELECT	DATEADD(DAY, 1, DATA)
		FROM	CTE_DATAS
		WHERE	DATEADD(DAY, 1, DATA) <= @MAIOR_DATA_CONCLUSAO
		)
SELECT	*
INTO	#TMP_DATAS_INTERVALO_DIAS_UTEIS_PROJETO
FROM	CTE_DATAS
WHERE	NOT EXISTS ( SELECT	1
					 FROM	[VAGAS_DW].[FERIADOS_NACIONAIS] AS A1
					 WHERE	CTE_DATAS.DATA = A1.DATA )
		AND DATEPART(WEEKDAY, CTE_DATAS.DATA) NOT IN (1, 7)
OPTION (MAXRECURSION 10000) ;


-- Cálculo: Dias úteis entre a DATA_INICIAL e DATA_FINAL.
SELECT	A.NUMERO_DEMANDA , 
		A.DATA_CADASTRAMENTO_NORMALIZADA ,
		A.DATA_CONCLUSAO_NORMALIZADA ,
		COUNT(*) AS QTD_DIAS_UTEIS
INTO	#TMP_SLA_PROJETO
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A	LEFT OUTER JOIN #TMP_DATAS_INTERVALO_DIAS_UTEIS_PROJETO AS B ON B.DATA >= A.DATA_CADASTRAMENTO_NORMALIZADA 
																													AND B.DATA <= A.DATA_CONCLUSAO_NORMALIZADA
WHERE	NOT ( A.DATA_CADASTRAMENTO_NORMALIZADA IS NULL
			  OR A.DATA_CONCLUSAO_NORMALIZADA IS NULL )
GROUP BY
		A.NUMERO_DEMANDA ,
		A.DATA_CADASTRAMENTO_NORMALIZADA ,
		A.DATA_CONCLUSAO_NORMALIZADA ;


-- Atualização dos registros cubo DEMANDAS_EQUIPES:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP]
SET		SLA_PROJETO = B.QTD_DIAS_UTEIS
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES_SLA_SP] AS A		LEFT OUTER JOIN #TMP_SLA_PROJETO AS B ON A.NUMERO_DEMANDA = B.NUMERO_DEMANDA
WHERE	NOT ( A.DATA_CADASTRAMENTO_NORMALIZADA IS NULL
			  OR A.DATA_CONCLUSAO_NORMALIZADA IS NULL ) ;

-- Limpeza das tabelas temporárias:
DROP TABLE #TMP_DATAS_INTERVALO_DIAS_UTEIS ;
DROP TABLE #TMP_SLA_VIABILIDADE ;
DROP TABLE #TMP_DATAS_INTERVALO_DIAS_UTEIS_ORCAMENTO ;
DROP TABLE #TMP_SLA_ORCAMENTO ;
DROP TABLE #TMP_DATAS_INTERVALO_DIAS_UTEIS_PROJETO ;
DROP TABLE #TMP_SLA_PROJETO ;