USE VAGAS_DW
GO

IF EXISTS ( SELECT * FROM SYS.OBJECTS WHERE NAME = 'SPR_OLAP_Carga_Demandas_Equipes' AND SCHEMA_NAME(SCHEMA_ID) = 'VAGAS_DW')
DROP PROCEDURE VAGAS_DW.SPR_OLAP_Carga_Demandas_Equipes
GO

-- =============================================
-- Author: Luiz Fernando Braz
-- Create date: 19/05/2016
-- Description: Procedure para carga das tabelas temporárias (BD Stage) para alimentação do DW
-- =============================================

CREATE PROCEDURE VAGAS_DW.SPR_OLAP_Carga_Demandas_Equipes 
AS
SET NOCOUNT ON

-- Atualizar informação de ciclo (baseado no registro de #CICLO adicionado nas tarefas atreladas à Marcos da mesma semana)
UPDATE [STAGE].[VAGAS_DW].[TMP_DEMANDAS_EQUIPES] SET CICLO = UPPER(B.CICLO)
FROM [STAGE].[VAGAS_DW].[TMP_DEMANDAS_EQUIPES] A
OUTER APPLY ( SELECT TOP 1 * FROM [STAGE].[VAGAS_DW].[TMP_DEMANDAS_EQUIPES]
			  WHERE NOME_RELEASE = A.NOME_RELEASE
			  AND CICLO <> '' 
			  ORDER BY DATA_CADASTRAMENTO ASC ) B			  
WHERE A.CICLO = ''
AND A.NOME_RELEASE <> 'Sem Release'

UPDATE [STAGE].[VAGAS_DW].[TMP_DEMANDAS_EQUIPES] SET CICLO = NULL
WHERE NOME_RELEASE = ''

-- ATUALIZAR SCORE
UPDATE [STAGE].[VAGAS_DW].[TMP_DEMANDAS_EQUIPES] SET SCORE =		
		-- GRAVIDADE
		CASE WHEN GRAVIDADE = 'sem gravidade' THEN 1
			WHEN GRAVIDADE = 'pouco grave' THEN 2
			WHEN GRAVIDADE = 'grave' THEN 3
			WHEN GRAVIDADE = 'muito grave' THEN 4
			WHEN GRAVIDADE = 'extremamente grave' THEN 5
		END *
		
		-- URGENCIA
		CASE WHEN URGENCIA = 'pode esperar' THEN 1
			WHEN URGENCIA = 'pouco urgente' THEN 2
			WHEN URGENCIA = 'urgente (merece atenção no curto prazo)' THEN 3
			WHEN URGENCIA = 'muito urgente' THEN 4
			WHEN URGENCIA = 'necessidade de ação imediata' THEN 5
		END *
		
		-- ESFORÇO
		CASE WHEN ESFORCO = 'esforço mínimo' THEN 5
			WHEN ESFORCO = 'esforço moderado' THEN 4
			WHEN ESFORCO = 'esforço significativo' THEN 3
			WHEN ESFORCO = 'muito esforço' THEN 2
			WHEN ESFORCO = 'muitíssimo esforço' THEN 1
		END
FROM [STAGE].[VAGAS_DW].[TMP_DEMANDAS_EQUIPES]
WHERE GRAVIDADE IS NOT NULL AND URGENCIA IS NOT NULL AND ESFORCO IS NOT NULL

-- ATUALIZAÇÃO DO ASSIGNED PARA SIST. CORPORATIVOS
UPDATE [STAGE].[VAGAS_DW].[TMP_DEMANDAS_EQUIPES] SET DATA_PRM_ASSIGNED = DATA_CONCLUSAO
FROM [STAGE].[VAGAS_DW].[TMP_DEMANDAS_EQUIPES] 
WHERE ( STATUS_DEMANDA IN ('Concluída','Done') OR STATUS_RESOLUCAO = 'Fixed' )
AND EQUIPE_PROJETO = 'Sistemas Corporativos'
AND DATA_PRM_ASSIGNED IS NULL

DELETE VAGAS_DW.DEMANDAS_EQUIPES
FROM VAGAS_DW.DEMANDAS_EQUIPES A
WHERE EXISTS ( SELECT 1 FROM [STAGE].[VAGAS_DW].[TMP_DEMANDAS_EQUIPES]
				WHERE ID_DEMANDA = A.ID_DEMANDA
				AND EQUIPE_PROJETO = A.EQUIPE_PROJETO)

-- DROP TABLE #TMP_DATA_NORMALIZADA ;
SELECT	TAB.ID_DEMANDA ,
		TAB.NUMERO_DEMANDA ,
		TAB.DATA_CADASTRAMENTO ,
		TAB.DATA_PRM_CONCLUSAO ,
		TAB.DATA_EM_ABERTO ,
		CASE WHEN DATEPART(WEEKDAY, TAB.DATA_INCLUSAO_NORMALIZADA) = 7 -- SÁBADO
				THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,2, TAB.DATA_INCLUSAO_NORMALIZADA),112)))
			WHEN DATEPART(WEEKDAY, TAB.DATA_INCLUSAO_NORMALIZADA) = 1 -- DOMINGO
				THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,1, TAB.DATA_INCLUSAO_NORMALIZADA),112)))
			ELSE TAB.DATA_INCLUSAO_NORMALIZADA 
		END AS DATA_INCLUSAO_NORMALIZADA
INTO #TMP_DATA_NORMALIZADA
FROM 
	(

	-- TRATAR CHAMADOS ABERTOS FORA DO HORÁRIO DE EXPEDIENTE (08:00 ÀS 18:00)
	SELECT	A.ID_DEMANDA ,
			A.NUMERO_DEMANDA ,
			A.DATA_CADASTRAMENTO ,
			A.DATA_PRM_CONCLUSAO ,
			A.DATA_EM_ABERTO ,
			CASE WHEN (DATEPART(HOUR,A.DATA_CADASTRAMENTO) >= 18 AND DATEPART(MINUTE, A.DATA_CADASTRAMENTO) > 0) OR (DATEPART(HOUR, A.DATA_CADASTRAMENTO) > 18)
					THEN DATEADD(HOUR,8,DATEADD(DAY,1,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,A.DATA_CADASTRAMENTO,112))))
				 WHEN DATEPART(HOUR,A.DATA_CADASTRAMENTO) < 8 
					THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,A.DATA_CADASTRAMENTO,112)))
				ELSE A.DATA_CADASTRAMENTO 
			END AS DATA_INCLUSAO_NORMALIZADA
	FROM	[STAGE].[VAGAS_DW].[TMP_DEMANDAS_EQUIPES] AS A
	WHERE	A.EQUIPE_PROJETO = 'Gestão de contratos'
	
	) TAB
ORDER BY 1


-- TRATAR FERIADOS NACIONAIS + SP 
UPDATE #TMP_DATA_NORMALIZADA SET DATA_INCLUSAO_NORMALIZADA = CASE
				-- se o próx. dia for sábado adiantar 3 dias (seg.) 
				 WHEN DATEPART(WEEKDAY,DATEADD(DAY,1,DATA_INCLUSAO_NORMALIZADA)) = 7 THEN DATEADD(HOUR, 8, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, DATEADD(DAY,3,DATA_INCLUSAO_NORMALIZADA), 112))) 
				-- se o próx. dia for domingo adiantar 2 dias 
				 WHEN DATEPART(WEEKDAY,DATEADD(DAY,1,DATA_INCLUSAO_NORMALIZADA)) = 1 THEN DATEADD(HOUR, 8, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, DATEADD(DAY,2,DATA_INCLUSAO_NORMALIZADA), 112))) 
        ELSE DATEADD(HOUR, 8, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, DATEADD(DAY,1,DATA_INCLUSAO_NORMALIZADA), 112))) END 
FROM #TMP_DATA_NORMALIZADA A
WHERE EXISTS ( SELECT 1
				FROM VAGAS_DW.FERIADOS_NACIONAIS -- CONTÉM OS FERIADOS BRA + SP ATE 2019
				WHERE DATA = CONVERT(SMALLDATETIME,CONVERT(VARCHAR,A.DATA_INCLUSAO_NORMALIZADA,112)) )

-- INTERVALO DE DATA E HORA:
-- DROP TABLE #TMP_DATA_HORA ;
SELECT	A.Data AS DATA ,
		B.HORA AS HORA ,
		CONVERT(SMALLDATETIME, CONCAT(A.Data , ' ', B.HORA)) AS DATA_HORA
INTO	#TMP_DATA_HORA
FROM	[Dim].[Data] AS A	CROSS JOIN [Dim].[Hora] AS B
WHERE	A.Data >= (SELECT MIN(CONVERT(DATE, A1.DATA_INCLUSAO_NORMALIZADA))
				   FROM #TMP_DATA_NORMALIZADA AS A1)
		AND A.Data <= CAST(GETDATE() AS DATE)
		AND NOT EXISTS (SELECT 1
						FROM [VAGAS_DW].[VAGAS_DW].[FERIADOS_NACIONAIS] AS A1
						WHERE A.Data = CONVERT(DATE, A1.DATA))
ORDER BY A.DATA ASC ;


-- CÁLCULO TEMPO MÉDIO DE ATENDIMENTO:
-----------------------------------------------------------------------------------------------------------
-- Intervalo de data e hora entre os campos DATA_INCLUSAO_NORMALIZADA e DATA_PRM_CONCLUSAO de cada DEMANDA:
-----------------------------------------------------------------------------------------------------------
-- DROP TABLE #FORMAT_DATA_HORA_TMA ;
SELECT	A.NUMERO_DEMANDA ,
		A.DATA_INCLUSAO_NORMALIZADA ,
		A.DATA_PRM_CONCLUSAO ,
		CASE WHEN (CONVERT(DATE, A.DATA_INCLUSAO_NORMALIZADA) = CONVERT(DATE, B.DATA_HORA) AND DATEPART(HOUR, A.DATA_INCLUSAO_NORMALIZADA) = DATEPART(HOUR, B.DATA_HORA)) 
				THEN A.DATA_INCLUSAO_NORMALIZADA
			 WHEN (CONVERT(DATE, A.DATA_PRM_CONCLUSAO) = CONVERT(DATE, B.DATA_HORA) AND DATEPART(HOUR, A.DATA_PRM_CONCLUSAO) = DATEPART(HOUR, B.DATA_HORA)) 
				THEN A.DATA_PRM_CONCLUSAO
			 ELSE B.DATA_HORA
		END AS DATA_HORA
INTO	#FORMAT_DATA_HORA_TMA
FROM	#TMP_DATA_NORMALIZADA AS A	LEFT OUTER JOIN #TMP_DATA_HORA AS B ON B.DATA_HORA >= DATEADD(MINUTE, DATEPART(MINUTE, A.DATA_INCLUSAO_NORMALIZADA) * -1, A.DATA_INCLUSAO_NORMALIZADA) AND B.DATA_HORA <= A.DATA_PRM_CONCLUSAO
ORDER BY DATA_HORA ASC ;

-- CONTROLE FORMAT_DATA_HORA_TMA:
-- DROP TABLE #CONTROLE_FORMAT_DATA_HORA_TMA ;
SELECT	A.NUMERO_DEMANDA ,
		A.DATA_INCLUSAO_NORMALIZADA ,
		A.DATA_PRM_CONCLUSAO ,
		COUNT(*) AS QTD_REGISTROS
INTO	#CONTROLE_FORMAT_DATA_HORA_TMA
FROM	#FORMAT_DATA_HORA_TMA AS A
GROUP BY
		A.NUMERO_DEMANDA ,
		A.DATA_INCLUSAO_NORMALIZADA ,
		A.DATA_PRM_CONCLUSAO ;

-- DROP TABLE #HORA_UTIL_TMA ;
SELECT	* ,
		CASE WHEN DATEPART(WEEKDAY, DATA_HORA) IN (1, 7) THEN 0
			 WHEN DATEPART(HOUR, DATA_HORA) >= 18 AND DATEPART(MINUTE, DATA_HORA) > 0 THEN 0
			 WHEN DATEPART(HOUR, DATA_HORA) BETWEEN 8 AND 18 THEN 1 ELSE 0 END AS HORA_UTIL
INTO	#HORA_UTIL_TMA
FROM	#FORMAT_DATA_HORA_TMA ;


-- DROP TABLE #INTERVALO_HORAS_UTEIS_TMA ;
SELECT	NUMERO_DEMANDA ,
		DATA_INCLUSAO_NORMALIZADA ,
		DATA_PRM_CONCLUSAO ,
		DATA_HORA ,
		MENOR_DATA_HORA ,
		MAIOR_DATA_HORA ,
		HORA_UTIL
INTO	#INTERVALO_HORAS_UTEIS_TMA
FROM	#HORA_UTIL_TMA AS A	CROSS APPLY (SELECT	TOP 1 A1.DATA_HORA AS MENOR_DATA_HORA
										 FROM	#HORA_UTIL_TMA AS A1
										 WHERE	A.NUMERO_DEMANDA = A1.NUMERO_DEMANDA
												AND CONVERT(DATE, A.DATA_HORA) = CONVERT(DATE, A1.DATA_HORA)
												AND A1.HORA_UTIL = 1
												ORDER BY A1.DATA_HORA ASC) AS B
									CROSS APPLY (SELECT	TOP 1 CASE
																WHEN A2.QTD_REGISTROS = 1 AND CONVERT(DATE, A2.DATA_INCLUSAO_NORMALIZADA) = CONVERT(DATE, A2.DATA_PRM_CONCLUSAO) AND DATEPART(HOUR, A2.DATA_INCLUSAO_NORMALIZADA) = DATEPART(HOUR, A2.DATA_PRM_CONCLUSAO) AND DATEPART(MINUTE, A2.DATA_INCLUSAO_NORMALIZADA) != DATEPART(MINUTE, A2.DATA_PRM_CONCLUSAO) THEN A2.DATA_PRM_CONCLUSAO
																ELSE A1.DATA_HORA
																END AS MAIOR_DATA_HORA
										 FROM	#HORA_UTIL_TMA AS A1	LEFT OUTER JOIN #CONTROLE_FORMAT_DATA_HORA_TMA AS A2 ON A.NUMERO_DEMANDA = A2.NUMERO_DEMANDA
										 WHERE	A.NUMERO_DEMANDA = A1.NUMERO_DEMANDA
												AND CONVERT(DATE, A.DATA_HORA) = CONVERT(DATE, A1.DATA_HORA)
												AND A1.HORA_UTIL = 1
												ORDER BY A1.DATA_HORA DESC) AS C
WHERE	A.HORA_UTIL = 1 ;


-- RESULTADO: Diferença de horas entre DATA_INCLUSAO_NORMALIZADA e DATA_FECHAMENTO no intervalo de horas úteis:
-- DROP TABLE #RESULTADO_INTERVALO_HORAS_UTEIS_TMA ;
SELECT	DISTINCT NUMERO_DEMANDA ,
				 MENOR_DATA_HORA ,
				 MAIOR_DATA_HORA ,
		CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 AS DIFERENCA_HORAS ,
		FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60) AS HORAS ,
		ROUND(ROUND(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 - FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60), 2)*60, 0) AS MINUTOS ,
		CONCAT(CONVERT(VARCHAR(2), FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60)), ':', CONVERT(VARCHAR(2), ROUND(ROUND(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 - FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60), 2)*60, 0))) AS HORA_MINUTO
INTO	#RESULTADO_INTERVALO_HORAS_UTEIS_TMA
FROM	#INTERVALO_HORAS_UTEIS_TMA ;


-- DROP TABLE #DIFERENCA_HORAS_UTEIS_TMA ;
SELECT	NUMERO_DEMANDA ,
		CONVERT(FLOAT, SUM(DIFERENCA_HORAS)) / 24 AS TEMPO_MEDIO_ATENDIMENTO_GC
INTO	#DIFERENCA_HORAS_UTEIS_TMA
FROM	#RESULTADO_INTERVALO_HORAS_UTEIS_TMA 
GROUP BY
		NUMERO_DEMANDA ;


-- CÁLCULO TEMPO MÉDIO EM ABERTO:
-------------------------------------------------------------------------------------------------------
-- Intervalo de data e hora entre os campos DATA_INCLUSAO_NORMALIZADA e DATA_EM_ABERTO de cada DEMANDA:
-------------------------------------------------------------------------------------------------------
-- DROP TABLE #FORMAT_DATA_HORA_TMA_2 ;
SELECT	A.NUMERO_DEMANDA ,
		A.DATA_INCLUSAO_NORMALIZADA ,
		A.DATA_EM_ABERTO ,
		CASE WHEN (CONVERT(DATE, A.DATA_INCLUSAO_NORMALIZADA) = CONVERT(DATE, B.DATA_HORA) AND DATEPART(HOUR, A.DATA_INCLUSAO_NORMALIZADA) = DATEPART(HOUR, B.DATA_HORA)) 
				THEN A.DATA_INCLUSAO_NORMALIZADA
			 WHEN (CONVERT(DATE, A.DATA_EM_ABERTO) = CONVERT(DATE, B.DATA_HORA) AND DATEPART(HOUR, A.DATA_EM_ABERTO) = DATEPART(HOUR, B.DATA_HORA)) 
				THEN A.DATA_EM_ABERTO
			 ELSE B.DATA_HORA
		END AS DATA_HORA
INTO	#FORMAT_DATA_HORA_TMA_2
FROM	#TMP_DATA_NORMALIZADA AS A	LEFT OUTER JOIN #TMP_DATA_HORA AS B ON B.DATA_HORA >= DATEADD(MINUTE, DATEPART(MINUTE, A.DATA_INCLUSAO_NORMALIZADA) * -1, A.DATA_INCLUSAO_NORMALIZADA) AND B.DATA_HORA <= A.DATA_EM_ABERTO
ORDER BY DATA_HORA ASC ;


-- CONTROLE FORMAT_DATA_HORA_TMA:
-- DROP TABLE #CONTROLE_FORMAT_DATA_HORA_TMA_2 ;
SELECT	A.NUMERO_DEMANDA ,
		A.DATA_INCLUSAO_NORMALIZADA ,
		A.DATA_EM_ABERTO ,
		COUNT(*) AS QTD_REGISTROS
INTO	#CONTROLE_FORMAT_DATA_HORA_TMA_2
FROM	#FORMAT_DATA_HORA_TMA_2 AS A
GROUP BY
		A.NUMERO_DEMANDA ,
		A.DATA_INCLUSAO_NORMALIZADA ,
		A.DATA_EM_ABERTO ;


-- DROP TABLE #HORA_UTIL_TMA_2 ;
SELECT	* ,
		CASE WHEN DATEPART(WEEKDAY, DATA_HORA) IN (1, 7) THEN 0
			 WHEN DATEPART(HOUR, DATA_HORA) >= 19 AND DATEPART(MINUTE, DATA_HORA) > 0 THEN 0
			 WHEN DATEPART(HOUR, DATA_HORA) BETWEEN 8 AND 19 THEN 1 ELSE 0 END AS HORA_UTIL
INTO	#HORA_UTIL_TMA_2
FROM	#FORMAT_DATA_HORA_TMA_2 ;

-- DROP TABLE #INTERVALO_HORAS_UTEIS_TMA_2 ;
SELECT	NUMERO_DEMANDA ,
		DATA_INCLUSAO_NORMALIZADA ,
		DATA_EM_ABERTO ,
		DATA_HORA ,
		MENOR_DATA_HORA ,
		MAIOR_DATA_HORA ,
		HORA_UTIL
INTO	#INTERVALO_HORAS_UTEIS_TMA_2
FROM	#HORA_UTIL_TMA_2 AS A	CROSS APPLY (SELECT	TOP 1 A1.DATA_HORA AS MENOR_DATA_HORA
											 FROM	#HORA_UTIL_TMA_2 AS A1
											 WHERE	A.NUMERO_DEMANDA = A1.NUMERO_DEMANDA
													AND CONVERT(DATE, A.DATA_HORA) = CONVERT(DATE, A1.DATA_HORA)
													AND A1.HORA_UTIL = 1
													ORDER BY A1.DATA_HORA ASC) AS B
									CROSS APPLY (SELECT	TOP 1 CASE
																WHEN A2.QTD_REGISTROS = 1 AND CONVERT(DATE, A2.DATA_INCLUSAO_NORMALIZADA) = CONVERT(DATE, A2.DATA_EM_ABERTO) AND DATEPART(HOUR, A2.DATA_INCLUSAO_NORMALIZADA) = DATEPART(HOUR, A2.DATA_EM_ABERTO) AND DATEPART(MINUTE, A2.DATA_INCLUSAO_NORMALIZADA) != DATEPART(MINUTE, A2.DATA_EM_ABERTO) THEN A2.DATA_EM_ABERTO
																ELSE A1.DATA_HORA
																END AS MAIOR_DATA_HORA
										 FROM	#HORA_UTIL_TMA_2 AS A1	LEFT OUTER JOIN #CONTROLE_FORMAT_DATA_HORA_TMA_2 AS A2 ON A.NUMERO_DEMANDA = A2.NUMERO_DEMANDA
										 WHERE	A.NUMERO_DEMANDA = A1.NUMERO_DEMANDA
												AND CONVERT(DATE, A.DATA_HORA) = CONVERT(DATE, A1.DATA_HORA)
												AND A1.HORA_UTIL = 1
												ORDER BY A1.DATA_HORA DESC) AS C
WHERE	A.HORA_UTIL = 1 ;


-- RESULTADO: Diferença de horas entre DATA_INCLUSAO_NORMALIZADA e DATA_FECHAMENTO no intervalo de horas úteis:
SELECT	DISTINCT NUMERO_DEMANDA ,
				 MENOR_DATA_HORA ,
				 MAIOR_DATA_HORA ,
		CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 AS DIFERENCA_HORAS ,
		FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60) AS HORAS ,
		ROUND(ROUND(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 - FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60), 2)*60, 0) AS MINUTOS ,
		CONCAT(CONVERT(VARCHAR(2), FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60)), ':', CONVERT(VARCHAR(2), ROUND(ROUND(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 - FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60), 2)*60, 0))) AS HORA_MINUTO
INTO	#RESULTADO_INTERVALO_HORAS_UTEIS_TMA_2
FROM	#INTERVALO_HORAS_UTEIS_TMA_2 ;

-- DROP TABLE #DIFERENCA_HORAS_UTEIS_TMA_2 ;
SELECT	NUMERO_DEMANDA ,
		CONVERT(FLOAT, SUM(DIFERENCA_HORAS)) / 24 AS TEMPO_MEDIO_ABERTO_GC
INTO	#DIFERENCA_HORAS_UTEIS_TMA_2
FROM	#RESULTADO_INTERVALO_HORAS_UTEIS_TMA_2
GROUP BY
		NUMERO_DEMANDA ;

-- DROP TABLE #TMP_DEMANDAS ;
SELECT	A.ID_DEMANDA ,
		A.NUMERO_DEMANDA ,
		A.NOME_DEMANDA ,
		A.NOME_PROJETO ,
		A.RESPONSAVEL ,
		A.CRIADOR ,
		A.TIPO_DEMANDA ,
		CHOOSE(A.PRIORIDADE, '1- Blocker', '2- Critical', '3- Major', '4- Minor', '5- Trivial', '0- Unclassified') AS PRIORIDADE ,
		A.STATUS_DEMANDA ,
		A.DATA_CADASTRAMENTO,
		A.DATA_ALTERACAO ,
		A.DATA_EXPECTATIVA_CONCLUSAO ,
		A.DATA_CONCLUSAO ,
		A.STATUS_RESOLUCAO ,
		A.TEMPO_ESTIMATIVA ,
		A.TEMPO_GASTO ,
		A.FLAG_ATRELADO_MARCO,A.NOME_DEMANDA_ROOT ,
		A.NOME_RELEASE ,
		A.EQUIPE_SOLICITANTE ,
		A.TIPO_SUB_TAREFA ,
		A.FLAG_ROOT ,
		A.CICLO ,
		A.GRAVIDADE ,
		A.URGENCIA ,
		A.ESFORCO ,
		A.SCORE ,
		A.TIPO_CLIENTE ,
		A.FATURAVEL ,
		A.EQUIPE_PROJETO ,
		A.DATA_PRM_ASSIGNED ,
		A.FERRAMENTA ,
		A.SINTOMA ,
		A.INDICE_SATISFACAO ,
		A.LABEL ,
		A.SPRINT ,
		A.STORY_POINTS ,
		A.SOLICITANTE ,
		A.TIPO_ANALISE ,
		D.DATA_INCLUSAO_NORMALIZADA , 
		B.TEMPO_MEDIO_ABERTO_GC ,
		C.TEMPO_MEDIO_ATENDIMENTO_GC , 
		A.DATA_PRM_CONCLUSAO ,
		A.FILA ,
		ROW_NUMBER() OVER(PARTITION BY A.ID_DEMANDA ORDER BY A.DATA_CADASTRAMENTO ASC) AS CONTROLE ,
		A.MERCADO ,
		A.CLIENTE ,
		A.TARGET_URL ,
		CASE	WHEN LTRIM(RTRIM(A.SEVERITY)) = 'High'
								THEN '1 - High'
							WHEN LTRIM(RTRIM(A.SEVERITY)) = 'Critical'
								THEN '1 - Critical'
							WHEN LTRIM(RTRIM(A.SEVERITY)) = 'Medium'
								THEN '2 - Medium'
							WHEN LTRIM(RTRIM(A.SEVERITY)) = 'Low'
								THEN '3 - Low'
							WHEN LTRIM(RTRIM(A.SEVERITY)) = 'Informational Alert'
								THEN '4 - Informational Alert'
					 END AS SEVERITY ,
		A.CHAVE_VULNERABILIDADE ,
		DATEADD(DAY, 1, DATEADD(DAY, DATEPART(DAY, A.DATA_CADASTRAMENTO) *-1, A.DATA_CADASTRAMENTO)) AS DATA_CAD_AUXILIAR
INTO	#TMP_DEMANDAS
FROM [STAGE].[VAGAS_DW].[TMP_DEMANDAS_EQUIPES] AS A	LEFT OUTER JOIN #DIFERENCA_HORAS_UTEIS_TMA_2 AS B ON A.NUMERO_DEMANDA = B.NUMERO_DEMANDA
										LEFT OUTER JOIN #DIFERENCA_HORAS_UTEIS_TMA AS C ON A.NUMERO_DEMANDA = C.NUMERO_DEMANDA
										LEFT OUTER JOIN #TMP_DATA_NORMALIZADA AS D ON A.NUMERO_DEMANDA = D.NUMERO_DEMANDA ;

-- Inserir novas demandas
INSERT INTO [VAGAS_DW].[DEMANDAS_EQUIPES] (ID_DEMANDA, NUMERO_DEMANDA, NOME_DEMANDA, NOME_PROJETO, RESPONSAVEL, CRIADOR, TIPO_DEMANDA, PRIORIDADE, STATUS_DEMANDA, DATA_CADASTRAMENTO, DATA_ALTERACAO ,DATA_EXPECTATIVA_CONCLUSAO, DATA_CONCLUSAO, STATUS_RESOLUCAO, TEMPO_ESTIMATIVA, TEMPO_GASTO, FLAG_ATRELADO_MARCO, NOME_DEMANDA_ROOT,
NOME_RELEASE, EQUIPE_SOLICITANTE, TIPO_SUB_TAREFA, FLAG_ROOT, CICLO, GRAVIDADE, URGENCIA, ESFORCO, SCORE, TIPO_CLIENTE, FATURAVEL, EQUIPE_PROJETO, DATA_PRM_ASSIGNED,
FERRAMENTA, SINTOMA, INDICE_SATISFACAO, LABEL,SPRINT, STORY_POINTS, SOLICITANTE, TIPO_ANALISE, DATA_INCLUSAO_NORMALIZADA, TEMPO_MEDIO_ABERTO_GC, TEMPO_MEDIO_ATENDIMENTO_GC, DATA_PRM_CONCLUSAO, FILA, CONTROLE, MERCADO, CLIENTE, TARGET_URL, SEVERITY, CHAVE_VULNERABILIDADE, DATA_CAD_AUXILIAR)
SELECT	*
FROM	#TMP_DEMANDAS AS A
WHERE	A.CONTROLE = 1 ;

-- Ajuste relativo à bug do Jira (falar com Matias)
-- Em 20160711 nós alteramos o processo pois o Mati finalizou o ajuste nas demandas "canceladas"
--UPDATE VAGAS_DW.DEMANDAS_EQUIPES SET STATUS_DEMANDA = 'Done'
--FROM VAGAS_DW.DEMANDAS_EQUIPES 
--WHERE STATUS_DEMANDA = 'Cancelada'

-- Ajuste relativo à normatização das equipes
UPDATE VAGAS_DW.DEMANDAS_EQUIPES SET EQUIPE_SOLICITANTE = B.CATEGORIA_NOVO + ' ' + B.NOME_NOVO
FROM VAGAS_DW.DEMANDAS_EQUIPES A
INNER JOIN STAGE.VAGAS_DW.TMP_DE_PARA_EQUIPES B ON B.CATEGORIA_ANTERIOR + ' ' + B.NOME_ANTERIOR = A.EQUIPE_SOLICITANTE

-- Calcular média de entregas da equipe Inteligência de Negócios
EXEC VAGAS_DW.SPR_OLAP_Calculo_Media_Demandas_Inteligencia_Negocios



-- Inclusão do campo MERCADO para recordset de Soluções Personalizadas:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		MERCADO = (SELECT	TOP 1 UPPER(IIF(ISNULL(A1.MERCADO, '') = '', 'EM BRANCO', A1.MERCADO)) AS MERCADO
				   FROM		[VAGAS_DW].[CLIENTES] AS A1
				   WHERE	REPLACE(LTRIM(RTRIM(A.CLIENTE)), CHAR(9), '') = LTRIM(RTRIM(A1.CLIENTE_VAGAS))
							AND	A1.CLIENTE_VAGAS IS NOT NULL
							AND LEFT(A1.CONTA_ID, 6) != 'No_opp'
					ORDER BY 1 DESC)
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'Soluções Personalizadas'
		AND ISNULL(A.CLIENTE, '') != '' ;

-- Atualização dos registros com MERCADO NULL para Soluções Personalizadas
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		MERCADO = 'EM BRANCO'
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.MERCADO IS NULL
		AND A.EQUIPE_PROJETO = 'Soluções Personalizadas' ;


-- Atualização do TEMPO_GASTO_IMPL_SOURCE:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		TEMPO_GASTO_IMPL_SOURCE = IIF(EQUIPE_PROJETO = 'Implantação' AND CONTROLE = 1 AND TEMPO_GASTO IS NOT NULL, TEMPO_GASTO, NULL)
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'Implantação' ;

-- Atualização do DATA_CONC_IMPLANTACAO:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		DATA_CONC_IMPLANTACAO = ISNULL(A.DATA_CONCLUSAO, CONVERT(SMALLDATETIME, CONVERT(DATE, A.DATA_ALTERACAO)))
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'Implantação'
		AND A.STATUS_DEMANDA IN ('Concluída', 'Cancelada')
		AND A.DATA_ALTERACAO IS NOT NULL ;


-- Atualização do DATA_CONC_SUP:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		DATA_CONC_SUP = CONVERT(SMALLDATETIME, CONVERT(DATE, A.DATA_ALTERACAO))
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'Suporte a Empresas'
		AND A.STATUS_DEMANDA = 'Concluída'
		AND A.DATA_ALTERACAO IS NOT NULL ;


-- Cálculo da diferença em dias entre DATA_CADASTRAMENTO e DATA_CONCLUSAO, para demandas concluídas:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		TEMPO_DIAS_DT_CAD_DT_CONC = DATEDIFF(DAY, A.DATA_CADASTRAMENTO, A.DATA_CONC_IMPLANTACAO)
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'Implantação'
		AND A.STATUS_DEMANDA IN ('Concluída', 'Cancelada') ;


-- Agrupamento do campo EQUIPE_SOLICITANTE:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		GRUPO_EQUIPE_SOLICITANTE = 
		CASE
			WHEN A.EQUIPE_SOLICITANTE IN ('Negócios Célula Mercado SUPERA', 'Negócios Célula Mercado de Trabalho', 'Negócios Célula Mercado SIMPLIFICA', 'Negócios Negócio Mercado de Trabalho')
				THEN 'MERCADO'
			WHEN A.EQUIPE_SOLICITANTE IN ('Relacionamento Inteligência de Negócios', 'Inteligência de Negócios')
				THEN 'IN'
			WHEN A.EQUIPE_SOLICITANTE = 'Sem classificação'
				THEN 'SEM CLASSIFICAÇÃO'
			WHEN A.EQUIPE_SOLICITANTE = 'Relacionamento Atendimento a Candidatos'
				THEN 'CANDIDATOS'
			WHEN A.EQUIPE_SOLICITANTE = 'Negócios Publicidade'
				THEN 'PUBLICIDADE'
			WHEN A.EQUIPE_SOLICITANTE IN ('Ciencia de dados', 'Negócios Módulo Recomendação')
				THEN 'CIENCIA DE DADOS'
			WHEN A.EQUIPE_SOLICITANTE IN ('equipe Comercial', 'Relacionamento Comercial')
				THEN 'COMERCIAL'
			WHEN A.EQUIPE_SOLICITANTE IN ('Relacionamento Gestão de Contratos')
				THEN 'CONTRATOS'
			WHEN A.EQUIPE_SOLICITANTE IN ('Negócios DSM', 'Negócios Soluções Personalizadas')
				THEN 'DSM'
			WHEN A.EQUIPE_SOLICITANTE IN ('Relacionamento Educação Corporativa')
				THEN 'EDUCA'
			WHEN A.EQUIPE_SOLICITANTE IN ('Backoffice Financeiro')
				THEN 'FINANÇAS'
			WHEN A.EQUIPE_SOLICITANTE IN ('Grupos de Estratégia VAGAS Grupo VAGAS')
				THEN 'GRUPO VAGAS'
			WHEN A.EQUIPE_SOLICITANTE IN ('Negócios HomePages')
				THEN 'HOME PAGES'
			WHEN A.EQUIPE_SOLICITANTE IN ('Staffing DBA', 'Staffing Infra', 'Staffing Infra Geral')
				THEN 'INFRA'
			WHEN A.EQUIPE_SOLICITANTE IN ('Staffing Marketing de Produto', 'Relacionamento Marketing')
				THEN 'MARKETING'
			WHEN A.EQUIPE_SOLICITANTE IN ('Relacionamento Qualidade de Vagas')
				THEN 'QUALIDADE DE VAGAS'
			WHEN A.EQUIPE_SOLICITANTE IN ('Backoffice Relações Humanas')
				THEN 'RH'
			WHEN A.EQUIPE_SOLICITANTE IN ('Staffing SEO')
				THEN 'SEO'
			WHEN A.EQUIPE_SOLICITANTE IN ('Backoffice Sistemas Corporativos')
				THEN 'SISTEMAS CORPORATIVOS'
			WHEN A.EQUIPE_SOLICITANTE IN ('Relacionamento Suporte a Empresas')
				THEN 'SUPORTE A EMPRESAS'
			WHEN A.EQUIPE_SOLICITANTE IN ('Staffing UX')
				THEN 'UX'
			WHEN ISNULL(A.EQUIPE_SOLICITANTE, 'SEM CLASSIFICAÇÃO') = 'SEM CLASSIFICAÇÃO'
				THEN 'SEM CLASSIFICAÇÃO'
		END
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_SOLICITANTE IN ('Relacionamento Marketing', 
'Relacionamento Inteligência de Negócios','Relacionamento Comercial','Sem classificação','Relacionamento Atendimento a Candidatos','Negócios Célula Mercado SUPERA','Relacionamento Suporte a Empresas','Grupos de Estratégia VAGAS Grupo VAGAS','Relacionamento Gestão de Contratos','Negócios Publicidade','Backoffice Relações Humanas','Staffing SEO','Negócios Soluções Personalizadas','Negócios DSM','Relacionamento Educação Corporativa','Staffing DBA','Backoffice Sistemas Corporativos','Staffing Infra','Staffing UX','Negócios Negócio Mercado de Trabalho','Staffing Infra Geral','equipe Comercial','Negócios Célula Mercado SIMPLIFICA','Staffing Marketing de Produto','Negócios HomePages','Ciencia de dados','Negócios Módulo Recomendação','Relacionamento Qualidade de Vagas','Inteligência de Negócios','Negócios Célula Mercado de Trabalho','Backoffice Financeiro')
		OR ISNULL(A.EQUIPE_SOLICITANTE, '') = '' ;


--------------------------------------------------------------------------
-- Agrupamento dos projetos conforme os filtros criados pela equipe de SI:
--------------------------------------------------------------------------
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		LABEL = REVERSE(SUBSTRING(REVERSE(RTRIM(LTRIM(A.NOME_PROJETO))), 1, CHARINDEX(' ', REVERSE(LTRIM(RTRIM(A.NOME_PROJETO)))) -1))
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades' ;


------------------------------
-- DATA_PROX_RECEBIMENTO_SCAN:
------------------------------
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		DATA_PROX_SCAN = B.DATA_CADASTRAMENTO
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A		OUTER APPLY (SELECT	TOP 1 *
															 FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A1
															 WHERE	CONCAT(A.NOME_PROJETO, A.NOME_DEMANDA, '+', A.TARGET_URL, '+', A.CHAVE_VULNERABILIDADE) = 
																	CONCAT(A1.NOME_PROJETO, A1.NOME_DEMANDA, '+', A1.TARGET_URL, '+', A1.CHAVE_VULNERABILIDADE)
																	AND A1.DATA_CADASTRAMENTO > A.DATA_CADASTRAMENTO
															 ORDER BY
																	A1.DATA_CADASTRAMENTO ASC ) AS B
WHERE	A.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades' ;


-------------------------------------------------------------------
-- Atualização da comparação quantitativa entre meses subsequêntes:
-------------------------------------------------------------------
SET LANGUAGE 'PORTUGUESE' ;

UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		GRUPO_RETORNO = 
		IIF(DATEDIFF(MONTH, A.DATA_CADASTRAMENTO, A.DATA_PROX_SCAN) = 1 AND A.DATA_CADASTRAMENTO < A.DATA_PROX_SCAN ,
		CHOOSE(DATEPART(MONTH, A.DATA_CADASTRAMENTO), 'A)', 'B)', 'C)', 'D)', 'E)', 'F)', 'G)', 'H)', 'I)', 'J)', 'K)', 'L)') + ' ' +
		LEFT(LEFT(UPPER(DATENAME(MONTH, A.DATA_CADASTRAMENTO)), 1) +	RIGHT(DATENAME(MONTH, A.DATA_CADASTRAMENTO), LEN(DATENAME(MONTH, A.DATA_CADASTRAMENTO)) - 1), 3) + '-' + LEFT(CONVERT(CHAR(8), A.DATA_CADASTRAMENTO, 112), 4) + ' - ' +
		LEFT(LEFT(UPPER(DATENAME(MONTH, A.DATA_PROX_SCAN)), 1) +	RIGHT(DATENAME(MONTH, A.DATA_PROX_SCAN), LEN(DATENAME(MONTH, A.DATA_PROX_SCAN)) - 1), 3) + '-' + LEFT(CONVERT(CHAR(8), A.DATA_PROX_SCAN, 112), 4), NULL)
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades'
		AND A.DATA_PROX_SCAN IS NOT NULL ;

---------------------------------------------------------------
-- Inserção de registros teste, para validação da regra abaixo:
---------------------------------------------------------------
INSERT INTO [VAGAS_DW].[DEMANDAS_EQUIPES](ID_DEMANDA, NUMERO_DEMANDA, NOME_DEMANDA, NOME_PROJETO, TIPO_DEMANDA, DATA_CADASTRAMENTO, DATA_CAD_AUXILIAR, EQUIPE_PROJETO, CRIADOR, TARGET_URL, CHAVE_VULNERABILIDADE, SEVERITY, LABEL)
SELECT	ID_DEMANDA ,
		NUMERO_DEMANDA ,
		NOME_DEMANDA ,
		NOME_PROJETO ,
		TIPO_DEMANDA ,
		'20170101' AS DATA_CADASTRAMENTO  ,
		'20170101' AS DATA_CAD_AUXILIAR ,
		A.EQUIPE_PROJETO ,
		'fiama.cristi' AS CRIADOR ,
		A.TARGET_URL ,
		A.CHAVE_VULNERABILIDADE ,
		A.SEVERITY ,
		A.LABEL
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades'
		AND A.DATA_CADASTRAMENTO = '20180511'
		AND A.NOME_DEMANDA = 'Acunetix - Backup files'
		AND A.NOME_PROJETO = 'Gestão de Vulnerabilidades Web - PROD - Flix/Redes/EB' 
UNION ALL
SELECT	ID_DEMANDA ,
		NUMERO_DEMANDA ,
		NOME_DEMANDA ,
		NOME_PROJETO ,
		TIPO_DEMANDA ,
		'20170201' AS DATA_CADASTRAMENTO  ,
		'20170201' AS DATA_CAD_AUXILIAR ,
		A.EQUIPE_PROJETO ,
		'fiama.cristi' AS CRIADOR ,
		A.TARGET_URL ,
		A.CHAVE_VULNERABILIDADE ,
		A.SEVERITY ,
		A.LABEL
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades'
		AND A.DATA_CADASTRAMENTO = '20180511'
		AND A.NOME_DEMANDA = 'Acunetix - Backup files'
		AND A.NOME_PROJETO = 'Gestão de Vulnerabilidades Web - PROD - Flix/Redes/EB' 
UNION ALL
SELECT	ID_DEMANDA ,
		NUMERO_DEMANDA ,
		NOME_DEMANDA ,
		NOME_PROJETO ,
		TIPO_DEMANDA ,
		'20171201' AS DATA_CADASTRAMENTO  ,
		'20171201' AS DATA_CAD_AUXILIAR ,
		A.EQUIPE_PROJETO ,
		'fiama.cristi' AS CRIADOR ,
		A.TARGET_URL ,
		A.CHAVE_VULNERABILIDADE ,
		A.SEVERITY ,
		A.LABEL
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades'
		AND A.DATA_CADASTRAMENTO = '20180511'
		AND A.NOME_DEMANDA = 'Acunetix - Backup files'
		AND A.NOME_PROJETO = 'Gestão de Vulnerabilidades Web - PROD - Flix/Redes/EB'
UNION ALL
SELECT	ID_DEMANDA ,
		NUMERO_DEMANDA ,
		NOME_DEMANDA ,
		NOME_PROJETO ,
		TIPO_DEMANDA ,
		'20161201' AS DATA_CADASTRAMENTO  ,
		'20161201' AS DATA_CAD_AUXILIAR ,
		A.EQUIPE_PROJETO ,
		'fiama.cristi' AS CRIADOR ,
		A.TARGET_URL ,
		A.CHAVE_VULNERABILIDADE ,
		A.SEVERITY ,
		A.LABEL
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades'
		AND A.DATA_CADASTRAMENTO = '20180507'
		AND A.ID_DEMANDA = 168041
		AND A.NOME_DEMANDA = 'Acunetix - Login page password-guessing attack'
		AND A.NOME_PROJETO = 'Gestão de Vulnerabilidades Web - PROD - Wordpress' 
UNION ALL
SELECT	ID_DEMANDA ,
		NUMERO_DEMANDA ,
		NOME_DEMANDA ,
		NOME_PROJETO ,
		TIPO_DEMANDA ,
		'20170101' AS DATA_CADASTRAMENTO  ,
		'20170101' AS DATA_CAD_AUXILIAR ,
		A.EQUIPE_PROJETO ,
		'fiama.cristi' AS CRIADOR ,
		A.TARGET_URL ,
		A.CHAVE_VULNERABILIDADE ,
		A.SEVERITY ,
		A.LABEL
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades'
		AND A.DATA_CADASTRAMENTO = '20180507'
		AND A.ID_DEMANDA = 168041
		AND A.NOME_DEMANDA = 'Acunetix - Login page password-guessing attack'
		AND A.NOME_PROJETO = 'Gestão de Vulnerabilidades Web - PROD - Wordpress' 
UNION ALL
SELECT	ID_DEMANDA ,
		NUMERO_DEMANDA ,
		NOME_DEMANDA ,
		NOME_PROJETO ,
		TIPO_DEMANDA ,
		'20170301' AS DATA_CADASTRAMENTO  ,
		'20170301' AS DATA_CAD_AUXILIAR ,
		A.EQUIPE_PROJETO ,
		'fiama.cristi' AS CRIADOR ,
		A.TARGET_URL ,
		A.CHAVE_VULNERABILIDADE ,
		A.SEVERITY ,
		A.LABEL
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades'
		AND A.DATA_CADASTRAMENTO = '20180507'
		AND A.ID_DEMANDA = 168041
		AND A.NOME_DEMANDA = 'Acunetix - Login page password-guessing attack'
		AND A.NOME_PROJETO = 'Gestão de Vulnerabilidades Web - PROD - Wordpress' ;

----------------------------------------------------
-- Vulnerabilidades persistentes, corrigidas, novas:
----------------------------------------------------
-- Persistente: item existente no mês atual, que existe no mês anterior.
-- Corrigidas: item existente no mês atual, que não existe no mês seguinte ao atual.
-- Novas: item inexistente no mês anterior, existente no mês atual.
-- DROP TABLE #TMP_DEMANDAS_AUX ;
SELECT	A.ID_DEMANDA ,
		A.NUMERO_DEMANDA ,
		A.NOME_PROJETO ,
		A.NOME_DEMANDA ,
		A.TARGET_URL ,
		A.CHAVE_VULNERABILIDADE ,
		A.DATA_CAD_AUXILIAR ,
		B.DATA_ANTERIOR ,
		C.DATA_POSTERIOR ,
		CASE
			WHEN B.DATA_ANTERIOR IS NULL
				THEN 'NOVO'
			ELSE 'PERSISTENTE'
		END AS CLASSIFICACAO
INTO	#TMP_DEMANDAS_AUX
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
											OUTER APPLY (SELECT	TOP 1 A1.DATA_CAD_AUXILIAR AS DATA_ANTERIOR
														 FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A1
														 WHERE	A1.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades'
																AND (A.NOME_PROJETO = A1.NOME_PROJETO
											 						 AND A.NOME_DEMANDA = A1.NOME_DEMANDA
																	 AND A.TARGET_URL = A1.TARGET_URL
																	 AND A.CHAVE_VULNERABILIDADE = A1.CHAVE_VULNERABILIDADE)
																AND A1.DATA_CAD_AUXILIAR < A.DATA_CAD_AUXILIAR
																AND DATEDIFF(MONTH, A1.DATA_CAD_AUXILIAR, A.DATA_CAD_AUXILIAR) = 1
														 ORDER BY
																A1.DATA_CAD_AUXILIAR DESC) AS B -- ÚLT DATA_CAD ANTERIOR A ATUAL
											OUTER APPLY (SELECT	TOP 1 A1.DATA_CAD_AUXILIAR AS DATA_POSTERIOR
														 FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A1
														 WHERE	A1.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades'
																AND (A.NOME_PROJETO = A1.NOME_PROJETO
											 						 AND A.NOME_DEMANDA = A1.NOME_DEMANDA
																	 AND A.TARGET_URL = A1.TARGET_URL
																	 AND A.CHAVE_VULNERABILIDADE = A1.CHAVE_VULNERABILIDADE)
																AND A1.DATA_CAD_AUXILIAR > A.DATA_CAD_AUXILIAR
																AND DATEDIFF(MONTH, A.DATA_CAD_AUXILIAR, A1.DATA_CAD_AUXILIAR) = 1
														 ORDER BY
																A1.DATA_CAD_AUXILIAR ASC) AS C -- PRM DATA_CAD POSTERIOR A ATUAL									  
WHERE	A.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades' ;


-- Limpeza do campo CLASSIFICACAO:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		CLASSIFICACAO = NULL
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades' ;


UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		CLASSIFICACAO = B.CLASSIFICACAO
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A	INNER JOIN #TMP_DEMANDAS_AUX AS B ON (A.NOME_PROJETO = B.NOME_PROJETO
																				  AND A.NOME_DEMANDA = B.NOME_DEMANDA
																				  AND A.TARGET_URL = B.TARGET_URL
																				  AND A.CHAVE_VULNERABILIDADE = B.CHAVE_VULNERABILIDADE
																				  AND A.DATA_CAD_AUXILIAR = B.DATA_CAD_AUXILIAR)
WHERE	A.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades' ;


-- CORRIGIDO:
-- DROP TABLE #TMP_CORRECAO ;
SELECT	A.ID_DEMANDA ,
		A.NUMERO_DEMANDA ,
		A.NOME_PROJETO ,
		A.NOME_DEMANDA ,
		A.TARGET_URL ,
		A.CHAVE_VULNERABILIDADE ,
		DATEADD(MONTH, 1, A.DATA_CADASTRAMENTO) AS DATA_CADASTRAMENTO ,
		DATEADD(MONTH, 1, A.DATA_CAD_AUXILIAR) AS DATA_CAD_AUXILIAR ,
		A.SEVERITY ,
		'CORRIGIDO' AS CLASSIFICACAO ,
		'SI - Gestão de Vulnerabilidades' AS EQUIPE_PROJETO ,
		A.LABEL
INTO	#TMP_CORRECAO
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
								OUTER APPLY (SELECT	TOP 1 A1.DATA_CAD_AUXILIAR AS DATA_ANTERIOR
														 FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A1
														 WHERE	A1.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades'
																AND (A.NOME_PROJETO = A1.NOME_PROJETO
											 						 AND A.NOME_DEMANDA = A1.NOME_DEMANDA
																	 AND A.TARGET_URL = A1.TARGET_URL
																	 AND A.CHAVE_VULNERABILIDADE = A1.CHAVE_VULNERABILIDADE)
																AND A1.DATA_CAD_AUXILIAR < A.DATA_CAD_AUXILIAR
																AND DATEDIFF(MONTH, A1.DATA_CAD_AUXILIAR, A.DATA_CAD_AUXILIAR) = 1
														 ORDER BY
																A1.DATA_CAD_AUXILIAR DESC) AS B -- ÚLT DATA_CAD ANTERIOR A ATUAL
											OUTER APPLY (SELECT	TOP 1 A1.DATA_CAD_AUXILIAR AS DATA_POSTERIOR
														 FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A1
														 WHERE	A1.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades'
																AND (A.NOME_PROJETO = A1.NOME_PROJETO
											 						 AND A.NOME_DEMANDA = A1.NOME_DEMANDA
																	 AND A.TARGET_URL = A1.TARGET_URL
																	 AND A.CHAVE_VULNERABILIDADE = A1.CHAVE_VULNERABILIDADE)
																AND A1.DATA_CAD_AUXILIAR > A.DATA_CAD_AUXILIAR
																AND DATEDIFF(MONTH, A.DATA_CAD_AUXILIAR, A1.DATA_CAD_AUXILIAR) = 1
														 ORDER BY
																A1.DATA_CAD_AUXILIAR ASC) AS C -- PRM DATA_CAD POSTERIOR A ATUAL	
WHERE	A.EQUIPE_PROJETO = 'SI - Gestão de Vulnerabilidades'
		AND ( (B.DATA_ANTERIOR IS NOT NULL
			   AND C.DATA_POSTERIOR IS NULL )
			   OR (B.DATA_ANTERIOR IS NULL
				   AND C.DATA_POSTERIOR IS NULL) )
		AND (DATEADD(MONTH, 1, A.DATA_CADASTRAMENTO) <= (SELECT	MAX(A1.DATA_CADASTRAMENTO) FROM [STAGE].[VAGAS_DW].[TMP_DEMANDAS_EQUIPES] AS A1
														 WHERE  A.EQUIPE_PROJETO = A1.EQUIPE_PROJETO
																AND A.NOME_PROJETO = A1.NOME_PROJETO) ); -- Considerar a regra da correção apenas para DATA_CADASTRAMENTO com acréscimo de 1 mês, desde que esta data seja até a última data de carga dos dados no JIRA para um mesmo NOME_PROJETO.


-- Inserção de registros referentes a CORRECAO:
INSERT INTO [VAGAS_DW].[DEMANDAS_EQUIPES] (ID_DEMANDA, NUMERO_DEMANDA, NOME_PROJETO, NOME_DEMANDA, TARGET_URL, CHAVE_VULNERABILIDADE, DATA_CADASTRAMENTO, DATA_CAD_AUXILIAR, SEVERITY, CLASSIFICACAO, EQUIPE_PROJETO, LABEL)
SELECT	*
FROM	#TMP_CORRECAO AS A
WHERE	A.DATA_CAD_AUXILIAR <= EOMONTH(GETDATE())  ; -- Desde que a DATA_CAD_AUXILIAR seja até o último dia do mês atual.


-- Aplicação dos Ajustes Pontuais:
EXEC [VAGAS_DW].[SRP_OLAP_Carga_DEMANDAS_EQUIPES_Ajustes_Pontuais] ;

-- Atribuição do valor "OUTROS" pro campo LABEL, para demandas da equipe Implantação que estão com FLAG_ROOT = 1.
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		LABEL = 'OUTROS'
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'Implantação'
		AND A.FLAG_ROOT = 1 ;


-- 29/04/2019: Inclusão do campo SEGMENTO_SC pra equipe de Soluções Personalizadas.
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		SEGMENTO_SC =
				  (SELECT	TOP 1 UPPER(IIF(ISNULL(A1.SEGMENTO_SC, '') = '', 'EM BRANCO', A1.SEGMENTO_SC)) AS SEGMENTO_SC
				   FROM		[VAGAS_DW].[CLIENTES] AS A1
				   WHERE	REPLACE(LTRIM(RTRIM(A.CLIENTE)), CHAR(9), '') = LTRIM(RTRIM(A1.CLIENTE_VAGAS))
							AND	A1.CLIENTE_VAGAS IS NOT NULL
							AND LEFT(A1.CONTA_ID, 6) != 'No_opp'
					ORDER BY 1 DESC)
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'Soluções Personalizadas'
		AND ISNULL(A.CLIENTE, '') != '' ;

-- Atualização dos registros com SEGMENTO_SC NULL para Soluções Personalizadas
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		SEGMENTO_SC = 'EM BRANCO'
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.SEGMENTO_SC IS NULL
		AND A.EQUIPE_PROJETO = 'Soluções Personalizadas' ;


-- 29/04/2019: Inclusão do campo SEGMENTO_SC pra equipe Implantação:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		SEGMENTO_SC = A.MERCADO
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'Implantação'
		AND A.MERCADO IN ('PREMIUM', 'BASICO', 'GESTAO', 'CONTROLE', 'ENTERPRISE') ;

-- 29/04/2019: Ajuste no campo MERCADO pra equipe de Implantação:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		MERCADO = 'EM BRANCO'
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'Implantação'
		AND A.MERCADO IN ('PREMIUM', 'BASICO', 'GESTAO', 'CONTROLE', 'ENTERPRISE') ;