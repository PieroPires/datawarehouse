USE VAGAS_DW
GO

IF EXISTS ( SELECT * FROM SYS.OBJECTS WHERE NAME = 'SPR_OLAP_Carga_Demandas_Equipes' AND SCHEMA_NAME(SCHEMA_ID) = 'VAGAS_DW')
DROP PROCEDURE VAGAS_DW.SPR_OLAP_Carga_Demandas_Equipes
GO

-- =============================================
-- Author: Luiz Fernando Braz
-- Create date: 19/05/2016
-- Description: Procedure para carga das tabelas temporárias (BD Stage) para alimentação do DW
-- =============================================

CREATE PROCEDURE VAGAS_DW.SPR_OLAP_Carga_Demandas_Equipes 
AS
SET NOCOUNT ON

-- Atualizar informação de ciclo (baseado no registro de #CICLO adicionado nas tarefas atreladas à Marcos da mesma semana)
UPDATE VAGAS_DW.TMP_DEMANDAS_EQUIPES SET CICLO = UPPER(B.CICLO)
FROM VAGAS_DW.TMP_DEMANDAS_EQUIPES A
OUTER APPLY ( SELECT TOP 1 * FROM VAGAS_DW.TMP_DEMANDAS_EQUIPES
			  WHERE NOME_RELEASE = A.NOME_RELEASE
			  AND CICLO <> '' 
			  ORDER BY DATA_CADASTRAMENTO ASC ) B			  
WHERE A.CICLO = ''
AND A.NOME_RELEASE <> 'Sem Release'

UPDATE VAGAS_DW.TMP_DEMANDAS_EQUIPES SET CICLO = NULL
WHERE NOME_RELEASE = ''

-- ATUALIZAR SCORE
UPDATE VAGAS_DW.TMP_DEMANDAS_EQUIPES SET SCORE =		
		-- GRAVIDADE
		CASE WHEN GRAVIDADE = 'sem gravidade' THEN 1
			WHEN GRAVIDADE = 'pouco grave' THEN 2
			WHEN GRAVIDADE = 'grave' THEN 3
			WHEN GRAVIDADE = 'muito grave' THEN 4
			WHEN GRAVIDADE = 'extremamente grave' THEN 5
		END *
		
		-- URGENCIA
		CASE WHEN URGENCIA = 'pode esperar' THEN 1
			WHEN URGENCIA = 'pouco urgente' THEN 2
			WHEN URGENCIA = 'urgente (merece atenção no curto prazo)' THEN 3
			WHEN URGENCIA = 'muito urgente' THEN 4
			WHEN URGENCIA = 'necessidade de ação imediata' THEN 5
		END *
		
		-- ESFORÇO
		CASE WHEN ESFORCO = 'esforço mínimo' THEN 5
			WHEN ESFORCO = 'esforço moderado' THEN 4
			WHEN ESFORCO = 'esforço significativo' THEN 3
			WHEN ESFORCO = 'muito esforço' THEN 2
			WHEN ESFORCO = 'muitíssimo esforço' THEN 1
		END
FROM VAGAS_DW.TMP_DEMANDAS_EQUIPES
WHERE GRAVIDADE IS NOT NULL AND URGENCIA IS NOT NULL AND ESFORCO IS NOT NULL

-- ATUALIZAÇÃO DO ASSIGNED PARA SIST. CORPORATIVOS
UPDATE VAGAS_DW.TMP_DEMANDAS_EQUIPES SET DATA_PRM_ASSIGNED = DATA_CONCLUSAO
FROM VAGAS_DW.TMP_DEMANDAS_EQUIPES 
WHERE ( STATUS_DEMANDA IN ('Concluída','Done') OR STATUS_RESOLUCAO = 'Fixed' )
AND EQUIPE_PROJETO = 'Sistemas Corporativos'
AND DATA_PRM_ASSIGNED IS NULL

DELETE VAGAS_DW.DEMANDAS_EQUIPES
FROM VAGAS_DW.DEMANDAS_EQUIPES A
WHERE EXISTS ( SELECT 1 FROM VAGAS_DW.TMP_DEMANDAS_EQUIPES
				WHERE ID_DEMANDA = A.ID_DEMANDA
				AND EQUIPE_PROJETO = A.EQUIPE_PROJETO)

-- DROP TABLE #TMP_DATA_NORMALIZADA ;
SELECT	TAB.ID_DEMANDA ,
		TAB.NUMERO_DEMANDA ,
		TAB.DATA_CADASTRAMENTO ,
		TAB.DATA_PRM_CONCLUSAO ,
		TAB.DATA_EM_ABERTO ,
		CASE WHEN DATEPART(WEEKDAY, TAB.DATA_INCLUSAO_NORMALIZADA) = 7 -- SÁBADO
				THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,2, TAB.DATA_INCLUSAO_NORMALIZADA),112)))
			WHEN DATEPART(WEEKDAY, TAB.DATA_INCLUSAO_NORMALIZADA) = 1 -- DOMINGO
				THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,1, TAB.DATA_INCLUSAO_NORMALIZADA),112)))
			ELSE TAB.DATA_INCLUSAO_NORMALIZADA 
		END AS DATA_INCLUSAO_NORMALIZADA
INTO #TMP_DATA_NORMALIZADA
FROM 
	(

	-- TRATAR CHAMADOS ABERTOS FORA DO HORÁRIO DE EXPEDIENTE (08:00 ÀS 18:00)
	SELECT	A.ID_DEMANDA ,
			A.NUMERO_DEMANDA ,
			A.DATA_CADASTRAMENTO ,
			A.DATA_PRM_CONCLUSAO ,
			A.DATA_EM_ABERTO ,
			CASE WHEN (DATEPART(HOUR,A.DATA_CADASTRAMENTO) >= 18 AND DATEPART(MINUTE, A.DATA_CADASTRAMENTO) > 0) OR (DATEPART(HOUR, A.DATA_CADASTRAMENTO) > 18)
					THEN DATEADD(HOUR,8,DATEADD(DAY,1,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,A.DATA_CADASTRAMENTO,112))))
				 WHEN DATEPART(HOUR,A.DATA_CADASTRAMENTO) < 8 
					THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,A.DATA_CADASTRAMENTO,112)))
				ELSE A.DATA_CADASTRAMENTO 
			END AS DATA_INCLUSAO_NORMALIZADA
	FROM	[VAGAS_DW].[TMP_DEMANDAS_EQUIPES] AS A
	WHERE	A.EQUIPE_PROJETO = 'Gestão de contratos'
	
	) TAB
ORDER BY 1


-- TRATAR FERIADOS NACIONAIS + SP 
UPDATE #TMP_DATA_NORMALIZADA SET DATA_INCLUSAO_NORMALIZADA = CASE
				-- se o próx. dia for sábado adiantar 3 dias (seg.) 
				 WHEN DATEPART(WEEKDAY,DATEADD(DAY,1,DATA_INCLUSAO_NORMALIZADA)) = 7 THEN DATEADD(HOUR, 8, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, DATEADD(DAY,3,DATA_INCLUSAO_NORMALIZADA), 112))) 
				-- se o próx. dia for domingo adiantar 2 dias 
				 WHEN DATEPART(WEEKDAY,DATEADD(DAY,1,DATA_INCLUSAO_NORMALIZADA)) = 1 THEN DATEADD(HOUR, 8, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, DATEADD(DAY,2,DATA_INCLUSAO_NORMALIZADA), 112))) 
        ELSE DATEADD(HOUR, 8, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, DATEADD(DAY,1,DATA_INCLUSAO_NORMALIZADA), 112))) END 
FROM #TMP_DATA_NORMALIZADA A
WHERE EXISTS ( SELECT 1
				FROM VAGAS_DW.FERIADOS_NACIONAIS -- CONTÉM OS FERIADOS BRA + SP ATE 2019
				WHERE DATA = CONVERT(SMALLDATETIME,CONVERT(VARCHAR,A.DATA_INCLUSAO_NORMALIZADA,112)) )

-- INTERVALO DE DATA E HORA:
-- DROP TABLE #TMP_DATA_HORA ;
SELECT	A.Data AS DATA ,
		B.HORA AS HORA ,
		CONVERT(SMALLDATETIME, CONCAT(A.Data , ' ', B.HORA)) AS DATA_HORA
INTO	#TMP_DATA_HORA
FROM	[Dim].[Data] AS A	CROSS JOIN [Dim].[Hora] AS B
WHERE	A.Data >= (SELECT MIN(CONVERT(DATE, A1.DATA_INCLUSAO_NORMALIZADA))
				   FROM #TMP_DATA_NORMALIZADA AS A1)
		AND A.Data <= CAST(GETDATE() AS DATE)
		AND NOT EXISTS (SELECT 1
						FROM [VAGAS_DW].[VAGAS_DW].[FERIADOS_NACIONAIS] AS A1
						WHERE A.Data = CONVERT(DATE, A1.DATA))
ORDER BY A.DATA ASC ;


-- CÁLCULO TEMPO MÉDIO DE ATENDIMENTO:
-----------------------------------------------------------------------------------------------------------
-- Intervalo de data e hora entre os campos DATA_INCLUSAO_NORMALIZADA e DATA_PRM_CONCLUSAO de cada DEMANDA:
-----------------------------------------------------------------------------------------------------------
-- DROP TABLE #FORMAT_DATA_HORA_TMA ;
SELECT	A.NUMERO_DEMANDA ,
		A.DATA_INCLUSAO_NORMALIZADA ,
		A.DATA_PRM_CONCLUSAO ,
		CASE WHEN (CONVERT(DATE, A.DATA_INCLUSAO_NORMALIZADA) = CONVERT(DATE, B.DATA_HORA) AND DATEPART(HOUR, A.DATA_INCLUSAO_NORMALIZADA) = DATEPART(HOUR, B.DATA_HORA)) 
				THEN A.DATA_INCLUSAO_NORMALIZADA
			 WHEN (CONVERT(DATE, A.DATA_PRM_CONCLUSAO) = CONVERT(DATE, B.DATA_HORA) AND DATEPART(HOUR, A.DATA_PRM_CONCLUSAO) = DATEPART(HOUR, B.DATA_HORA)) 
				THEN A.DATA_PRM_CONCLUSAO
			 ELSE B.DATA_HORA
		END AS DATA_HORA
INTO	#FORMAT_DATA_HORA_TMA
FROM	#TMP_DATA_NORMALIZADA AS A	LEFT OUTER JOIN #TMP_DATA_HORA AS B ON B.DATA_HORA >= DATEADD(MINUTE, DATEPART(MINUTE, A.DATA_INCLUSAO_NORMALIZADA) * -1, A.DATA_INCLUSAO_NORMALIZADA) AND B.DATA_HORA <= A.DATA_PRM_CONCLUSAO
ORDER BY DATA_HORA ASC ;

-- CONTROLE FORMAT_DATA_HORA_TMA:
-- DROP TABLE #CONTROLE_FORMAT_DATA_HORA_TMA ;
SELECT	A.NUMERO_DEMANDA ,
		A.DATA_INCLUSAO_NORMALIZADA ,
		A.DATA_PRM_CONCLUSAO ,
		COUNT(*) AS QTD_REGISTROS
INTO	#CONTROLE_FORMAT_DATA_HORA_TMA
FROM	#FORMAT_DATA_HORA_TMA AS A
GROUP BY
		A.NUMERO_DEMANDA ,
		A.DATA_INCLUSAO_NORMALIZADA ,
		A.DATA_PRM_CONCLUSAO ;

-- DROP TABLE #HORA_UTIL_TMA ;
SELECT	* ,
		CASE WHEN DATEPART(WEEKDAY, DATA_HORA) IN (1, 7) THEN 0
			 WHEN DATEPART(HOUR, DATA_HORA) >= 18 AND DATEPART(MINUTE, DATA_HORA) > 0 THEN 0
			 WHEN DATEPART(HOUR, DATA_HORA) BETWEEN 8 AND 18 THEN 1 ELSE 0 END AS HORA_UTIL
INTO	#HORA_UTIL_TMA
FROM	#FORMAT_DATA_HORA_TMA ;


-- DROP TABLE #INTERVALO_HORAS_UTEIS_TMA ;
SELECT	NUMERO_DEMANDA ,
		DATA_INCLUSAO_NORMALIZADA ,
		DATA_PRM_CONCLUSAO ,
		DATA_HORA ,
		MENOR_DATA_HORA ,
		MAIOR_DATA_HORA ,
		HORA_UTIL
INTO	#INTERVALO_HORAS_UTEIS_TMA
FROM	#HORA_UTIL_TMA AS A	CROSS APPLY (SELECT	TOP 1 A1.DATA_HORA AS MENOR_DATA_HORA
										 FROM	#HORA_UTIL_TMA AS A1
										 WHERE	A.NUMERO_DEMANDA = A1.NUMERO_DEMANDA
												AND CONVERT(DATE, A.DATA_HORA) = CONVERT(DATE, A1.DATA_HORA)
												AND A1.HORA_UTIL = 1
												ORDER BY A1.DATA_HORA ASC) AS B
									CROSS APPLY (SELECT	TOP 1 CASE
																WHEN A2.QTD_REGISTROS = 1 AND CONVERT(DATE, A2.DATA_INCLUSAO_NORMALIZADA) = CONVERT(DATE, A2.DATA_PRM_CONCLUSAO) AND DATEPART(HOUR, A2.DATA_INCLUSAO_NORMALIZADA) = DATEPART(HOUR, A2.DATA_PRM_CONCLUSAO) AND DATEPART(MINUTE, A2.DATA_INCLUSAO_NORMALIZADA) != DATEPART(MINUTE, A2.DATA_PRM_CONCLUSAO) THEN A2.DATA_PRM_CONCLUSAO
																ELSE A1.DATA_HORA
																END AS MAIOR_DATA_HORA
										 FROM	#HORA_UTIL_TMA AS A1	LEFT OUTER JOIN #CONTROLE_FORMAT_DATA_HORA_TMA AS A2 ON A.NUMERO_DEMANDA = A2.NUMERO_DEMANDA
										 WHERE	A.NUMERO_DEMANDA = A1.NUMERO_DEMANDA
												AND CONVERT(DATE, A.DATA_HORA) = CONVERT(DATE, A1.DATA_HORA)
												AND A1.HORA_UTIL = 1
												ORDER BY A1.DATA_HORA DESC) AS C
WHERE	A.HORA_UTIL = 1 ;


-- RESULTADO: Diferença de horas entre DATA_INCLUSAO_NORMALIZADA e DATA_FECHAMENTO no intervalo de horas úteis:
-- DROP TABLE #RESULTADO_INTERVALO_HORAS_UTEIS_TMA ;
SELECT	DISTINCT NUMERO_DEMANDA ,
				 MENOR_DATA_HORA ,
				 MAIOR_DATA_HORA ,
		CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 AS DIFERENCA_HORAS ,
		FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60) AS HORAS ,
		ROUND(ROUND(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 - FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60), 2)*60, 0) AS MINUTOS ,
		CONCAT(CONVERT(VARCHAR(2), FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60)), ':', CONVERT(VARCHAR(2), ROUND(ROUND(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 - FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60), 2)*60, 0))) AS HORA_MINUTO
INTO	#RESULTADO_INTERVALO_HORAS_UTEIS_TMA
FROM	#INTERVALO_HORAS_UTEIS_TMA ;


-- DROP TABLE #DIFERENCA_HORAS_UTEIS_TMA ;
SELECT	NUMERO_DEMANDA ,
		CONVERT(FLOAT, SUM(DIFERENCA_HORAS)) / 24 AS TEMPO_MEDIO_ATENDIMENTO_GC
INTO	#DIFERENCA_HORAS_UTEIS_TMA
FROM	#RESULTADO_INTERVALO_HORAS_UTEIS_TMA 
GROUP BY
		NUMERO_DEMANDA ;


-- CÁLCULO TEMPO MÉDIO EM ABERTO:
-------------------------------------------------------------------------------------------------------
-- Intervalo de data e hora entre os campos DATA_INCLUSAO_NORMALIZADA e DATA_EM_ABERTO de cada DEMANDA:
-------------------------------------------------------------------------------------------------------
-- DROP TABLE #FORMAT_DATA_HORA_TMA_2 ;
SELECT	A.NUMERO_DEMANDA ,
		A.DATA_INCLUSAO_NORMALIZADA ,
		A.DATA_EM_ABERTO ,
		CASE WHEN (CONVERT(DATE, A.DATA_INCLUSAO_NORMALIZADA) = CONVERT(DATE, B.DATA_HORA) AND DATEPART(HOUR, A.DATA_INCLUSAO_NORMALIZADA) = DATEPART(HOUR, B.DATA_HORA)) 
				THEN A.DATA_INCLUSAO_NORMALIZADA
			 WHEN (CONVERT(DATE, A.DATA_EM_ABERTO) = CONVERT(DATE, B.DATA_HORA) AND DATEPART(HOUR, A.DATA_EM_ABERTO) = DATEPART(HOUR, B.DATA_HORA)) 
				THEN A.DATA_EM_ABERTO
			 ELSE B.DATA_HORA
		END AS DATA_HORA
INTO	#FORMAT_DATA_HORA_TMA_2
FROM	#TMP_DATA_NORMALIZADA AS A	LEFT OUTER JOIN #TMP_DATA_HORA AS B ON B.DATA_HORA >= DATEADD(MINUTE, DATEPART(MINUTE, A.DATA_INCLUSAO_NORMALIZADA) * -1, A.DATA_INCLUSAO_NORMALIZADA) AND B.DATA_HORA <= A.DATA_EM_ABERTO
ORDER BY DATA_HORA ASC ;


-- CONTROLE FORMAT_DATA_HORA_TMA:
-- DROP TABLE #CONTROLE_FORMAT_DATA_HORA_TMA_2 ;
SELECT	A.NUMERO_DEMANDA ,
		A.DATA_INCLUSAO_NORMALIZADA ,
		A.DATA_EM_ABERTO ,
		COUNT(*) AS QTD_REGISTROS
INTO	#CONTROLE_FORMAT_DATA_HORA_TMA_2
FROM	#FORMAT_DATA_HORA_TMA_2 AS A
GROUP BY
		A.NUMERO_DEMANDA ,
		A.DATA_INCLUSAO_NORMALIZADA ,
		A.DATA_EM_ABERTO ;


-- DROP TABLE #HORA_UTIL_TMA_2 ;
SELECT	* ,
		CASE WHEN DATEPART(WEEKDAY, DATA_HORA) IN (1, 7) THEN 0
			 WHEN DATEPART(HOUR, DATA_HORA) >= 19 AND DATEPART(MINUTE, DATA_HORA) > 0 THEN 0
			 WHEN DATEPART(HOUR, DATA_HORA) BETWEEN 8 AND 19 THEN 1 ELSE 0 END AS HORA_UTIL
INTO	#HORA_UTIL_TMA_2
FROM	#FORMAT_DATA_HORA_TMA_2 ;

-- DROP TABLE #INTERVALO_HORAS_UTEIS_TMA_2 ;
SELECT	NUMERO_DEMANDA ,
		DATA_INCLUSAO_NORMALIZADA ,
		DATA_EM_ABERTO ,
		DATA_HORA ,
		MENOR_DATA_HORA ,
		MAIOR_DATA_HORA ,
		HORA_UTIL
INTO	#INTERVALO_HORAS_UTEIS_TMA_2
FROM	#HORA_UTIL_TMA_2 AS A	CROSS APPLY (SELECT	TOP 1 A1.DATA_HORA AS MENOR_DATA_HORA
											 FROM	#HORA_UTIL_TMA_2 AS A1
											 WHERE	A.NUMERO_DEMANDA = A1.NUMERO_DEMANDA
													AND CONVERT(DATE, A.DATA_HORA) = CONVERT(DATE, A1.DATA_HORA)
													AND A1.HORA_UTIL = 1
													ORDER BY A1.DATA_HORA ASC) AS B
									CROSS APPLY (SELECT	TOP 1 CASE
																WHEN A2.QTD_REGISTROS = 1 AND CONVERT(DATE, A2.DATA_INCLUSAO_NORMALIZADA) = CONVERT(DATE, A2.DATA_EM_ABERTO) AND DATEPART(HOUR, A2.DATA_INCLUSAO_NORMALIZADA) = DATEPART(HOUR, A2.DATA_EM_ABERTO) AND DATEPART(MINUTE, A2.DATA_INCLUSAO_NORMALIZADA) != DATEPART(MINUTE, A2.DATA_EM_ABERTO) THEN A2.DATA_EM_ABERTO
																ELSE A1.DATA_HORA
																END AS MAIOR_DATA_HORA
										 FROM	#HORA_UTIL_TMA_2 AS A1	LEFT OUTER JOIN #CONTROLE_FORMAT_DATA_HORA_TMA_2 AS A2 ON A.NUMERO_DEMANDA = A2.NUMERO_DEMANDA
										 WHERE	A.NUMERO_DEMANDA = A1.NUMERO_DEMANDA
												AND CONVERT(DATE, A.DATA_HORA) = CONVERT(DATE, A1.DATA_HORA)
												AND A1.HORA_UTIL = 1
												ORDER BY A1.DATA_HORA DESC) AS C
WHERE	A.HORA_UTIL = 1 ;


-- RESULTADO: Diferença de horas entre DATA_INCLUSAO_NORMALIZADA e DATA_FECHAMENTO no intervalo de horas úteis:
SELECT	DISTINCT NUMERO_DEMANDA ,
				 MENOR_DATA_HORA ,
				 MAIOR_DATA_HORA ,
		CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 AS DIFERENCA_HORAS ,
		FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60) AS HORAS ,
		ROUND(ROUND(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 - FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60), 2)*60, 0) AS MINUTOS ,
		CONCAT(CONVERT(VARCHAR(2), FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60)), ':', CONVERT(VARCHAR(2), ROUND(ROUND(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 - FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60), 2)*60, 0))) AS HORA_MINUTO
INTO	#RESULTADO_INTERVALO_HORAS_UTEIS_TMA_2
FROM	#INTERVALO_HORAS_UTEIS_TMA_2 ;

-- DROP TABLE #DIFERENCA_HORAS_UTEIS_TMA_2 ;
SELECT	NUMERO_DEMANDA ,
		CONVERT(FLOAT, SUM(DIFERENCA_HORAS)) / 24 AS TEMPO_MEDIO_ABERTO_GC
INTO	#DIFERENCA_HORAS_UTEIS_TMA_2
FROM	#RESULTADO_INTERVALO_HORAS_UTEIS_TMA_2
GROUP BY
		NUMERO_DEMANDA ;

-- Inserir novas demandas
INSERT INTO [VAGAS_DW].[DEMANDAS_EQUIPES] (ID_DEMANDA, NUMERO_DEMANDA, NOME_DEMANDA, NOME_PROJETO, RESPONSAVEL, CRIADOR, TIPO_DEMANDA, PRIORIDADE, STATUS_DEMANDA, DATA_CADASTRAMENTO, DATA_ALTERACAO ,DATA_EXPECTATIVA_CONCLUSAO, DATA_CONCLUSAO, STATUS_RESOLUCAO, TEMPO_ESTIMATIVA, TEMPO_GASTO, FLAG_ATRELADO_MARCO, NOME_DEMANDA_ROOT,
NOME_RELEASE, EQUIPE_SOLICITANTE, TIPO_SUB_TAREFA, FLAG_ROOT, CICLO, GRAVIDADE, URGENCIA, ESFORCO, SCORE, TIPO_CLIENTE, FATURAVEL, EQUIPE_PROJETO, DATA_PRM_ASSIGNED,
FERRAMENTA, SINTOMA, INDICE_SATISFACAO, LABEL,SPRINT, STORY_POINTS, SOLICITANTE, TIPO_ANALISE, DATA_INCLUSAO_NORMALIZADA, TEMPO_MEDIO_ABERTO_GC, TEMPO_MEDIO_ATENDIMENTO_GC, DATA_PRM_CONCLUSAO)
SELECT	A.ID_DEMANDA ,
		A.NUMERO_DEMANDA ,
		A.NOME_DEMANDA ,
		A.NOME_PROJETO ,
		A.RESPONSAVEL ,
		A.CRIADOR ,
		A.TIPO_DEMANDA ,
		A.PRIORIDADE ,
		A.STATUS_DEMANDA ,
		A.DATA_CADASTRAMENTO,
		A.DATA_ALTERACAO ,
		A.DATA_EXPECTATIVA_CONCLUSAO ,
		A.DATA_CONCLUSAO ,
		A.STATUS_RESOLUCAO ,
		A.TEMPO_ESTIMATIVA ,
		A.TEMPO_GASTO ,
		A.FLAG_ATRELADO_MARCO,A.NOME_DEMANDA_ROOT ,
		A.NOME_RELEASE ,
		A.EQUIPE_SOLICITANTE ,
		A.TIPO_SUB_TAREFA ,
		A.FLAG_ROOT ,
		A.CICLO ,
		A.GRAVIDADE ,
		A.URGENCIA ,
		A.ESFORCO ,
		A.SCORE ,
		A.TIPO_CLIENTE ,
		A.FATURAVEL ,
		A.EQUIPE_PROJETO ,
		A.DATA_PRM_ASSIGNED ,
		A.FERRAMENTA ,
		A.SINTOMA ,
		A.INDICE_SATISFACAO ,
		A.LABEL ,
		A.SPRINT ,
		A.STORY_POINTS ,
		A.SOLICITANTE ,
		A.TIPO_ANALISE ,
		D.DATA_INCLUSAO_NORMALIZADA , 
		B.TEMPO_MEDIO_ABERTO_GC ,
		C.TEMPO_MEDIO_ATENDIMENTO_GC , 
		A.DATA_PRM_CONCLUSAO
FROM VAGAS_DW.TMP_DEMANDAS_EQUIPES AS A	LEFT OUTER JOIN #DIFERENCA_HORAS_UTEIS_TMA_2 AS B ON A.NUMERO_DEMANDA = B.NUMERO_DEMANDA
										LEFT OUTER JOIN #DIFERENCA_HORAS_UTEIS_TMA AS C ON A.NUMERO_DEMANDA = C.NUMERO_DEMANDA
										LEFT OUTER JOIN #TMP_DATA_NORMALIZADA AS D ON A.NUMERO_DEMANDA = D.NUMERO_DEMANDA

-- Ajuste relativo à bug do Jira (falar com Matias)
-- Em 20160711 nós alteramos o processo pois o Mati finalizou o ajuste nas demandas "canceladas"
--UPDATE VAGAS_DW.DEMANDAS_EQUIPES SET STATUS_DEMANDA = 'Done'
--FROM VAGAS_DW.DEMANDAS_EQUIPES 
--WHERE STATUS_DEMANDA = 'Cancelada'

-- Ajuste relativo à normatização das equipes
UPDATE VAGAS_DW.DEMANDAS_EQUIPES SET EQUIPE_SOLICITANTE = B.CATEGORIA_NOVO + ' ' + B.NOME_NOVO
FROM VAGAS_DW.DEMANDAS_EQUIPES A
INNER JOIN VAGAS_DW.TMP_DE_PARA_EQUIPES B ON B.CATEGORIA_ANTERIOR + ' ' + B.NOME_ANTERIOR = A.EQUIPE_SOLICITANTE

-- Calcular média de entregas da equipe Inteligência de Negócios
EXEC VAGAS_DW.SPR_OLAP_Calculo_Media_Demandas_Inteligencia_Negocios



-- Inclusão do campo MERCADO para recordset de Soluções Personalizadas:
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		MERCADO = (SELECT	UPPER(IIF(ISNULL(A1.MERCADO, '') = '', 'EM BRANCO', A1.MERCADO)) AS MERCADO
				   FROM		[VAGAS_DW].[CLIENTES] AS A1
				   WHERE	REPLACE(LTRIM(RTRIM(A.CLIENTE)), CHAR(9), '') = LTRIM(RTRIM(A1.CLIENTE_VAGAS))
							AND	A1.CLIENTE_VAGAS IS NOT NULL
							AND LEFT(A1.CONTA_ID, 6) != 'No_opp')
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.EQUIPE_PROJETO = 'Soluções Personalizadas'
		AND ISNULL(A.CLIENTE, '') != '' ;

-- Atualização dos registros com MERCADO NULL para Soluções Personalizadas
UPDATE	[VAGAS_DW].[DEMANDAS_EQUIPES]
SET		MERCADO = 'EM BRANCO'
FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A
WHERE	A.MERCADO IS NULL
		AND A.EQUIPE_PROJETO = 'Soluções Personalizadas' ;