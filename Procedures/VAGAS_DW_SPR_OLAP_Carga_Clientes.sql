-- EXEC VAGAS_DW.SPR_OLAP_Carga_Clientes
USE VAGAS_DW
GO

IF EXISTS ( SELECT * FROM SYS.OBJECTS WHERE NAME = 'SPR_OLAP_Carga_Clientes' AND SCHEMA_NAME(SCHEMA_ID) = 'VAGAS_DW')
DROP PROCEDURE VAGAS_DW.SPR_OLAP_Carga_Clientes
GO

-- =============================================
-- Author: Luiz Fernando Braz
-- Create date: 29/09/2015
-- Description: Procedure para alimentação do DW

-- 06/07/2016 - Adicionado campo "FLAG_POSSUI_CONTRATO" [solicitação equipe contratos] 
-- 27/07/2016 - Adicionado os campos do CNAE "CNAE_SECAO_ID", "CNAE_SECAO", "CNAE_DIVISAO_ID", "CNAE_DIVISAO", "CNAE_CLASSE_ID", "CNAE_CLASSE", "CNAE_FAIXA_FUNCIONARIOS" [solicitação Paula Oliveira Consultora]
-- 05/08/2016 - Adicionado o campo "SEGMENTO_COMERC" [solicitação equipe comercial]
-- 15/08/2016 - Adicionado campo "CNPJ" [solicitação Wesley (Financeiro)]
-- 03/11/2016 - Adicionado os campos do CNAE "CNAE_SUBCLASSE_ID_C" e "CNAE_SUBCLASSE_DESCR_C".
-- =============================================
CREATE PROCEDURE VAGAS_DW.SPR_OLAP_Carga_Clientes

AS
SET NOCOUNT ON

-- MARCAR EX_CLIENTES (MARCADOS COMO FIRST [FLEXC] NO MANUT) QUE ESTEJAM MARCADOS COMO "EX_CLIENTES" NO CRM
UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 1
FROM VAGAS_DW.TMP_CLIENTES A
WHERE EXISTS ( SELECT * 
		       FROM VAGAS_DW.VAGAS_DW.OPORTUNIDADES 
		       WHERE ( ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS 
		       AND ( CATEGORIA = 'ex_cliente' OR TIPO_CONTA = 'ex_cliente' ) ) ) 
AND ( NOT EXISTS  ( SELECT * 
  				    FROM VAGAS_DW.VAGAS_DW.OPORTUNIDADES 
					WHERE ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS 
 				    AND CATEGORIA <> 'ex_cliente' 
					AND TIPO_CONTA <> 'ex_cliente'
					AND RECORRENTE = 1 )
	) 		

-- MARCAR COMO EX_CLIENTES AQUELES QUE NÃO CONSTAM COM OPORTUNIDADES (FECHADAS E GANHAS) NO CRM
UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 1
FROM VAGAS_DW.TMP_CLIENTES A
WHERE NOT EXISTS ( SELECT 1 
		  		 FROM VAGAS_DW.VAGAS_DW.OPORTUNIDADES 
		         WHERE ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS 
				 AND FASE = 'fechado_e_ganho' )
AND A.TIPO_CLIENTE_MANUT <> 'Créditos VAGAS'

-- MARCAR CLIENTES COMO ATIVOS
UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 0 
WHERE EX_CLIENTE IS NULL

-- MARCAR CLIENTES COM PRODUTO FIT ATIVO
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_FIT = 1,
								 VALOR_FIT = B.ValorProdutoFINAL,
								 CLIENTE_CRM = B.CONTA,
								 CONTA_ID = B.CONTAID,
								 GR = B.CONTAPROPRIETARIO,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO, 
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 SEGMENTO_COMERC = B.SEGMENTO_COMERC,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
				FROM VAGAS_DW.OPORTUNIDADES
			   WHERE ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS
			   AND PRODUTO_GRUPO = 'FIT'
			   AND FASE = 'fechado_e_ganho'
			   ORDER BY DataFechamento DESC ) B
WHERE B.OPORTUNIDADECATEGORIA <> 'rescisao'
AND A.EX_CLIENTE = 0

-- MARCAR EX CLIENTES QUE TINHAM PRODUTO FIT
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_FIT = 1,
								 VALOR_FIT = B.ValorProdutoFINAL,
								 CLIENTE_CRM = B.CONTA,
								 CONTA_ID = B.CONTAID,
								 GR = B.CONTAPROPRIETARIO,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO, 
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 SEGMENTO_COMERC = B.SEGMENTO_COMERC,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
				FROM VAGAS_DW.OPORTUNIDADES
			   WHERE ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS
			   AND PRODUTO_GRUPO = 'FIT'
			   AND FASE = 'fechado_e_ganho'
			   AND OPORTUNIDADECATEGORIA <> 'rescisao'
			   ORDER BY DataFechamento DESC ) B
WHERE A.EX_CLIENTE = 1

-- MARCAR CLIENTES COM PRODUTO REDES ATIVO
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_REDES = 1,
								 VALOR_REDES = B.ValorProdutoFINAL,
								 CONTA_ID = B.CONTAID,
								 GR = B.CONTAPROPRIETARIO,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS, 
								 SEGMENTO_COMERC = B.SEGMENTO_COMERC,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
			  FROM VAGAS_DW.OPORTUNIDADES
			  WHERE ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS
			  AND PRODUTO_GRUPO = 'VREDES'
			  AND FASE = 'fechado_e_ganho'
			  AND RECORRENTE = 1
			  ORDER BY DataFechamento DESC ) B
WHERE B.OPORTUNIDADECATEGORIA <> 'rescisao'
AND A.EX_CLIENTE =  0 

-- MARCAR CLIENTES COM PRODUTO SMS "RECORRENTE" ATIVO
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_SMS = 1,
								 VALOR_SMS = B.ValorProdutoFINAL,
								 CONTA_ID = B.CONTAID,
								 GR = B.CONTAPROPRIETARIO,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 SEGMENTO_COMERC = B.SEGMENTO_COMERC,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
				FROM VAGAS_DW.OPORTUNIDADES
			   WHERE ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS
			   AND PRODUTO = 'SMS'
			   AND FASE = 'fechado_e_ganho'
			   AND RECORRENTE = 1
			   ORDER BY DataFechamento DESC ) B
WHERE B.OPORTUNIDADECATEGORIA <> 'rescisao'
AND A.EX_CLIENTE =  0 

-- MARCAR CLIENTES COM PRODUTO VET ATIVO
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_VET = 1,
								 VALOR_VET = B.ValorProdutoFINAL,
								 CONTA_ID = B.CONTAID,
								 GR = B.CONTAPROPRIETARIO,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 SEGMENTO_COMERC = B.SEGMENTO_COMERC,
								 CNPJ = B.CNPJ

FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT CONTAID,CONTAPROPRIETARIO,NEGOCIO,CONTA,PERFIL,SUM(ValorProdutoFINAL) AS ValorProdutoFINAL 
					,CNAE_SECAO_ID,CNAE_SECAO,CNAE_DIVISAO_ID,CNAE_DIVISAO,CNAE_CLASSE_ID,CNAE_CLASSE,CNAE_FAIXA_FUNCIONARIOS,SEGMENTO_COMERC,CNPJ
			  FROM VAGAS_DW.OPORTUNIDADES 
			  WHERE ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS
			  AND PRODUTO_GRUPO = 'VET'
			  AND FASE = 'fechado_e_ganho'
			  AND OPORTUNIDADECATEGORIA <> 'rescisao'
			  AND RECORRENTE = 1
			  AND DATAFECHAMENTO = ( SELECT MAX(DATAFECHAMENTO) 
				 				     FROM VAGAS_DW.OPORTUNIDADES 
									 WHERE ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS
									 AND PRODUTO_GRUPO = 'VET'
									 AND FASE = 'fechado_e_ganho'
									 AND RECORRENTE = 1 )
			 GROUP BY CONTAID,CONTAPROPRIETARIO,NEGOCIO,CONTA,PERFIL,CNAE_SECAO_ID,CNAE_SECAO,CNAE_DIVISAO_ID,CNAE_DIVISAO,CNAE_CLASSE_ID,CNAE_CLASSE,CNAE_FAIXA_FUNCIONARIOS,SEGMENTO_COMERC,CNPJ
			    ) B
WHERE A.EX_CLIENTE =  0 


-- MARCAR CLIENTES COM PRODUTO PET ATIVO
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_PET = 1,
								 VALOR_PET = B.ValorProdutoFINAL,
								 CONTA_ID = B.CONTAID,
								 GR = B.CONTAPROPRIETARIO,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 SEGMENTO_COMERC = B.SEGMENTO_COMERC,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT CONTAID,CONTAPROPRIETARIO,NEGOCIO,CONTA,PERFIL,SUM(ValorProdutoFINAL) AS ValorProdutoFINAL 
					,CNAE_SECAO_ID,CNAE_SECAO,CNAE_DIVISAO_ID,CNAE_DIVISAO,CNAE_CLASSE_ID,CNAE_CLASSE,CNAE_FAIXA_FUNCIONARIOS,SEGMENTO_COMERC,CNPJ
			  FROM VAGAS_DW.OPORTUNIDADES 
			  WHERE ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS
			  AND PRODUTO = 'PET'
			  AND FASE = 'fechado_e_ganho'
			  AND OPORTUNIDADECATEGORIA <> 'rescisao'
			  AND RECORRENTE = 1
			  AND DATAFECHAMENTO = ( SELECT MAX(DATAFECHAMENTO) 
				 				     FROM VAGAS_DW.OPORTUNIDADES 
									 WHERE ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS
									 AND PRODUTO = 'PET'
									 AND FASE = 'fechado_e_ganho'
									 AND RECORRENTE = 1 )
			 GROUP BY CONTAID,CONTAPROPRIETARIO,CONTA,PERFIL,NEGOCIO,CNAE_SECAO_ID,CNAE_SECAO,CNAE_DIVISAO_ID,CNAE_DIVISAO,CNAE_CLASSE_ID,CNAE_CLASSE,CNAE_FAIXA_FUNCIONARIOS,SEGMENTO_COMERC,CNPJ
			    ) B
WHERE A.EX_CLIENTE =  0 


-- ATUALIZAR VAGAS PUBLICADAS
UPDATE VAGAS_DW.TMP_CLIENTES SET QTD_VAGAS_PUBLICADAS = TAB.QTD_VAGAS_PUBLICADAS
FROM VAGAS_DW.TMP_CLIENTES A
OUTER APPLY ( SELECT COUNT(*) AS QTD_VAGAS_PUBLICADAS
				FROM VAGAS_DW.VAGAS
				WHERE COD_CLI = A.COD_CLI) TAB

-- MARCAR CLIENTES COM PRODUTO FLEXC
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_FLEX_C = 1,
								 VALOR_FLEX_C = B.ValorProdutoFINAL,
								 CONTA_ID = B.CONTAID,
								 GR = B.CONTAPROPRIETARIO,
								 QTD_CREDITOS_DISPONIVEL = QTD_CREDITOS_TOTAL - QTD_VAGAS_PUBLICADAS,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 SEGMENTO_COMERC = B.SEGMENTO_COMERC ,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
				FROM VAGAS_DW.OPORTUNIDADES
			   WHERE ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS
			   AND PRODUTO = 'FLEXC'
			   AND FASE = 'fechado_e_ganho'
			   AND OPORTUNIDADECATEGORIA <> 'rescisao'
			   ORDER BY DataFechamento DESC ) B
WHERE A.EX_CLIENTE =  0 
AND A.TIPO_CLIENTE_MANUT = 'FLEXC'

-- MARCAR CLIENTES COM PRODUTO FLEXA
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_FLEX_A = 1,
								 VALOR_FLEX_A = B.ValorProdutoFINAL,
								 CONTA_ID = B.CONTAID,
								 GR = B.CONTAPROPRIETARIO,
								 QTD_CREDITOS_DISPONIVEL = QTD_CREDITOS_TOTAL - QTD_VAGAS_PUBLICADAS,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS, 
								 SEGMENTO_COMERC = B.SEGMENTO_COMERC,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
				FROM VAGAS_DW.OPORTUNIDADES
			   WHERE ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS
			   AND PRODUTO = 'FLEXA'
			   AND OPORTUNIDADECATEGORIA <> 'rescisao'
			   AND FASE = 'fechado_e_ganho'
			   ORDER BY DataFechamento DESC ) B
WHERE A.EX_CLIENTE =  0 
AND A.TIPO_CLIENTE_MANUT = 'FLEXA'

-- MARCAR CLIENTES COM PRODUTO Créditos VAGAS (os valores de créditos disp e total já são calculados no MANUT)
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_CREDITOS_VAGAS = 1,
								 GR = B.CONTAPROPRIETARIO,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO ,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 SEGMENTO_COMERC = B.SEGMENTO_COMERC,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
OUTER APPLY ( SELECT TOP 1 * 
			  FROM VAGAS_DW.OPORTUNIDADES
			  WHERE CONTAID = A.CONTA_ID
			  AND FASE = 'fechado_e_ganho'
			  AND PRODUTO = 'CRED.VAGAS'
			  ORDER BY DataFechamento DESC ) B			  
WHERE A.TIPO_CLIENTE_MANUT = 'Créditos VAGAS'

-- ATUALIZAR PRC
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_PRC = 1,
								 VALOR_PRC = B.ValorProdutoFINAL,
								 CONTA_ID = B.CONTAID,
								 GR = B.CONTAPROPRIETARIO,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 SEGMENTO_COMERC = B.SEGMENTO_COMERC,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
			  FROM VAGAS_DW.OPORTUNIDADES
			  WHERE ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS
			  AND PRODUTO = 'PRC'
			  AND FASE = 'fechado_e_ganho'
			  ORDER BY DataFechamento DESC ) B
WHERE B.OPORTUNIDADECATEGORIA <> 'rescisao'
AND A.EX_CLIENTE = 0 

-- ATUALIZAR O VALOR TOTAL DA MENSALIDADE INCLUINDO TODOS OS PRODUTOS COM RECORRENCIA
-- Atualizar "TIPO_CLIENTE"
UPDATE VAGAS_DW.TMP_CLIENTES SET VALOR_MENSALIDADE = ISNULL(VALOR_FIT,0) + ISNULL(VALOR_REDES,0) 
												   + ISNULL(VALOR_PRC,0) + ISNULL(VALOR_SMS,0)
												   + ISNULL(VALOR_PET,0) + ISNULL(VALOR_VET,0), 
								 TIPO_CLIENTE = CASE WHEN CONTEM_FIT = 1 THEN 'FIT' ELSE '' END
											  + CASE WHEN CONTEM_REDES = 1 THEN ' | REDES' ELSE '' END
											  + CASE WHEN CONTEM_PRC = 1 THEN ' | PRC' ELSE '' END
											  + CASE WHEN CONTEM_SMS = 1 THEN ' | SMS' ELSE '' END
											  + CASE WHEN CONTEM_PET = 1 THEN ' | PET' ELSE '' END
											  + CASE WHEN CONTEM_VET = 1 THEN ' | VET' ELSE '' END
											  + CASE WHEN CONTEM_FLEX_C = 1 THEN 'FLEX_C' ELSE '' END
											  + CASE WHEN CONTEM_FLEX_A = 1 THEN 'FLEX_A' ELSE '' END
											  + CASE WHEN CONTEM_CREDITOS_VAGAS = 1 THEN 'Créditos VAGAS' ELSE '' END
FROM VAGAS_DW.TMP_CLIENTES A
WHERE A.EX_CLIENTE = 0 

-- ATUALIZAR ULT. GR E CONTA_ID
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTA_ID = B.CONTAID,
								 GR = B.CONTAPROPRIETARIO,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 SEGMENTO_COMERC = B.SEGMENTO_COMERC,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * FROM VAGAS_DW.OPORTUNIDADES
			  WHERE ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS
			  AND GRUPO_VENDEDOR IS NOT NULL
			  AND GRUPO_VENDEDOR NOT IN ('pub','admin')
			  AND FASE = 'fechado_e_ganho'
			  ORDER BY DataFechamento DESC ) B
WHERE (CONTA_ID IS NULL OR GR IS NULL) 
AND A.EX_CLIENTE = 0

-- ATUALIZAR DADOS DE CONTRATO 
UPDATE VAGAS_DW.TMP_CLIENTES SET DATA_CONTRATO_CRM = B.FIM_VIGENCIA,
								 FLAG_CONTRATO_VIGENTE = CASE WHEN B.FIM_VIGENCIA >= GETDATE() THEN 1 ELSE 0 END
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 *
			  FROM VAGAS_DW.CONTRATOS
			  WHERE CONTA_ID = A.CONTA_ID 
			  AND STATUS IN ('novo','ativado_sem_contrato_fisico','ativado')
			  AND ( CONTEM_FIT = 1 OR CONTEM_REDES = 1 OR CONTEM_FLEX = 1 OR CONTEM_PRC = 1 )
			  ORDER BY FIM_VIGENCIA DESC ) B
WHERE A.EX_CLIENTE = 0

-- Marcar clientes com rescisão
UPDATE VAGAS_DW.TMP_CLIENTES SET DATA_RESCISAO = DATAFECHAMENTO,
								 TIPO_CLIENTE_MANUT = 'FIRST'
FROM VAGAS_DW.TMP_CLIENTES A
OUTER APPLY ( SELECT TOP 1 * FROM VAGAS_DW.OPORTUNIDADES
				WHERE CONTAID = A.CONTA_ID 
				AND OPORTUNIDADECATEGORIA = 'rescisao' 
				AND PRODUTO_GRUPO IN ('VREDES','FIT','FLEX','PRC','VET','PET')
				AND RECORRENTE = 1
				AND FASE = 'fechado_e_ganho' ) TAB -- Filtrar Ex Clientes
WHERE A.EX_CLIENTE = 1

-- atualizar clientes com rescisão que estão erroneamente marcados como "ativos"
UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 1,
								 TIPO_CLIENTE_MANUT = 'FIRST',
								 DATA_RESCISAO = B.DATAFECHAMENTO
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
			  FROM VAGAS_DW.OPORTUNIDADES
			  WHERE CONTAID = A.CONTA_ID 
			  AND OPORTUNIDADECATEGORIA = 'rescisao' 
			  AND PRODUTO_GRUPO IN ('VREDES','FIT','FLEX','PRC','VET','PET')
			  AND FASE = 'fechado_e_ganho'
			  ORDER BY DATAFECHAMENTO DESC ) B
WHERE A.CONTEM_FIT IS NULL 
AND A.CONTEM_REDES IS NULL 
AND A.CONTEM_FLEX_A IS NULL
AND A.CONTEM_FLEX_C IS NULL 
AND A.CONTEM_CREDITOS_VAGAS IS NULL 
AND A.EX_CLIENTE = 0

-- atualizar clientes FLEXA e FLEXC que estejam ativos (com vagas publicadas nos ult. 6 meses) 
UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 0,
								 TIPO_CLIENTE = 'FLEX_C' ,
								 CONTEM_FLEX_C = 1
FROM VAGAS_DW.TMP_CLIENTES A
WHERE TIPO_CLIENTE_MANUT = 'FLEXC' 
AND TIPO_CLIENTE = ''
AND ISNULL(CONTEM_FLEX_C,0) = 0 
AND ( QTD_CREDITOS_DISPONIVEL > 0 OR QTD_VAGAS_ULT_6_MESES > 0 )

UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 0,
								 TIPO_CLIENTE = 'FLEX_A' ,
								 CONTEM_FLEX_A = 1
FROM VAGAS_DW.TMP_CLIENTES A
WHERE TIPO_CLIENTE_MANUT = 'FLEXA' 
AND TIPO_CLIENTE = ''
AND ISNULL(CONTEM_FLEX_A,0) = 0 
AND ( QTD_CREDITOS_DISPONIVEL > 0 OR QTD_VAGAS_ULT_6_MESES > 0 )

-- Ex clientes FLEXA e FLEXC 
UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 1,
								 TIPO_CLIENTE = CASE WHEN TIPO_CLIENTE_MANUT = 'FLEXA' THEN 'FLEX_A' ELSE 'FLEX_C' END,
								 CONTEM_FLEX_C = CASE WHEN TIPO_CLIENTE_MANUT = 'FLEXC' THEN 1 ELSE NULL END,
								 CONTEM_FLEX_A = CASE WHEN TIPO_CLIENTE_MANUT = 'FLEXA' THEN 1 ELSE NULL END
FROM VAGAS_DW.TMP_CLIENTES A
WHERE TIPO_CLIENTE_MANUT IN ('FLEXA','FLEXC')
AND TIPO_CLIENTE = ''
AND A.EX_CLIENTE = 0
AND QTD_CREDITOS_DISPONIVEL = 0 
AND QTD_VAGAS_ULT_6_MESES = 0 

-- atualizar clientes com flexc sem créditos e sem vagas publicadas nos últimos 6 meses
UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 1,
								 TIPO_CLIENTE_MANUT = 'FIRST'
FROM VAGAS_DW.TMP_CLIENTES A
WHERE TIPO_CLIENTE_MANUT = 'FLEXC' 
AND ISNULL(CONTEM_FLEX_C,0) = 0 
AND ISNULL(CONTEM_CREDITOS_VAGAS,0) = 0
AND TIPO_CLIENTE = '' 
AND QTD_CREDITOS_DISPONIVEL < 1
AND QTD_VAGAS_ULT_6_MESES = 0

-- Criar marcação para clientes que estão ativos porém não abriram vagas nos últimos 6 meses
UPDATE VAGAS_DW.TMP_CLIENTES SET FLAG_ATIVO_SEM_VAGAS = 1
FROM VAGAS_DW.TMP_CLIENTES A
WHERE A.QTD_Vagas_ULT_6_Meses = 0 AND A.EX_CLIENTE = 0

-- marcar data da primeira oportunidade no CRM
UPDATE VAGAS_DW.TMP_CLIENTES SET DATA_PRM_OPORTUNIDADE_CRM = B.DATAFECHAMENTO
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
			  FROM VAGAS_DW.OPORTUNIDADES 
			  WHERE CONTAID = A.CONTA_ID
			  AND ( PRODUTO_GRUPO IN ('VREDES','FIT','FLEX','PRC','VET','PET')
					OR PRODUTO IN ('PET','SMS') )
			  AND FASE = 'fechado_e_ganho'
			  AND DATAFECHAMENTO IS NOT NULL
			  ORDER BY DATAFECHAMENTO ASC ) B
WHERE A.EX_CLIENTE = 0

-- MARCAR SE É UM NOVO CLIENTE (QUANDO A DATA DA PRIMEIRA OPORTUNIDADE FOR MENOR QUE 12 MESES)
UPDATE VAGAS_DW.TMP_CLIENTES SET FLAG_CLIENTE_NOVO = 1
FROM VAGAS_DW.TMP_CLIENTES A
WHERE A.EX_CLIENTE = 0 AND DATA_PRM_OPORTUNIDADE_CRM >= DATEADD(MONTH,-12,GETDATE())

-- Atualizar Médias 
UPDATE VAGAS_DW.TMP_CLIENTES SET MEDIA_Vagas_ULT_3_Meses = CONVERT(FLOAT,A.QTD_Vagas_ULT_3_Meses) / 3 ,
								 MEDIA_Vagas_ULT_6_Meses = CONVERT(FLOAT,A.QTD_Vagas_ULT_6_Meses) / 6 ,
								 MEDIA_Vagas_ULT_9_Meses = CONVERT(FLOAT,A.QTD_Vagas_ULT_9_Meses) / 9 ,
								 MEDIA_Vagas_ULT_12_Meses = CONVERT(FLOAT,A.QTD_Vagas_ULT_12_Meses) / 12
FROM VAGAS_DW.TMP_CLIENTES A

-- Atualizar ponderação de Média baseado na diferença de meses do início da vigência para clientes novos (diferença da prm oportunidade e a data atual menor que 12 meses)
UPDATE VAGAS_DW.TMP_CLIENTES SET MEDIA_VAGAS_PONDERADO = CASE WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 12 
																							 THEN CONVERT(FLOAT,QTD_VAGAS_MES_12) / 1
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 11 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11)) / 2
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 10 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																								   CONVERT(FLOAT,QTD_VAGAS_MES_10) ) / 3
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 9 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																								   CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) ) / 4
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 8 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																								   CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) ) / 5
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 7 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																				CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) ) / 6			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 6 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) ) / 7
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 5 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) ) / 8
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 4 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) + CONVERT(FLOAT,QTD_VAGAS_MES_4) ) / 9
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 3 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
													CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) + CONVERT(FLOAT,QTD_VAGAS_MES_4) + CONVERT(FLOAT,QTD_VAGAS_MES_3) ) / 10
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 2 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
										CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) + CONVERT(FLOAT,QTD_VAGAS_MES_4) + CONVERT(FLOAT,QTD_VAGAS_MES_3) + CONVERT(FLOAT,QTD_VAGAS_MES_2) ) / 11
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 1 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
									CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) + CONVERT(FLOAT,QTD_VAGAS_MES_4) + CONVERT(FLOAT,QTD_VAGAS_MES_3) + CONVERT(FLOAT,QTD_VAGAS_MES_2) + CONVERT(FLOAT,QTD_VAGAS_MES_1) ) / 12
			ELSE 0 END 
FROM VAGAS_DW.TMP_CLIENTES
WHERE EX_CLIENTE = 0
AND FLAG_CLIENTE_NOVO = 1

-- No caso dos contratos ANTIGOS consideramos a ponderação igual a média dos 12 meses
UPDATE VAGAS_DW.TMP_CLIENTES SET MEDIA_VAGAS_PONDERADO = MEDIA_Vagas_ULT_12_Meses
FROM VAGAS_DW.TMP_CLIENTES
WHERE EX_CLIENTE = 0
AND ISNULL(FLAG_CLIENTE_NOVO,0) = 0

-- Atualizar projeção de Média baseado na diferença de meses do início da vigência para clientes novos (onde não for renovação) e também dando um peso maior
-- para meses mais recentes
UPDATE VAGAS_DW.TMP_CLIENTES SET MEDIA_Vagas_PROJECAO = CASE WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 12 THEN CONVERT(FLOAT,QTD_VAGAS_MES_12) / PESO_MES_12


			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 11 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11)) / (PESO_MES_12 + PESO_MES_11) 
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 10 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																								   CONVERT(FLOAT,QTD_VAGAS_MES_10) ) / (PESO_MES_12 + PESO_MES_11 + PESO_MES_10)
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 9 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																								   CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) ) / (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 )
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 8 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																								   CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) ) 
																								   / (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 )
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 7 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																				CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) ) 
																				/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 )			
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 6 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) ) 
																/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 + PESO_MES_6 )
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 5 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9 ) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) ) 
																/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 + PESO_MES_6 + PESO_MES_5 )
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 4 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9 ) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) + CONVERT(FLOAT,QTD_VAGAS_MES_4) ) 
																/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 + PESO_MES_6 + PESO_MES_5 + PESO_MES_4 )
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 3 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11 )+
													CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6)  + CONVERT(FLOAT,QTD_VAGAS_MES_5) + CONVERT(FLOAT,QTD_VAGAS_MES_4) + CONVERT(FLOAT,QTD_VAGAS_MES_3) ) 
													/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 + PESO_MES_6 + PESO_MES_5 + PESO_MES_4 + PESO_MES_3 )
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 2 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11 ) +
										CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9 ) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6 ) + CONVERT(FLOAT,QTD_VAGAS_MES_5 ) + CONVERT(FLOAT,QTD_VAGAS_MES_4 ) + CONVERT(FLOAT,QTD_VAGAS_MES_3 ) + CONVERT(FLOAT,QTD_VAGAS_MES_2) ) 
										/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 + PESO_MES_6 + PESO_MES_5 + PESO_MES_4 + PESO_MES_3 + PESO_MES_2 )
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 1 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
									CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8 ) + CONVERT(FLOAT,QTD_VAGAS_MES_7 ) + CONVERT(FLOAT,QTD_VAGAS_MES_6 ) + CONVERT(FLOAT,QTD_VAGAS_MES_5 ) + CONVERT(FLOAT,QTD_VAGAS_MES_4 ) + CONVERT(FLOAT,QTD_VAGAS_MES_3 ) + CONVERT(FLOAT,QTD_VAGAS_MES_2 ) + CONVERT(FLOAT,QTD_VAGAS_MES_1 ) ) 
									/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 + PESO_MES_6 + PESO_MES_5 + PESO_MES_4 + PESO_MES_3 + PESO_MES_2 + PESO_MES_1 )
			ELSE 0 END
FROM VAGAS_DW.TMP_CLIENTES A
FULL OUTER JOIN VAGAS_DW.PESOS_LINHA_TEMPO B ON 1 = 1 -- TABELA DE PESOS (POSSUI APENAS UMA LINHA COM A DISTR. DE PESOS MES A MES)
WHERE A.EX_CLIENTE = 0
AND FLAG_CLIENTE_NOVO = 1

-- No caso dos contratos ANTIGOS consideramos a PROJEÇÃO considerando sempre 12 meses
UPDATE VAGAS_DW.TMP_CLIENTES SET MEDIA_VAGAS_PROJECAO = (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) + CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) + CONVERT(FLOAT,QTD_VAGAS_MES_4) + CONVERT(FLOAT,QTD_VAGAS_MES_3) + CONVERT(FLOAT,QTD_VAGAS_MES_2) + CONVERT(FLOAT,QTD_VAGAS_MES_1 )) 
									/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 + PESO_MES_6 + PESO_MES_5 + PESO_MES_4 + PESO_MES_3 + PESO_MES_2 + PESO_MES_1 )
FROM VAGAS_DW.TMP_CLIENTES A
FULL OUTER JOIN VAGAS_DW.PESOS_LINHA_TEMPO B ON 1 = 1 -- TABELA DE PESOS (POSSUI APENAS UMA LINHA COM A DISTR. DE PESOS MES A MES)
WHERE A.EX_CLIENTE = 0
AND ISNULL(FLAG_CLIENTE_NOVO,0) = 0

-- Ajustar casos em que a projeção é menor que zero
UPDATE VAGAS_DW.TMP_CLIENTES SET MEDIA_VAGAS_PROJECAO = 1
FROM VAGAS_DW.TMP_CLIENTES A
WHERE A.EX_CLIENTE = 0 AND MEDIA_VAGAS_PROJECAO < 1

-- Atualizar Média Ponderada para ex clientes (aproveitamos e atualizamos outras informações relevantes)
UPDATE VAGAS_DW.TMP_CLIENTES SET MEDIA_VAGAS_PONDERADO = ISNULL(TAB.MEDIA_PONDERADA,0),
							 DATA_PRM_VAGA_PUBLICADA = TAB.DATA_PRM_VAGA_PUBLICADA,
							 DATA_ULT_VAGA_PUBLICADA = TAB.DATA_ULT_VAGA_PUBLICADA
FROM VAGAS_DW.TMP_CLIENTES A
OUTER APPLY ( SELECT  MIN(DATA_PUBLICACAO) AS DATA_PRM_VAGA_PUBLICADA,
					  MAX(DATA_PUBLICACAO) AS DATA_ULT_VAGA_PUBLICADA,
					  COUNT(*) / CASE WHEN DATEDIFF(MONTH,MIN(DATA_PUBLICACAO),MAX(DATA_PUBLICACAO)) = 0 THEN CONVERT(FLOAT,1) 
									  ELSE CONVERT(FLOAT,DATEDIFF(MONTH,MIN(DATA_PUBLICACAO),MAX(DATA_PUBLICACAO))) END AS MEDIA_PONDERADA
				FROM VAGAS_DW.VAGAS
				WHERE COD_CLI = A.COD_CLI
				AND DATA_PUBLICACAO > A.DATA_PRM_OPORTUNIDADE_CRM ) TAB
WHERE A.EX_CLIENTE = 1 


-- Atualizar informações dos que têm contrato vigente (removemos a ponderação sob o últ. contrato)
UPDATE VAGAS_DW.TMP_CLIENTES SET DATA_PRM_VAGA_PUBLICADA = TAB.DATA_PRM_VAGA_PUBLICADA,
							 DATA_ULT_VAGA_PUBLICADA = TAB.DATA_ULT_VAGA_PUBLICADA,
							 QTD_VAGAS_PUBLICADAS = TAB.QTD_VAGAS_PUBLICADAS
FROM VAGAS_DW.TMP_CLIENTES A
OUTER APPLY ( SELECT COUNT(*) AS QTD_VAGAS,
					  MIN(DATA_PUBLICACAO) AS DATA_PRM_VAGA_PUBLICADA,
					  MAX(DATA_PUBLICACAO) AS DATA_ULT_VAGA_PUBLICADA,
					  COUNT(*) AS QTD_VAGAS_PUBLICADAS
				FROM VAGAS_DW.VAGAS
				WHERE COD_CLI = A.COD_CLI AND DATA_PUBLICACAO < DATEADD(YEAR,1,GETDATE()) ) TAB
WHERE A.EX_CLIENTE = 0

-- Atualizar dados do ERP
UPDATE VAGAS_DW.TMP_CLIENTES SET DIAS_ATRASO_ULT_FATURA = B.DIAS_ATRASO,
								 VALOR_ULT_FATURA = B.VALOR,
								 DATA_ULT_FATURA = B.DATA_VENCIMENTO_ORIGINAL,
								 FLAG_PAGO = B.FLAG_PAGO
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
			  FROM VAGAS_DW.FATURAS
			  WHERE COD_CLI_CRM = A.CONTA_ID
			  AND TIPO_ORIGEM = 'NF'
			  AND DATA_REFERENCIA = ( SELECT MAX(DATA_REFERENCIA) 
									  FROM VAGAS_DW.FATURAS )
			  AND DATA_VENCIMENTO_REAL_ORIGINAL <= GETDATE() -- ÚLT. FATURA VENCIDA
			  ORDER BY DATA_VENCIMENTO_REAL_ORIGINAL DESC
			) B	
WHERE A.EX_CLIENTE = 0

UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_CUSTOMIZACAO = null, QTD_CUSTOMIZACAO = null, VALOR_TOTAL_CUSTOMIZACAO = null, DATA_ULT_CUSTOMIZACAO = null
WHERE EX_CLIENTE = 0

UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_CUSTOMIZACAO = 1,
								 QTD_CUSTOMIZACAO = B.QTD,
								 VALOR_TOTAL_CUSTOMIZACAO = B.VALOR,
								 DATA_ULT_CUSTOMIZACAO = B.DATA_ULT_OPORTUNIDADE
FROM VAGAS_DW.TMP_CLIENTES A	
CROSS APPLY ( SELECT COUNT(*) AS QTD, 
					 SUM(ValorProdutoFINAL) AS Valor,
					 MAX(DATAFECHAMENTO) AS DATA_ULT_OPORTUNIDADE
			  FROM VAGAS_DW.OPORTUNIDADES
			  WHERE CONTAID = A.CONTA_ID
			  AND PRODUTO_GRUPO = 'DSM'
			  AND FASE = 'fechado_e_ganho' 
			  ) B		  
WHERE A.EX_CLIENTE = 0
AND B.QTD > 0

-- AJUSTES FINAIS NOS CAMPOS QUE FICARAM COMO "NULL"
-- ATUALIZAR TAMANHO_MENSALIDADE (DE ACORDO COM CLASSIFICAÇÃO CRIADA PELO COMERCIAL)
UPDATE VAGAS_DW.TMP_CLIENTES SET FLAG_CLIENTE_NOVO = CASE WHEN FLAG_CLIENTE_NOVO IS NULL THEN 0 ELSE 1 END,
								 FLAG_ATIVO_SEM_VAGAS = CASE WHEN FLAG_ATIVO_SEM_VAGAS IS NULL THEN 0 ELSE 1 END,
								 CONTEM_FIT = CASE WHEN CONTEM_FIT IS NULL THEN 0 ELSE 1 END,
								 CONTEM_FLEX_C = CASE WHEN CONTEM_FLEX_C IS NULL THEN 0 ELSE 1 END,
								 CONTEM_FLEX_A = CASE WHEN CONTEM_FLEX_A IS NULL THEN 0 ELSE 1 END,
								 CONTEM_REDES = CASE WHEN CONTEM_REDES IS NULL THEN 0 ELSE 1 END,
								 CONTEM_CREDITOS_VAGAS = CASE WHEN CONTEM_CREDITOS_VAGAS IS NULL THEN 0 ELSE 1 END,
								 CONTEM_PRC = CASE WHEN CONTEM_PRC IS NULL THEN 0 ELSE 1 END,
								 CONTEM_VET = CASE WHEN CONTEM_VET IS NULL THEN 0 ELSE 1 END,
								 CONTEM_PET = CASE WHEN CONTEM_PET IS NULL THEN 0 ELSE 1 END,
								 CONTEM_SMS = CASE WHEN CONTEM_SMS IS NULL THEN 0 ELSE 1 END,
								 TAMANHO_MENSALIDADE = CASE WHEN ISNULL(VALOR_MENSALIDADE,0) < 1000 THEN 'P' 
															WHEN ISNULL(VALOR_MENSALIDADE,0) >= 1000 AND ISNULL(VALOR_MENSALIDADE,0) < 4000 THEN 'M' 
															WHEN ISNULL(VALOR_MENSALIDADE,0) >= 4000 THEN 'G' END
FROM VAGAS_DW.TMP_CLIENTES A

-- Limpar dados da tabela fato
DECLARE @DT_REFERENCIA_INICIO SMALLDATETIME,
		@DT_REFERENCIA_FIM SMALLDATETIME

SELECT @DT_REFERENCIA_INICIO = MIN(DATA_REFERENCIA),
	   @DT_REFERENCIA_FIM = MAX(DATA_REFERENCIA)
FROM VAGAS_DW.TMP_CLIENTES

DELETE VAGAS_DW.CLIENTES
FROM VAGAS_DW.CLIENTES A
WHERE DATA_REFERENCIA >= @DT_REFERENCIA_INICIO
AND DATA_REFERENCIA < DATEADD(DAY,1,@DT_REFERENCIA_FIM)

-- Carregar Tabela Fato
INSERT INTO VAGAS_DW.CLIENTES
SELECT * FROM VAGAS_DW.TMP_CLIENTES

-- expurgar datas de referencia antigas (deixar apenas a últ. de cada mes)
DELETE VAGAS_DW.CLIENTES 
FROM VAGAS_DW.CLIENTES A
WHERE DATA_REFERENCIA <> ( SELECT MAX(DATA_REFERENCIA)
						  FROM VAGAS_DW.CLIENTES
						  WHERE YEAR(DATA_REFERENCIA) = YEAR(A.DATA_REFERENCIA)
						  AND MONTH(DATA_REFERENCIA) = MONTH(A.DATA_REFERENCIA) )

-- Atualizar extrações BCC
-- Contratos vigentes
SELECT A.COD_CLI,'12_MESES' AS TIPO_BCC,SUM(QTD_CVS) AS QTD_CVS
INTO #TMP_EXTRACOES_BCC
FROM VAGAS_DW.EXTRACOES_BCC A
INNER JOIN VAGAS_DW.CLIENTES B ON B.COD_CLI = A.COD_CLI
WHERE A.DT_PEDIDO >= DATEADD(MONTH,-12,GETDATE()) -- renovações pegamos extrações nos últimos 12 meses
AND B.EX_CLIENTE = 0
GROUP BY A.COD_CLI

UNION ALL

-- Contratos cancelados
SELECT A.COD_CLI,'12_MESES' AS TIPO_BCC,SUM(QTD_CVS) AS QTD_CVS
FROM VAGAS_DW.EXTRACOES_BCC A
INNER JOIN VAGAS_DW.CLIENTES B ON B.COD_CLI = A.COD_CLI
WHERE B.EX_CLIENTE = 1
GROUP BY A.COD_CLI

UNION ALL

SELECT A.COD_CLI,'6_MESES' AS TIPO_BCC,SUM(QTD_CVS) AS QTD_CVS
FROM VAGAS_DW.EXTRACOES_BCC A
INNER JOIN VAGAS_DW.CLIENTES B ON B.COD_CLI = A.COD_CLI
WHERE A.DT_PEDIDO >= DATEADD(MONTH,-6,GETDATE()) -- renovações pegamos extrações nos últimos 12 meses
AND B.EX_CLIENTE = 0
GROUP BY A.COD_CLI


UNION ALL

SELECT A.COD_CLI,'3_MESES' AS TIPO_BCC,SUM(QTD_CVS) AS QTD_CVS
FROM VAGAS_DW.EXTRACOES_BCC A
INNER JOIN VAGAS_DW.CLIENTES B ON B.COD_CLI = A.COD_CLI
WHERE A.DT_PEDIDO >= DATEADD(MONTH,-3,GETDATE()) -- renovações pegamos extrações nos últimos 12 meses
AND B.EX_CLIENTE = 0
GROUP BY A.COD_CLI

UPDATE VAGAS_DW.CLIENTES SET QTD_EXTRACOES_BCC = ISNULL(B.QTD_CVS,0),
							 CREDITO_BCC = ISNULL(B.QTD_CVS,0) / 20
FROM VAGAS_DW.CLIENTES A
LEFT OUTER JOIN #TMP_EXTRACOES_BCC B ON B.COD_CLI = A.COD_CLI
WHERE B.TIPO_BCC = '12_MESES'

UPDATE VAGAS_DW.CLIENTES SET QTD_EXTRACOES_BCC_6_MESES = ISNULL(B.QTD_CVS,0)
FROM VAGAS_DW.CLIENTES A
LEFT OUTER JOIN #TMP_EXTRACOES_BCC B ON B.COD_CLI = A.COD_CLI
WHERE B.TIPO_BCC = '6_MESES'

UPDATE VAGAS_DW.CLIENTES SET QTD_EXTRACOES_BCC_3_MESES = ISNULL(B.QTD_CVS,0)
FROM VAGAS_DW.CLIENTES A
LEFT OUTER JOIN #TMP_EXTRACOES_BCC B ON B.COD_CLI = A.COD_CLI
WHERE B.TIPO_BCC = '3_MESES'
AND A.DATA_REFERENCIA = ( SELECT MAX(DATA_REFERENCIA) FROM VAGAS_DW.CLIENTES )

-- Atualizar se o cliente possui "algum" contrato cadastrado 
UPDATE VAGAS_DW.CLIENTES SET FLAG_POSSUI_CONTRATO = 0
FROM VAGAS_DW.CLIENTES A
WHERE A.DATA_REFERENCIA = ( SELECT MAX(DATA_REFERENCIA) FROM VAGAS_DW.CLIENTES )
AND A.EX_CLIENTE = 0
AND ( A.CONTEM_FIT = 1 OR A.CONTEM_REDES = 1 )
AND NOT EXISTS ( SELECT * FROM VAGAS_DW.CONTRATOS
				 WHERE CONTA_ID = A.CONTA_ID )

UPDATE VAGAS_DW.CLIENTES SET FLAG_POSSUI_CONTRATO = 1
FROM VAGAS_DW.CLIENTES A
WHERE A.DATA_REFERENCIA = ( SELECT MAX(DATA_REFERENCIA) FROM VAGAS_DW.CLIENTES )
AND A.EX_CLIENTE = 0
AND ( A.CONTEM_FIT = 1 OR A.CONTEM_REDES = 1 )
AND A.FLAG_POSSUI_CONTRATO IS NULL
