-- EXEC VAGAS_DW.SPR_OLAP_Carga_Clientes
USE VAGAS_DW
GO

IF EXISTS ( SELECT * FROM SYS.OBJECTS WHERE NAME = 'SPR_OLAP_Carga_Clientes' AND SCHEMA_NAME(SCHEMA_ID) = 'VAGAS_DW')
DROP PROCEDURE VAGAS_DW.SPR_OLAP_Carga_Clientes
GO

-- =============================================
-- Author: Luiz Fernando Braz
-- Create date: 29/09/2015
-- Description: Procedure para alimentação do DW

-- 06/07/2016 - Adicionado campo "FLAG_POSSUI_CONTRATO" [solicitação equipe contratos] 
-- 27/07/2016 - Adicionado os campos do CNAE "CNAE_SECAO_ID", "CNAE_SECAO", "CNAE_DIVISAO_ID", "CNAE_DIVISAO", "CNAE_CLASSE_ID", "CNAE_CLASSE", "CNAE_FAIXA_FUNCIONARIOS" [solicitação Paula Oliveira Consultora]
-- 05/08/2016 - Adicionado o campo "SEGMENTO_COMERC" [solicitação equipe comercial]
-- 15/08/2016 - Adicionado campo "CNPJ" [solicitação Wesley (Financeiro)]
-- 03/11/2016 - Adicionado os campos do CNAE "CNAE_SUBCLASSE_ID_C" e "CNAE_SUBCLASSE_DESCR_C".
-- 05/07/2017 - Remoção do campo PosVenda
-- 23/10/2017 - Remoção do campo SEGMENTO_COMERC
-- =============================================
CREATE PROCEDURE VAGAS_DW.SPR_OLAP_Carga_Clientes

AS
SET NOCOUNT ON

DECLARE @DATA_REFERENCIA_AJUSTE SMALLDATETIME,@DATA_REFERENCIA_12_MESES_INICIO_AJUSTE SMALLDATETIME,@DATA_REFERENCIA_12_MESES_FIM_AJUSTE SMALLDATETIME

SELECT TOP 1 @DATA_REFERENCIA_AJUSTE = DATA_REFERENCIA,@DATA_REFERENCIA_12_MESES_INICIO_AJUSTE = DATA_REFERENCIA_12_MESES_INICIO,
			@DATA_REFERENCIA_12_MESES_FIM_AJUSTE = DATA_REFERENCIA_12_MESES_FIM
FROM VAGAS_DW.TMP_CLIENTES

-- INSERIR OPORTUNIDADES DE CLIENTES QUE AINDA NÃO FORAM CADASTRADOS NO MANUT
INSERT INTO VAGAS_DW.TMP_CLIENTES(DATA_REFERENCIA,DATA_REFERENCIA_12_MESES_INICIO,DATA_REFERENCIA_12_MESES_FIM,CLIENTE_VAGAS)
SELECT DISTINCT @DATA_REFERENCIA_AJUSTE,@DATA_REFERENCIA_12_MESES_INICIO_AJUSTE,@DATA_REFERENCIA_12_MESES_FIM_AJUSTE,
			ID_VAGAS AS CLIENTE_VAGAS
FROM VAGAS_DW.OPORTUNIDADES A
WHERE A.PRODUTO_RECORRENTE = 'FIT-NOV'
AND FECHADO_GANHO = 1
AND NOT EXISTS ( SELECT * 
				 FROM VAGAS_DW.TMP_CLIENTES 
				 WHERE CLIENTE_VAGAS = A.ID_VAGAS )

-----------------
-- Contas do CRM:
-----------------
SELECT	CONTA_ID ,
		CONTA_CRM ,	
		ID_VAGAS ,
		A.TIPO ,
		A.CATEGORIA ,
		A.POSSUI_OPORTUNIDADE
INTO	#TMP_CONTAS_CRM 
FROM	[VAGAS_DW].[CONTAS_CRM] AS A
UNION ALL
SELECT	A.CONTA_ID ,
		A.CONTA_CRM ,	
		A.ID_VAGAS ,
		A.TIPO ,
		A.CATEGORIA ,
		A.POSSUI_OPORTUNIDADE
FROM	[VAGAS_DW].[CONTAS_MEMBRO_CRM] AS A ;

-- Contas com o mesmo ID_VAGAS, onde uma das contas está classificada como ex-cliente, e a categoria da(s) outra(s) é diferente de ex-cliente.
SELECT	ID_VAGAS ,
		COUNT(*) AS QTD_CONTAS
INTO	#TMP_CONTAS_NAO_EX_CLIENTE
FROM	#TMP_CONTAS_CRM AS A
WHERE	( A.CATEGORIA IN ('cliente_fit', 'cliente_recrutador', 'cliente_pet', 'cliente_vagas_redes')
		   AND A.TIPO IN ('cliente_fit', 'cliente_recrutador', 'cliente_pet', 'cliente_vagas_redes') )
		AND EXISTS ( SELECT	1
					 FROM	#TMP_CONTAS_CRM AS A1
					 WHERE	A.ID_VAGAS = A1.ID_VAGAS
							AND (A1.CATEGORIA IN ('ex_cliente', 'cliente_em_aviso_previo')
								 OR A1.TIPO IN ('ex_cliente', 'cliente_em_aviso_previo') ) )
		AND ISNULL(A.ID_VAGAS, '') != ''
		AND A.POSSUI_OPORTUNIDADE = 'SIM'
GROUP BY
		ID_VAGAS ;

-- MARCAR EX_CLIENTES (MARCADOS COMO FIRST [FLEXC] NO MANUT) QUE ESTEJAM MARCADOS COMO "EX_CLIENTES" NO CRM
UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 1
FROM VAGAS_DW.TMP_CLIENTES A
OUTER APPLY ( SELECT TOP 1 * 
			  FROM VAGAS_DW.OPORTUNIDADES
			  WHERE ID_VAGAS  = A.CLIENTE_VAGAS 
			  AND FECHADO_GANHO = 1
			  ORDER BY DATAFECHAMENTO DESC ) B
WHERE ( EXISTS ( SELECT * 
		         FROM VAGAS_DW.VAGAS_DW.OPORTUNIDADES 
		         WHERE ( ID_VAGAS  = A.CLIENTE_VAGAS 
		         AND ( CATEGORIA IN ('ex_cliente','cliente_em_aviso_previo') 
					  OR TIPO_CONTA IN ('ex_cliente','cliente_em_aviso_previo') ) ) ) 
		OR B.OPORTUNIDADECATEGORIA = 'rescisao' )
	AND NOT EXISTS (SELECT	1
					FROM	#TMP_CONTAS_NAO_EX_CLIENTE AS A1
					WHERE	A.CLIENTE_VAGAS = A1.ID_VAGAS )

-- MARCAR COMO EX_CLIENTES AQUELES QUE NÃO CONSTAM COM OPORTUNIDADES (FECHADAS E GANHAS) NO CRM
UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 1
FROM VAGAS_DW.TMP_CLIENTES A
WHERE NOT EXISTS ( SELECT 1 
		  		 FROM VAGAS_DW.VAGAS_DW.OPORTUNIDADES 
		         WHERE ID_VAGAS  = A.CLIENTE_VAGAS 
				 AND FECHADO_GANHO = 1
				 )
AND A.TIPO_CLIENTE_MANUT <> 'Créditos VAGAS'

-- MARCAR CLIENTES COMO ATIVOS
UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 0 
WHERE EX_CLIENTE IS NULL
	  AND FONTE = 'MANUT'

-- MARCAR CLIENTES COM PRODUTO FIT ATIVO
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_FIT = 1,
								 VALOR_FIT = B.ValorProdutoFINAL,
								 CLIENTE_CRM = B.CONTA,
								 CONTA_ID = B.CONTAID,
								 --GR = B.CONTAPROPRIETARIO,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO, 
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 CNAE_SUBCLASSE_ID_C = B.CNAE_SUBCLASSE_ID_C,
								 CNAE_SUBCLASSE_DESCR_C = B.CNAE_SUBCLASSE_DESCR_C,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
				FROM VAGAS_DW.OPORTUNIDADES
			   WHERE ID_VAGAS  = A.CLIENTE_VAGAS 					  
			   AND PRODUTO_GRUPO IN ('FIT', 'RECRUTADOR')
			   AND FECHADO_GANHO = 1
			   AND RECORRENTE = 1
			   ORDER BY DataFechamento DESC ) B
WHERE B.OPORTUNIDADECATEGORIA <> 'rescisao'
AND A.EX_CLIENTE = 0

-- MARCAR EX CLIENTES QUE TINHAM PRODUTO FIT
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_FIT = 1,
								 VALOR_FIT = B.ValorProdutoFINAL,
								 CLIENTE_CRM = B.CONTA,
								 CONTA_ID = B.CONTAID,
								 --GR = B.CONTAPROPRIETARIO,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO, 
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 CNAE_SUBCLASSE_ID_C = B.CNAE_SUBCLASSE_ID_C,
								 CNAE_SUBCLASSE_DESCR_C = B.CNAE_SUBCLASSE_DESCR_C,
								 CNPJ = B.CNPJ,
								 DATA_PRM_OPORTUNIDADE_CRM = B.DATAFECHAMENTO
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
				FROM VAGAS_DW.OPORTUNIDADES
			   WHERE ID_VAGAS  = A.CLIENTE_VAGAS 
			   AND PRODUTO_GRUPO IN ('FIT', 'RECRUTADOR')
			   AND FECHADO_GANHO = 1
			   AND OPORTUNIDADECATEGORIA <> 'rescisao'
			   ORDER BY DataFechamento DESC ) B
WHERE A.EX_CLIENTE = 1

-- MARCAR CLIENTES COM PRODUTO REDES ATIVO
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_REDES = 1,
								 VALOR_REDES = B.ValorProdutoFINAL,
								 CONTA_ID = B.CONTAID,
								 --GR = B.CONTAPROPRIETARIO,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS, 
								 CNAE_SUBCLASSE_ID_C = B.CNAE_SUBCLASSE_ID_C,
								 CNAE_SUBCLASSE_DESCR_C = B.CNAE_SUBCLASSE_DESCR_C,
								 CNPJ = B.CNPJ,
								 POSICOES_MES = B.POSICOES_MES,
								 TOTAL_UNIDADES = B.TOTAL_UNIDADES,
								 POSICOES_POR_UNIDADE = B.POSICOES_POR_UNIDADE 
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
			  FROM VAGAS_DW.OPORTUNIDADES
			  WHERE ID_VAGAS  = A.CLIENTE_VAGAS 
			  AND PRODUTO_GRUPO = 'VREDES'
			  AND FECHADO_GANHO = 1
			  AND RECORRENTE = 1
			  ORDER BY DataFechamento DESC ) B
WHERE B.OPORTUNIDADECATEGORIA <> 'rescisao'
AND A.EX_CLIENTE =  0 


-- MARCAR CLIENTES COM PRODUTO REDES INATIVO: Empresas clientes que não possuem o produto VREDES na proposta aprovada.
UPDATE	[VAGAS_DW].[TMP_CLIENTES]
SET		CONTEM_REDES = NULL
FROM	[VAGAS_DW].[TMP_CLIENTES] AS A
WHERE	A.EX_CLIENTE = 0
		AND NOT EXISTS (SELECT	1
						FROM	[VAGAS_DW].[OPORTUNIDADES] AS A1
						WHERE	A.CONTA_ID = A1.CONTAID
								AND A1.PROPOSTA = A1.CONTAPROPOSTAAPROV
								AND A1.PRODUTO = 'VREDES'
								AND A1.FECHADO_GANHO = 1
								AND A1.RECORRENTE = 1)
		AND EXISTS (SELECT	1
					FROM	[VAGAS_DW].[OPORTUNIDADES] AS A1
					WHERE	A.CONTA_ID = A1.CONTAID
							AND A1.PRODUTO = 'VREDES'
							AND A1.FECHADO_GANHO = 1) ;

-- MARCAR CLIENTES COM PRODUTO SMS "RECORRENTE" ATIVO
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_SMS = 1,
								 VALOR_SMS = B.ValorProdutoFINAL,
								 CONTA_ID = B.CONTAID,
								 --GR = B.CONTAPROPRIETARIO,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 CNAE_SUBCLASSE_ID_C = B.CNAE_SUBCLASSE_ID_C,
								 CNAE_SUBCLASSE_DESCR_C = B.CNAE_SUBCLASSE_DESCR_C,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
				FROM VAGAS_DW.OPORTUNIDADES
			   WHERE ID_VAGAS  = A.CLIENTE_VAGAS 
			   AND PRODUTO = 'SMS'
			   AND FECHADO_GANHO = 1
			   AND RECORRENTE = 1
			   ORDER BY DataFechamento DESC ) B
WHERE B.OPORTUNIDADECATEGORIA <> 'rescisao'
AND A.EX_CLIENTE =  0 

-- MARCAR CLIENTES COM PRODUTO VET ATIVO
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_VET = 1,
								 VALOR_VET = B.ValorProdutoFINAL,
								 CONTA_ID = B.CONTAID,
								 --GR = B.CONTAPROPRIETARIO,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 CNAE_SUBCLASSE_ID_C = B.CNAE_SUBCLASSE_ID_C,
								 CNAE_SUBCLASSE_DESCR_C = B.CNAE_SUBCLASSE_DESCR_C,
								 CNPJ = B.CNPJ

FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT CONTAID,CONTAPROPRIETARIO,NEGOCIO,CONTA,PERFIL,SUM(ValorProdutoFINAL) AS ValorProdutoFINAL 
					,CNAE_SECAO_ID,CNAE_SECAO,CNAE_DIVISAO_ID,CNAE_DIVISAO,CNAE_CLASSE_ID,CNAE_CLASSE,CNAE_FAIXA_FUNCIONARIOS,CNAE_SUBCLASSE_ID_C,CNAE_SUBCLASSE_DESCR_C,CNPJ
			  FROM VAGAS_DW.OPORTUNIDADES 
			  WHERE ID_VAGAS  = A.CLIENTE_VAGAS 
			  AND PRODUTO_GRUPO = 'VET'
			  AND FECHADO_GANHO = 1
			  AND OPORTUNIDADECATEGORIA <> 'rescisao'
			  AND RECORRENTE = 1
			  AND DATAFECHAMENTO = ( SELECT MAX(DATAFECHAMENTO) 
				 				     FROM VAGAS_DW.OPORTUNIDADES 
									 WHERE ID_VAGAS  = A.CLIENTE_VAGAS 
									 AND PRODUTO_GRUPO = 'VET'
									 AND FECHADO_GANHO = 1
									 AND RECORRENTE = 1 )
			 GROUP BY CONTAID,CONTAPROPRIETARIO,NEGOCIO,CONTA,PERFIL,CNAE_SECAO_ID,CNAE_SECAO,CNAE_DIVISAO_ID,CNAE_DIVISAO,CNAE_CLASSE_ID,CNAE_CLASSE,CNAE_FAIXA_FUNCIONARIOS,CNAE_SUBCLASSE_ID_C,CNAE_SUBCLASSE_DESCR_C,CNPJ
			    ) B
WHERE A.EX_CLIENTE =  0 


-- MARCAR CLIENTES COM PRODUTO PET ATIVO
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_PET = 1,
								 VALOR_PET = B.ValorProdutoFINAL,
								 CONTA_ID = B.CONTAID,
								 --GR = B.CONTAPROPRIETARIO,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 CNAE_SUBCLASSE_ID_C = B.CNAE_SUBCLASSE_ID_C,
								 CNAE_SUBCLASSE_DESCR_C = B.CNAE_SUBCLASSE_DESCR_C,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT CONTAID,CONTAPROPRIETARIO,NEGOCIO,CONTA,PERFIL,SUM(ValorProdutoFINAL) AS ValorProdutoFINAL 
					,CNAE_SECAO_ID,CNAE_SECAO,CNAE_DIVISAO_ID,CNAE_DIVISAO,CNAE_CLASSE_ID,CNAE_CLASSE,CNAE_FAIXA_FUNCIONARIOS,CNAE_SUBCLASSE_ID_C,CNAE_SUBCLASSE_DESCR_C,CNPJ
			  FROM VAGAS_DW.OPORTUNIDADES 
			  WHERE ID_VAGAS  = A.CLIENTE_VAGAS 
			  AND PRODUTO = 'PET'
			  AND FECHADO_GANHO = 1
			  AND OPORTUNIDADECATEGORIA <> 'rescisao'
			  AND RECORRENTE = 1
			  AND DATAFECHAMENTO = ( SELECT MAX(DATAFECHAMENTO) 
				 				     FROM VAGAS_DW.OPORTUNIDADES 
									 WHERE ID_VAGAS  = A.CLIENTE_VAGAS 
									 AND PRODUTO = 'PET'
									 AND FECHADO_GANHO = 1
									 AND RECORRENTE = 1 )
			 GROUP BY CONTAID,CONTAPROPRIETARIO,CONTA,PERFIL,NEGOCIO,CNAE_SECAO_ID,CNAE_SECAO,CNAE_DIVISAO_ID,CNAE_DIVISAO,CNAE_CLASSE_ID,CNAE_CLASSE,CNAE_FAIXA_FUNCIONARIOS,CNAE_SUBCLASSE_ID_C,CNAE_SUBCLASSE_DESCR_C,CNPJ
			    ) B
WHERE A.EX_CLIENTE =  0 


-- ATUALIZAR VAGAS PUBLICADAS
UPDATE VAGAS_DW.TMP_CLIENTES SET QTD_VAGAS_PUBLICADAS = TAB.QTD_VAGAS_PUBLICADAS
FROM VAGAS_DW.TMP_CLIENTES A
OUTER APPLY ( SELECT COUNT(*) AS QTD_VAGAS_PUBLICADAS
				FROM VAGAS_DW.VAGAS
				WHERE COD_CLI = A.COD_CLI) TAB

-- MARCAR CLIENTES COM PRODUTO FLEXC
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_FLEX_C = 1,
								 VALOR_FLEX_C = B.ValorProdutoFINAL,
								 CONTA_ID = B.CONTAID,
								 --GR = B.CONTAPROPRIETARIO,
								 QTD_CREDITOS_DISPONIVEL = QTD_CREDITOS_TOTAL - QTD_VAGAS_PUBLICADAS,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 CNAE_SUBCLASSE_ID_C = B.CNAE_SUBCLASSE_ID_C,
								 CNAE_SUBCLASSE_DESCR_C = B.CNAE_SUBCLASSE_DESCR_C,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
				FROM VAGAS_DW.OPORTUNIDADES
			   WHERE ID_VAGAS  = A.CLIENTE_VAGAS 
			   AND PRODUTO = 'FLEXC'
			   AND FECHADO_GANHO = 1
			   AND OPORTUNIDADECATEGORIA <> 'rescisao'
			   ORDER BY DataFechamento DESC ) B
WHERE A.EX_CLIENTE =  0 
AND A.TIPO_CLIENTE_MANUT = 'FLEXC'

-- MARCAR CLIENTES COM PRODUTO FLEXA
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_FLEX_A = 1,
								 VALOR_FLEX_A = B.ValorProdutoFINAL,
								 CONTA_ID = B.CONTAID,
								 --GR = B.CONTAPROPRIETARIO,
								 QTD_CREDITOS_DISPONIVEL = QTD_CREDITOS_TOTAL - QTD_VAGAS_PUBLICADAS,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS, 
								 CNAE_SUBCLASSE_ID_C = B.CNAE_SUBCLASSE_ID_C,
								 CNAE_SUBCLASSE_DESCR_C = B.CNAE_SUBCLASSE_DESCR_C,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
				FROM VAGAS_DW.OPORTUNIDADES
			   WHERE ID_VAGAS  = A.CLIENTE_VAGAS 
			   AND PRODUTO = 'FLEXA'
			   AND OPORTUNIDADECATEGORIA <> 'rescisao'
			   AND FECHADO_GANHO = 1
			   ORDER BY DataFechamento DESC ) B
WHERE A.EX_CLIENTE =  0 
AND A.TIPO_CLIENTE_MANUT = 'FLEXA'

-- MARCAR CLIENTES COM PRODUTO Créditos VAGAS (os valores de créditos disp e total já são calculados no MANUT)
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_CREDITOS_VAGAS = 1,
								 --GR = B.CONTAPROPRIETARIO,
								 CLIENTE_CRM = ISNULL(B.CONTA,CLIENTE_CRM),
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO ,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 CNAE_SUBCLASSE_ID_C = B.CNAE_SUBCLASSE_ID_C,
								 CNAE_SUBCLASSE_DESCR_C = B.CNAE_SUBCLASSE_DESCR_C,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
OUTER APPLY ( SELECT TOP 1 * 
			  FROM VAGAS_DW.OPORTUNIDADES
			  WHERE CONTAID = A.CONTA_ID
			  AND FECHADO_GANHO = 1
			  AND PRODUTO = 'CRED.VAGAS'
			  ORDER BY DataFechamento DESC ) B			  
WHERE A.TIPO_CLIENTE_MANUT = 'Créditos VAGAS'

-- ATUALIZAR PRC
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_PRC = 1,
								 VALOR_PRC = B.ValorProdutoFINAL,
								 CONTA_ID = B.CONTAID,
								 --GR = B.CONTAPROPRIETARIO,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 CNAE_SUBCLASSE_ID_C = B.CNAE_SUBCLASSE_ID_C,
								 CNAE_SUBCLASSE_DESCR_C = B.CNAE_SUBCLASSE_DESCR_C,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
			  FROM VAGAS_DW.OPORTUNIDADES
			  WHERE ID_VAGAS  = A.CLIENTE_VAGAS 
			  AND PRODUTO = 'PRC'
			  AND FECHADO_GANHO = 1
			  ORDER BY DataFechamento DESC ) B
WHERE B.OPORTUNIDADECATEGORIA <> 'rescisao'
AND A.EX_CLIENTE = 0 

-- ATUALIZAR O VALOR TOTAL DA MENSALIDADE INCLUINDO TODOS OS PRODUTOS COM RECORRENCIA
-- Atualizar "TIPO_CLIENTE"
-- 19/07/2018 Encontramos algumas inconsistências, e por motivo de necessidade emergencial, a regra anterior foi comentada e substituída pelo "Valor recorrente" na conta do cliente.
----------------------------- REGRA ANTERIOR DE ATUALIZAÇÃO DO CAMPO "VALOR_MENSALIDADE" --------------------------------------
--UPDATE VAGAS_DW.TMP_CLIENTES SET VALOR_MENSALIDADE = ISNULL(VALOR_FIT,0) + ISNULL(VALOR_REDES,0) 
--												   + ISNULL(VALOR_PRC,0) + ISNULL(VALOR_SMS,0)
--												   + ISNULL(VALOR_PET,0) + ISNULL(VALOR_VET,0), 
----------------------------- REGRA ANTERIOR DE ATUALIZAÇÃO DO CAMPO "VALOR_MENSALIDADE" --------------------------------------

-- NOVA REGRA DE ATUALIZAÇÃO DO CAMPO VALOR_MENSALIDADE:
-- DROP TABLE #TMP_VALOR_PRINCIPAL ;
SELECT	DISTINCT A.CONTAID AS CONTA_ID ,
		A.ContaValorPrincipal AS VALOR_RECORRENTE
INTO	#TMP_VALOR_PRINCIPAL
FROM	[VAGAS_DW].[OPORTUNIDADES] AS A
WHERE	EXISTS (SELECT	1
				FROM	[VAGAS_DW].[CLIENTES] AS A1
				WHERE	A.CONTAID = A1.CONTA_ID
						AND A1.EX_CLIENTE = 0)
		AND A.ContaValorPrincipal IS NOT NULL ;

-- Atualização do valor da mensalidade pra clientes que possuem o VAGAS FIT ANUID:
SELECT	A.CONTA_ID ,
		A.VALOR_RECORRENTE / 12 AS VALOR_MENSALIDADE
INTO	#TMP_VALOR_MENSALIDADE_FIT_ANUID
FROM	#TMP_VALOR_PRINCIPAL AS A	OUTER APPLY (SELECT	TOP 1 *
												 FROM	[VAGAS_DW].[OPORTUNIDADES] AS A1
												 WHERE	A.CONTA_ID = A1.CONTAID
														AND A1.FECHADO_GANHO = 1
														AND A1.PRODUTO = 'VAGAS FIT ANUID'
												 ORDER BY A1.DataFechamento DESC ) B
WHERE	B.OportunidadeCategoria != 'rescisão' ;

-- Atualização da mensalidade pros demais clientes:
SELECT	A.CONTA_ID ,
		A.VALOR_RECORRENTE AS VALOR_MENSALIDADE
INTO	#TMP_VALOR_MENSALIDADE_FIT
FROM	#TMP_VALOR_PRINCIPAL AS A
WHERE	NOT EXISTS (SELECT	1
					FROM	#TMP_VALOR_MENSALIDADE_FIT_ANUID AS A1
					WHERE	A.CONTA_ID = A1.CONTA_ID) ;


UPDATE VAGAS_DW.TMP_CLIENTES SET VALOR_MENSALIDADE = B.VALOR_MENSALIDADE ,
								 TIPO_CLIENTE = CASE WHEN CONTEM_FIT = 1 THEN 'FIT' ELSE '' END
											  + CASE WHEN CONTEM_REDES = 1 THEN ' | REDES' ELSE '' END
											  + CASE WHEN CONTEM_PRC = 1 THEN ' | PRC' ELSE '' END
											  + CASE WHEN CONTEM_SMS = 1 THEN ' | SMS' ELSE '' END
											  + CASE WHEN CONTEM_PET = 1 THEN ' | PET' ELSE '' END
											  + CASE WHEN CONTEM_VET = 1 THEN ' | VET' ELSE '' END
											  + CASE WHEN CONTEM_FLEX_C = 1 THEN 'FLEX_C' ELSE '' END
											  + CASE WHEN CONTEM_FLEX_A = 1 THEN 'FLEX_A' ELSE '' END
											  + CASE WHEN CONTEM_CREDITOS_VAGAS = 1 THEN 'Créditos VAGAS' ELSE '' END
FROM VAGAS_DW.TMP_CLIENTES A		LEFT OUTER JOIN (SELECT		A.CONTA_ID ,
																A.VALOR_MENSALIDADE
													 FROM		#TMP_VALOR_MENSALIDADE_FIT_ANUID AS A
													 UNION ALL
													 SELECT		A.CONTA_ID ,
																A.VALOR_MENSALIDADE
													 FROM		#TMP_VALOR_MENSALIDADE_FIT AS A ) AS B ON A.CONTA_ID = B.CONTA_ID
WHERE A.EX_CLIENTE = 0 ;

-- ATUALIZAR ULT. GR E CONTA_ID
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTA_ID = B.CONTAID,
								 --GR = B.CONTAPROPRIETARIO,
								 CLIENTE_CRM = B.CONTA,
								 PERFIL_CRM = B.PERFIL,
								 SEGMENTO = B.NEGOCIO,
								 CNAE_SECAO_ID = B.CNAE_SECAO_ID,
								 CNAE_SECAO = B.CNAE_SECAO,
								 CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID,
								 CNAE_DIVISAO = B.CNAE_DIVISAO,
								 CNAE_CLASSE_ID = B.CNAE_CLASSE_ID,
								 CNAE_CLASSE = B.CNAE_CLASSE,
								 CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS,
								 CNAE_SUBCLASSE_ID_C = B.CNAE_SUBCLASSE_ID_C,
								 CNAE_SUBCLASSE_DESCR_C = B.CNAE_SUBCLASSE_DESCR_C,
								 CNPJ = B.CNPJ
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * FROM VAGAS_DW.OPORTUNIDADES
			  WHERE ID_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS = A.CLIENTE_VAGAS COLLATE SQL_Latin1_General_CP1_CI_AS
			  AND GRUPO_VENDEDOR IS NOT NULL
			  AND GRUPO_VENDEDOR NOT IN ('pub','admin')
			  AND FECHADO_GANHO = 1
			  ORDER BY DataFechamento DESC ) B
WHERE (CONTA_ID IS NULL /*OR GR IS NULL*/) 
AND A.EX_CLIENTE = 0

-- ATUALIZAR DADOS DE CONTRATO 
UPDATE VAGAS_DW.TMP_CLIENTES SET DATA_CONTRATO_CRM = B.FIM_VIGENCIA,
								 FLAG_CONTRATO_VIGENTE = CASE WHEN B.FIM_VIGENCIA >= DATEADD(DAY, 1, CAST(GETDATE() AS DATE)) THEN 1 ELSE 0 END
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 *
			  FROM VAGAS_DW.CONTRATOS
			  WHERE CONTA_ID = A.CONTA_ID 
			  AND STATUS IN ('novo','ativado_sem_contrato_fisico','ativado','ativado_em_processo','ativado_digital','ativado_aceite_online')
			  AND ( CONTEM_FIT = 1 OR CONTEM_REDES = 1 OR CONTEM_FLEX = 1 OR CONTEM_PRC = 1 )
			  ORDER BY FIM_VIGENCIA DESC ) B
WHERE A.EX_CLIENTE = 0

-- Marcar clientes com rescisão
UPDATE VAGAS_DW.TMP_CLIENTES SET DATA_RESCISAO = DATAFECHAMENTO,
								 TIPO_CLIENTE_MANUT = 'FIRST'
FROM VAGAS_DW.TMP_CLIENTES A
OUTER APPLY ( SELECT TOP 1 * FROM VAGAS_DW.OPORTUNIDADES
				WHERE CONTAID = A.CONTA_ID 
				AND OPORTUNIDADECATEGORIA = 'rescisao' 
				AND PRODUTO_GRUPO IN ('VREDES','FIT','FLEX','PRC','VET','PET')
				AND RECORRENTE = 1
				AND FECHADO_GANHO = 1 ) TAB -- Filtrar Ex Clientes
WHERE A.EX_CLIENTE = 1

-- atualizar clientes com rescisão que estão erroneamente marcados como "ativos"
UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 1,
								 TIPO_CLIENTE_MANUT = 'FIRST',
								 DATA_RESCISAO = B.DATAFECHAMENTO
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
			  FROM VAGAS_DW.OPORTUNIDADES
			  WHERE CONTAID = A.CONTA_ID 
			  AND OPORTUNIDADECATEGORIA = 'rescisao' 
			  AND PRODUTO_GRUPO IN ('VREDES','FIT','FLEX','PRC','VET','PET')
			  AND FECHADO_GANHO = 1
			  ORDER BY DATAFECHAMENTO DESC ) B
WHERE A.CONTEM_FIT IS NULL 
AND A.CONTEM_REDES IS NULL 
AND A.CONTEM_FLEX_A IS NULL
AND A.CONTEM_FLEX_C IS NULL 
AND A.CONTEM_CREDITOS_VAGAS IS NULL 
AND A.EX_CLIENTE = 0

-- atualizar clientes FLEXA e FLEXC que estejam ativos (com vagas publicadas nos ult. 6 meses) 
UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 0,
								 TIPO_CLIENTE = 'FLEX_C' ,
								 CONTEM_FLEX_C = 1
FROM VAGAS_DW.TMP_CLIENTES A
WHERE TIPO_CLIENTE_MANUT = 'FLEXC' 
AND TIPO_CLIENTE = ''
AND ISNULL(CONTEM_FLEX_C,0) = 0 
AND ( QTD_CREDITOS_DISPONIVEL > 0 OR QTD_VAGAS_ULT_6_MESES > 0 )

UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 0,
								 TIPO_CLIENTE = 'FLEX_A' ,
								 CONTEM_FLEX_A = 1
FROM VAGAS_DW.TMP_CLIENTES A
WHERE TIPO_CLIENTE_MANUT = 'FLEXA' 
AND TIPO_CLIENTE = ''
AND ISNULL(CONTEM_FLEX_A,0) = 0 
AND ( QTD_CREDITOS_DISPONIVEL > 0 OR QTD_VAGAS_ULT_6_MESES > 0 )

-- Ex clientes FLEXA e FLEXC 
UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 1,
								 TIPO_CLIENTE = CASE WHEN TIPO_CLIENTE_MANUT = 'FLEXA' THEN 'FLEX_A' ELSE 'FLEX_C' END,
								 CONTEM_FLEX_C = CASE WHEN TIPO_CLIENTE_MANUT = 'FLEXC' THEN 1 ELSE NULL END,
								 CONTEM_FLEX_A = CASE WHEN TIPO_CLIENTE_MANUT = 'FLEXA' THEN 1 ELSE NULL END
FROM VAGAS_DW.TMP_CLIENTES A
WHERE TIPO_CLIENTE_MANUT IN ('FLEXA','FLEXC')
AND TIPO_CLIENTE = ''
AND A.EX_CLIENTE = 0
AND QTD_CREDITOS_DISPONIVEL = 0 
AND QTD_VAGAS_ULT_6_MESES = 0 

-- atualizar clientes com flexc sem créditos e sem vagas publicadas nos últimos 6 meses
UPDATE VAGAS_DW.TMP_CLIENTES SET EX_CLIENTE = 1,
								 TIPO_CLIENTE_MANUT = 'FIRST'
FROM VAGAS_DW.TMP_CLIENTES A
WHERE TIPO_CLIENTE_MANUT = 'FLEXC' 
AND ISNULL(CONTEM_FLEX_C,0) = 0 
AND ISNULL(CONTEM_CREDITOS_VAGAS,0) = 0
AND TIPO_CLIENTE = '' 
AND QTD_CREDITOS_DISPONIVEL < 1
AND QTD_VAGAS_ULT_6_MESES = 0

-- Criar marcação para clientes que estão ativos porém não abriram vagas nos últimos 6 meses
UPDATE VAGAS_DW.TMP_CLIENTES SET FLAG_ATIVO_SEM_VAGAS = 1
FROM VAGAS_DW.TMP_CLIENTES A
WHERE A.QTD_Vagas_ULT_6_Meses = 0 AND A.EX_CLIENTE = 0

-- marcar data da primeira oportunidade no CRM
UPDATE VAGAS_DW.TMP_CLIENTES SET DATA_PRM_OPORTUNIDADE_CRM = B.DATAFECHAMENTO
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
			  FROM VAGAS_DW.OPORTUNIDADES 
			  WHERE CONTAID = A.CONTA_ID
			  AND ( PRODUTO_GRUPO IN ('VREDES','FIT','FLEX') )
			  AND FECHADO_GANHO = 1
			  AND DATAFECHAMENTO IS NOT NULL
			  ORDER BY DATAFECHAMENTO ASC ) B
WHERE A.EX_CLIENTE = 0

-- MARCAR SE É UM NOVO CLIENTE (QUANDO A DATA DA PRIMEIRA OPORTUNIDADE FOR MENOR QUE 12 MESES)
UPDATE VAGAS_DW.TMP_CLIENTES SET FLAG_CLIENTE_NOVO = 1
FROM VAGAS_DW.TMP_CLIENTES A
WHERE A.EX_CLIENTE = 0 AND DATA_PRM_OPORTUNIDADE_CRM >= DATEADD(MONTH,-12,GETDATE())

-- Atualizar Médias 
UPDATE VAGAS_DW.TMP_CLIENTES SET MEDIA_Vagas_ULT_3_Meses = CONVERT(FLOAT,A.QTD_Vagas_ULT_3_Meses) / 3 ,
								 MEDIA_Vagas_ULT_6_Meses = CONVERT(FLOAT,A.QTD_Vagas_ULT_6_Meses) / 6 ,
								 MEDIA_Vagas_ULT_9_Meses = CONVERT(FLOAT,A.QTD_Vagas_ULT_9_Meses) / 9 ,
								 MEDIA_Vagas_ULT_12_Meses = CONVERT(FLOAT,A.QTD_Vagas_ULT_12_Meses) / 12,
								 SALDO_BCE = CONVERT(FLOAT, QTD_BCE) / CONVERT(FLOAT, CAPACIDADE_BCE)
FROM VAGAS_DW.TMP_CLIENTES A
WHERE EX_CLIENTE = 0

-- Atualizar ponderação de Média baseado na diferença de meses do início da vigência para clientes novos (diferença da prm oportunidade e a data atual menor que 12 meses)
UPDATE VAGAS_DW.TMP_CLIENTES SET MEDIA_VAGAS_PONDERADO = CASE WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 12 
																							 THEN CONVERT(FLOAT,QTD_VAGAS_MES_12) / 1
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 11 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11)) / 2
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 10 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																								   CONVERT(FLOAT,QTD_VAGAS_MES_10) ) / 3
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 9 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																								   CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) ) / 4
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 8 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																								   CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) ) / 5
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 7 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																				CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) ) / 6			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 6 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) ) / 7
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 5 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) ) / 8
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 4 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) + CONVERT(FLOAT,QTD_VAGAS_MES_4) ) / 9
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 3 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
													CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) + CONVERT(FLOAT,QTD_VAGAS_MES_4) + CONVERT(FLOAT,QTD_VAGAS_MES_3) ) / 10
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 2 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
										CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) + CONVERT(FLOAT,QTD_VAGAS_MES_4) + CONVERT(FLOAT,QTD_VAGAS_MES_3) + CONVERT(FLOAT,QTD_VAGAS_MES_2) ) / 11
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 1 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
									CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) + CONVERT(FLOAT,QTD_VAGAS_MES_4) + CONVERT(FLOAT,QTD_VAGAS_MES_3) + CONVERT(FLOAT,QTD_VAGAS_MES_2) + CONVERT(FLOAT,QTD_VAGAS_MES_1) ) / 12
			ELSE 0 END 
FROM VAGAS_DW.TMP_CLIENTES
WHERE EX_CLIENTE = 0
AND FLAG_CLIENTE_NOVO = 1

-- No caso dos contratos ANTIGOS consideramos a ponderação igual a média dos 12 meses
UPDATE VAGAS_DW.TMP_CLIENTES SET MEDIA_VAGAS_PONDERADO = MEDIA_Vagas_ULT_12_Meses
FROM VAGAS_DW.TMP_CLIENTES
WHERE EX_CLIENTE = 0
AND ISNULL(FLAG_CLIENTE_NOVO,0) = 0

-- Atualizar projeção de Média baseado na diferença de meses do início da vigência para clientes novos (onde não for renovação) e também dando um peso maior
-- para meses mais recentes
UPDATE VAGAS_DW.TMP_CLIENTES SET MEDIA_Vagas_PROJECAO = CASE WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 12 THEN CONVERT(FLOAT,QTD_VAGAS_MES_12) / PESO_MES_12


			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 11 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11)) / (PESO_MES_12 + PESO_MES_11) 
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 10 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																								   CONVERT(FLOAT,QTD_VAGAS_MES_10) ) / (PESO_MES_12 + PESO_MES_11 + PESO_MES_10)
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 9 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																								   CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) ) / (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 )
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 8 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																								   CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) ) 
																								   / (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 )
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 7 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																				CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) ) 
																				/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 )			
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 6 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) ) 
																/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 + PESO_MES_6 )
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 5 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9 ) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) ) 
																/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 + PESO_MES_6 + PESO_MES_5 )
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 4 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
																CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9 ) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) + CONVERT(FLOAT,QTD_VAGAS_MES_4) ) 
																/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 + PESO_MES_6 + PESO_MES_5 + PESO_MES_4 )
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 3 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11 )+
													CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6)  + CONVERT(FLOAT,QTD_VAGAS_MES_5) + CONVERT(FLOAT,QTD_VAGAS_MES_4) + CONVERT(FLOAT,QTD_VAGAS_MES_3) ) 
													/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 + PESO_MES_6 + PESO_MES_5 + PESO_MES_4 + PESO_MES_3 )
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 2 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11 ) +
										CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9 ) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6 ) + CONVERT(FLOAT,QTD_VAGAS_MES_5 ) + CONVERT(FLOAT,QTD_VAGAS_MES_4 ) + CONVERT(FLOAT,QTD_VAGAS_MES_3 ) + CONVERT(FLOAT,QTD_VAGAS_MES_2) ) 
										/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 + PESO_MES_6 + PESO_MES_5 + PESO_MES_4 + PESO_MES_3 + PESO_MES_2 )
			
			WHEN DATEDIFF(MONTH,DATA_REFERENCIA_12_MESES_INICIO,DATA_PRM_OPORTUNIDADE_CRM) + 1 = 1 THEN (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) +
									CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8 ) + CONVERT(FLOAT,QTD_VAGAS_MES_7 ) + CONVERT(FLOAT,QTD_VAGAS_MES_6 ) + CONVERT(FLOAT,QTD_VAGAS_MES_5 ) + CONVERT(FLOAT,QTD_VAGAS_MES_4 ) + CONVERT(FLOAT,QTD_VAGAS_MES_3 ) + CONVERT(FLOAT,QTD_VAGAS_MES_2 ) + CONVERT(FLOAT,QTD_VAGAS_MES_1 ) ) 
									/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 + PESO_MES_6 + PESO_MES_5 + PESO_MES_4 + PESO_MES_3 + PESO_MES_2 + PESO_MES_1 )
			ELSE 0 END
FROM VAGAS_DW.TMP_CLIENTES A
FULL OUTER JOIN VAGAS_DW.PESOS_LINHA_TEMPO B ON 1 = 1 -- TABELA DE PESOS (POSSUI APENAS UMA LINHA COM A DISTR. DE PESOS MES A MES)
WHERE A.EX_CLIENTE = 0
AND FLAG_CLIENTE_NOVO = 1

-- No caso dos contratos ANTIGOS consideramos a PROJEÇÃO considerando sempre 12 meses
UPDATE VAGAS_DW.TMP_CLIENTES SET MEDIA_VAGAS_PROJECAO = (CONVERT(FLOAT,QTD_VAGAS_MES_12) + CONVERT(FLOAT,QTD_VAGAS_MES_11) + CONVERT(FLOAT,QTD_VAGAS_MES_10) + CONVERT(FLOAT,QTD_VAGAS_MES_9) + CONVERT(FLOAT,QTD_VAGAS_MES_8) + CONVERT(FLOAT,QTD_VAGAS_MES_7) + CONVERT(FLOAT,QTD_VAGAS_MES_6) + CONVERT(FLOAT,QTD_VAGAS_MES_5) + CONVERT(FLOAT,QTD_VAGAS_MES_4) + CONVERT(FLOAT,QTD_VAGAS_MES_3) + CONVERT(FLOAT,QTD_VAGAS_MES_2) + CONVERT(FLOAT,QTD_VAGAS_MES_1 )) 
									/ (PESO_MES_12 + PESO_MES_11 + PESO_MES_10 + PESO_MES_9 + PESO_MES_8 + PESO_MES_7 + PESO_MES_6 + PESO_MES_5 + PESO_MES_4 + PESO_MES_3 + PESO_MES_2 + PESO_MES_1 )
FROM VAGAS_DW.TMP_CLIENTES A
FULL OUTER JOIN VAGAS_DW.PESOS_LINHA_TEMPO B ON 1 = 1 -- TABELA DE PESOS (POSSUI APENAS UMA LINHA COM A DISTR. DE PESOS MES A MES)
WHERE A.EX_CLIENTE = 0
AND ISNULL(FLAG_CLIENTE_NOVO,0) = 0

-- Ajustar casos em que a projeção é menor que zero
UPDATE VAGAS_DW.TMP_CLIENTES SET MEDIA_VAGAS_PROJECAO = 1
FROM VAGAS_DW.TMP_CLIENTES A
WHERE A.EX_CLIENTE = 0 AND MEDIA_VAGAS_PROJECAO < 1

-- Atualizar Média Ponderada para ex clientes (aproveitamos e atualizamos outras informações relevantes)
UPDATE VAGAS_DW.TMP_CLIENTES SET MEDIA_VAGAS_PONDERADO = ISNULL(TAB.MEDIA_PONDERADA,0),
							 DATA_PRM_VAGA_PUBLICADA = TAB.DATA_PRM_VAGA_PUBLICADA,
							 DATA_ULT_VAGA_PUBLICADA = TAB.DATA_ULT_VAGA_PUBLICADA
FROM VAGAS_DW.TMP_CLIENTES A
OUTER APPLY ( SELECT  MIN(DATA_PUBLICACAO) AS DATA_PRM_VAGA_PUBLICADA,
					  MAX(DATA_PUBLICACAO) AS DATA_ULT_VAGA_PUBLICADA,
					  COUNT(*) / CASE WHEN DATEDIFF(MONTH,MIN(DATA_PUBLICACAO),MAX(DATA_PUBLICACAO)) = 0 THEN CONVERT(FLOAT,1) 
									  ELSE CONVERT(FLOAT,DATEDIFF(MONTH,MIN(DATA_PUBLICACAO),MAX(DATA_PUBLICACAO))) END AS MEDIA_PONDERADA
				FROM VAGAS_DW.VAGAS
				WHERE COD_CLI = A.COD_CLI
				AND DATA_PUBLICACAO > A.DATA_PRM_OPORTUNIDADE_CRM ) TAB
WHERE A.EX_CLIENTE = 1 


-- Atualizar informações dos que têm contrato vigente (removemos a ponderação sob o últ. contrato)
UPDATE VAGAS_DW.TMP_CLIENTES SET DATA_PRM_VAGA_PUBLICADA = TAB.DATA_PRM_VAGA_PUBLICADA,
							 DATA_ULT_VAGA_PUBLICADA = TAB.DATA_ULT_VAGA_PUBLICADA,
							 QTD_VAGAS_PUBLICADAS = TAB.QTD_VAGAS_PUBLICADAS
FROM VAGAS_DW.TMP_CLIENTES A
OUTER APPLY ( SELECT COUNT(*) AS QTD_VAGAS,
					  MIN(DATA_PUBLICACAO) AS DATA_PRM_VAGA_PUBLICADA,
					  MAX(DATA_PUBLICACAO) AS DATA_ULT_VAGA_PUBLICADA,
					  COUNT(*) AS QTD_VAGAS_PUBLICADAS
				FROM VAGAS_DW.VAGAS
				WHERE COD_CLI = A.COD_CLI AND DATA_PUBLICACAO < DATEADD(YEAR,1,GETDATE()) ) TAB
WHERE A.EX_CLIENTE = 0

-- Atualizar dados do ERP
UPDATE VAGAS_DW.TMP_CLIENTES SET DIAS_ATRASO_ULT_FATURA = B.DIAS_ATRASO,
								 VALOR_ULT_FATURA = B.VALOR,
								 DATA_ULT_FATURA = B.DATA_VENCIMENTO_ORIGINAL,
								 FLAG_PAGO = B.FLAG_PAGO
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 * 
			  FROM VAGAS_DW.FATURAS
			  WHERE COD_CLI_CRM = A.CONTA_ID
			  AND TIPO_ORIGEM = 'NF'
			  AND DATA_REFERENCIA = ( SELECT MAX(DATA_REFERENCIA) 
									  FROM VAGAS_DW.FATURAS )
			  AND DATA_VENCIMENTO_REAL_ORIGINAL <= GETDATE() -- ÚLT. FATURA VENCIDA
			  ORDER BY DATA_VENCIMENTO_REAL_ORIGINAL DESC
			) B	
WHERE A.EX_CLIENTE = 0

UPDATE VAGAS_DW.TMP_CLIENTES SET CONTEM_CUSTOMIZACAO = 1,
								 QTD_CUSTOMIZACAO = B.QTD,
								 VALOR_TOTAL_CUSTOMIZACAO = B.VALOR,
								 DATA_ULT_CUSTOMIZACAO = B.DATA_ULT_OPORTUNIDADE
FROM VAGAS_DW.TMP_CLIENTES A	
CROSS APPLY ( SELECT COUNT(*) AS QTD, 
					 SUM(ValorProdutoFINAL) AS Valor,
					 MAX(DATAFECHAMENTO) AS DATA_ULT_OPORTUNIDADE
			  FROM VAGAS_DW.OPORTUNIDADES
			  WHERE ( CONTAID = A.CONTA_ID OR ID_VAGAS = A.CLIENTE_VAGAS )
			  AND PRODUTO_GRUPO = 'DSM'
			  AND FECHADO_GANHO = 1 
			  ) B		  
WHERE /*A.EX_CLIENTE = 0
AND */ B.QTD > 0

-- AJUSTES FINAIS NOS CAMPOS QUE FICARAM COMO "NULL"
-- ATUALIZAR TAMANHO_MENSALIDADE (DE ACORDO COM CLASSIFICAÇÃO CRIADA PELO COMERCIAL)
UPDATE VAGAS_DW.TMP_CLIENTES SET FLAG_CLIENTE_NOVO = CASE WHEN FLAG_CLIENTE_NOVO IS NULL THEN 0 ELSE 1 END,
								 FLAG_ATIVO_SEM_VAGAS = CASE WHEN FLAG_ATIVO_SEM_VAGAS IS NULL THEN 0 ELSE 1 END,
								 CONTEM_FIT = CASE WHEN CONTEM_FIT IS NULL THEN 0 ELSE 1 END,
								 CONTEM_FLEX_C = CASE WHEN CONTEM_FLEX_C IS NULL THEN 0 ELSE 1 END,
								 CONTEM_FLEX_A = CASE WHEN CONTEM_FLEX_A IS NULL THEN 0 ELSE 1 END,
								 CONTEM_REDES = CASE WHEN CONTEM_REDES IS NULL THEN 0 ELSE 1 END,
								 CONTEM_CREDITOS_VAGAS = CASE WHEN CONTEM_CREDITOS_VAGAS IS NULL THEN 0 ELSE 1 END,
								 CONTEM_PRC = CASE WHEN CONTEM_PRC IS NULL THEN 0 ELSE 1 END,
								 CONTEM_VET = CASE WHEN CONTEM_VET IS NULL THEN 0 ELSE 1 END,
								 CONTEM_PET = CASE WHEN CONTEM_PET IS NULL THEN 0 ELSE 1 END,
								 CONTEM_SMS = CASE WHEN CONTEM_SMS IS NULL THEN 0 ELSE 1 END,
								 TAMANHO_MENSALIDADE = CASE WHEN ISNULL(VALOR_MENSALIDADE,0) < 1000 THEN 'P' 
															WHEN ISNULL(VALOR_MENSALIDADE,0) >= 1000 AND ISNULL(VALOR_MENSALIDADE,0) < 2000 THEN 'M' 
															WHEN ISNULL(VALOR_MENSALIDADE,0) >= 2000 AND ISNULL(VALOR_MENSALIDADE,0) < 5000 THEN 'G' 
															WHEN ISNULL(VALOR_MENSALIDADE,0) >= 5000 THEN 'VIP' END,
								 PERFIL_BCE = CASE WHEN ISNULL(CAPACIDADE_BCE,0) < 30000 THEN 'P' 
												   WHEN ISNULL(CAPACIDADE_BCE,0) >= 30000 AND ISNULL(VALOR_MENSALIDADE,0) < 70000 THEN 'M' 
												   WHEN ISNULL(CAPACIDADE_BCE,0) >= 70000 AND ISNULL(VALOR_MENSALIDADE,0) < 170000 THEN 'G'
												   WHEN ISNULL(CAPACIDADE_BCE,0) >= 170000 THEN 'VIP' END
FROM VAGAS_DW.TMP_CLIENTES A

-- DROP TABLE #TMP_EXTRACOES_BCC
-- Atualizar extrações BCC
-- Contratos vigentes
SELECT A.COD_CLI,'12_MESES' AS TIPO_BCC,SUM(QTD_CVS) AS QTD_CVS
INTO #TMP_EXTRACOES_BCC
FROM VAGAS_DW.EXTRACOES_BCC A
INNER JOIN VAGAS_DW.TMP_CLIENTES B ON B.COD_CLI = A.COD_CLI
WHERE A.DT_PEDIDO >= DATEADD(MONTH,-12,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,GETDATE(),112)) - DAY(GETDATE()) + 1 ) -- renovações pegamos extrações nos últimos 12 meses
AND A.DT_PEDIDO < CONVERT(SMALLDATETIME,CONVERT(VARCHAR,GETDATE(),112)) - DAY(GETDATE()) + 1 -- CONSIDERAMOS APENAS ATÉ O MÊS ANTERIOR
AND B.EX_CLIENTE = 0
GROUP BY A.COD_CLI

UNION ALL

-- Contratos cancelados
SELECT A.COD_CLI,'12_MESES' AS TIPO_BCC,SUM(QTD_CVS) AS QTD_CVS
FROM VAGAS_DW.EXTRACOES_BCC A
INNER JOIN VAGAS_DW.TMP_CLIENTES B ON B.COD_CLI = A.COD_CLI
WHERE B.EX_CLIENTE = 1
GROUP BY A.COD_CLI

UNION ALL

SELECT A.COD_CLI,'6_MESES' AS TIPO_BCC,SUM(QTD_CVS) AS QTD_CVS
FROM VAGAS_DW.EXTRACOES_BCC A
INNER JOIN VAGAS_DW.TMP_CLIENTES B ON B.COD_CLI = A.COD_CLI
WHERE A.DT_PEDIDO >= DATEADD(MONTH,-6,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,GETDATE(),112)) - DAY(GETDATE()) + 1 ) -- renovações pegamos extrações nos últimos 12 meses
AND A.DT_PEDIDO < CONVERT(SMALLDATETIME,CONVERT(VARCHAR,GETDATE(),112)) - DAY(GETDATE()) + 1 -- CONSIDERAMOS APENAS ATÉ O MÊS ANTERIOR
AND B.EX_CLIENTE = 0
GROUP BY A.COD_CLI


UNION ALL

SELECT A.COD_CLI,'3_MESES' AS TIPO_BCC,SUM(QTD_CVS) AS QTD_CVS
FROM VAGAS_DW.EXTRACOES_BCC A
INNER JOIN VAGAS_DW.TMP_CLIENTES B ON B.COD_CLI = A.COD_CLI
WHERE A.DT_PEDIDO >= DATEADD(MONTH,-3,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,GETDATE(),112)) - DAY(GETDATE()) + 1 ) -- renovações pegamos extrações nos últimos 12 meses
AND A.DT_PEDIDO < CONVERT(SMALLDATETIME,CONVERT(VARCHAR,GETDATE(),112)) - DAY(GETDATE()) + 1 -- CONSIDERAMOS APENAS ATÉ O MÊS ANTERIOR
AND B.EX_CLIENTE = 0
GROUP BY A.COD_CLI

UPDATE VAGAS_DW.TMP_CLIENTES SET QTD_EXTRACOES_BCC = ISNULL(B.QTD_CVS,0)
FROM VAGAS_DW.TMP_CLIENTES A
LEFT OUTER JOIN #TMP_EXTRACOES_BCC B ON B.COD_CLI = A.COD_CLI
									 AND B.TIPO_BCC = '12_MESES'
WHERE A.EX_CLIENTE = 0

UPDATE VAGAS_DW.TMP_CLIENTES SET QTD_EXTRACOES_BCC_6_MESES = ISNULL(B.QTD_CVS,0) ,
							 CREDITO_BCC = ISNULL((ISNULL(CONVERT(FLOAT,B.QTD_CVS),0) / 6) / 20,0) -- UTILIZAMOS NO CÁLCULO DO GESTÃO DE CLIENTES
																							 -- BASEADO NA MÉDIA (POR ISSO DIVIDIMOS POR 6)
FROM VAGAS_DW.TMP_CLIENTES A
LEFT OUTER JOIN #TMP_EXTRACOES_BCC B ON B.COD_CLI = A.COD_CLI
									 AND B.TIPO_BCC = '6_MESES'
WHERE A.EX_CLIENTE = 0

UPDATE VAGAS_DW.TMP_CLIENTES SET QTD_EXTRACOES_BCC_3_MESES = ISNULL(B.QTD_CVS,0)
FROM VAGAS_DW.TMP_CLIENTES A
LEFT OUTER JOIN #TMP_EXTRACOES_BCC B ON B.COD_CLI = A.COD_CLI
									 AND B.TIPO_BCC = '3_MESES'
WHERE A.EX_CLIENTE = 0

-- ATUALIZAR VAGAS RE, RI E REDES 
UPDATE VAGAS_DW.TMP_CLIENTES SET MEDIA_VAGAS_ULT_6_MESES_RE = ISNULL(CONVERT(FLOAT,B.QTD_VAGAS_RE) / 6,0)  , -- CONSIDERAMOS TAMBÉM A EQUIV. DO BCC NA MÉDIA DO RE
								 MEDIA_VAGAS_ULT_6_MESES_RI = ISNULL(CONVERT(FLOAT,C.QTD_VAGAS_RI) / 6,0),
								 MEDIA_POSICOES_ULT_6_MESES_REDES = ISNULL(CONVERT(FLOAT,D.QTD_POSICOES_REDES) / 6,0)
--SELECT ISNULL(CONVERT(FLOAT,D.QTD_POSICOES_REDES) / 6,0),*
FROM VAGAS_DW.TMP_CLIENTES A
OUTER APPLY ( SELECT COUNT(*) AS QTD_VAGAS_RE
			  FROM VAGAS_DW.VAGAS
			  WHERE COD_CLI = A.COD_CLI
			  AND TIPO_PROCESSO IN ('RE','GESTÃO')
			  AND DATA_PUBLICACAO >= DATEADD(MONTH,-6,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,GETDATE(),112)) - DAY(GETDATE()) + 1 )
			  AND DATA_PUBLICACAO < CONVERT(SMALLDATETIME,CONVERT(VARCHAR,GETDATE(),112)) - DAY(GETDATE()) + 1 ) B
OUTER APPLY ( SELECT COUNT(*) AS QTD_VAGAS_RI
			  FROM VAGAS_DW.VAGAS
			  WHERE COD_CLI = A.COD_CLI
			  AND TIPO_PROCESSO = 'RI'
			  AND DATA_PUBLICACAO >= DATEADD(MONTH,-6,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,GETDATE(),112)) - DAY(GETDATE()) + 1 )
			  AND DATA_PUBLICACAO < CONVERT(SMALLDATETIME,CONVERT(VARCHAR,GETDATE(),112)) - DAY(GETDATE()) + 1 ) C
OUTER APPLY ( SELECT SUM(QTD_POSICOES) AS QTD_POSICOES_REDES
			  FROM VAGAS_DW.VAGAS A1
			  WHERE COD_CLI = A.COD_CLI
			  AND TIPO_PROCESSO = 'REDES'
			  AND DATA_PUBLICACAO >= DATEADD(MONTH,-6,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,GETDATE(),112)) - DAY(GETDATE()) + 1 )
			  AND DATA_PUBLICACAO < CONVERT(SMALLDATETIME,CONVERT(VARCHAR,GETDATE(),112)) - DAY(GETDATE()) + 1
			  AND QTD_POSICOES < 10000 /* AJUSTE POR CONTA DE ERRO NO MAG. LUIZA */ ) D
WHERE A.EX_CLIENTE = 0


-- ATUALIZAR STATUS BCE, VAGAS, EXTRAÇÕES
UPDATE VAGAS_DW.TMP_CLIENTES SET STATUS_BCE = CASE WHEN SALDO_BCE < 0.95 THEN 'ABAIXO'
												   WHEN SALDO_BCE >= 0.95 AND SALDO_BCE <= 1 THEN 'REVISÃO'
												   WHEN SALDO_BCE > 1 THEN 'ACIMA' END,
								 STATUS_VAGAS_RE = CASE WHEN MEDIA_VAGAS_ULT_6_MESES_RE + CREDITO_BCC < ISNULL(QTD_MIN_VAGAS,0) 
													    OR MEDIA_VAGAS_ULT_6_MESES_RE + CREDITO_BCC = 0 
														THEN 'ABAIXO'
														WHEN (MEDIA_VAGAS_ULT_6_MESES_RE + CREDITO_BCC >= ISNULL(QTD_MIN_VAGAS,0) 
															 AND MEDIA_VAGAS_ULT_6_MESES_RE + CREDITO_BCC <= ISNULL(QTD_MAX_VAGAS,0))
															 OR ((( MEDIA_VAGAS_ULT_6_MESES_RE + CREDITO_BCC ) - QTD_MAX_VAGAS) < 1) -- SE A DIFERENÇA DA "MÉDIA TOTAL" FOR MENOR DO QUE 1 NÃO CONSIDERAREMOS COMO "ACIMA"
														THEN 'MÉDIA'
														WHEN MEDIA_VAGAS_ULT_6_MESES_RE + CREDITO_BCC > ISNULL(QTD_MAX_VAGAS,0) 
														THEN 'ACIMA' END,
								 STATUS_VAGAS_RI = CASE WHEN QTD_MIN_RI_VAGAS IS NULL OR QTD_MAX_RI_VAGAS IS NULL 
														OR QTD_MIN_RI_VAGAS = 0 OR QTD_MAX_RI_VAGAS = 0
														THEN 'SEM RI'
														WHEN MEDIA_VAGAS_ULT_6_MESES_RI < ISNULL(QTD_MIN_RI_VAGAS,0) OR MEDIA_VAGAS_ULT_6_MESES_RI = 0  
														AND QTD_MIN_RI_VAGAS IS NULL AND QTD_MAX_RI_VAGAS IS NULL 
														THEN 'ABAIXO'
														WHEN MEDIA_VAGAS_ULT_6_MESES_RI >= ISNULL(QTD_MIN_RI_VAGAS,0) 
														AND MEDIA_VAGAS_ULT_6_MESES_RI <= ISNULL(QTD_MAX_RI_VAGAS,0)
														THEN 'MÉDIA'
														WHEN MEDIA_VAGAS_ULT_6_MESES_RI > ISNULL(QTD_MAX_RI_VAGAS,0) THEN 'ACIMA' END 				 
FROM VAGAS_DW.TMP_CLIENTES A
WHERE A.EX_CLIENTE = 0

-- ATUALIZAR STATUS FINAL DO CLIENTE
-- 1º PARTE (VAGAS + EXTRAÇÕES)
UPDATE VAGAS_DW.TMP_CLIENTES SET STATUS_CLIENTE = CASE WHEN (STATUS_VAGAS_RE = 'ACIMA' OR STATUS_VAGAS_RI = 'ACIMA') AND STATUS_BCE IN ('REVISÃO','ACIMA') 
													   THEN 'MUITO IMPORTANTE'
													   WHEN (   (   STATUS_VAGAS_RE = 'ACIMA' 
																 OR STATUS_VAGAS_RI = 'ACIMA' ) 
															OR ( STATUS_BCE = 'ACIMA' )
															 )
													   THEN 'IMPORTANTE'
													   WHEN (STATUS_VAGAS_RE = 'MÉDIA' OR STATUS_VAGAS_RI = 'MÉDIA' OR STATUS_BCE = 'REVISÃO')
													   THEN 'OLHAR'
													   ELSE 'NÃO OLHAR' END 
FROM VAGAS_DW.TMP_CLIENTES A
WHERE A.EX_CLIENTE = 0

-- 2º PARTE (VAGAS Redes)
UPDATE VAGAS_DW.TMP_CLIENTES SET STATUS_POSICOES_REDES = CASE WHEN MEDIA_POSICOES_ULT_6_MESES_REDES > POSICOES_MES THEN 'ACIMA'
														  ELSE 'ABAIXO' END,
							 STATUS_UNIDADES_REDES = CASE WHEN UNIDADES_CADASTRADAS > TOTAL_UNIDADES THEN 'ACIMA'
														  ELSE 'ABAIXO' END							 
FROM VAGAS_DW.TMP_CLIENTES A
WHERE A.EX_CLIENTE = 0
AND A.CONTEM_REDES = 1

UPDATE VAGAS_DW.TMP_CLIENTES SET STATUS_REDES = CASE WHEN (    ( STATUS_POSICOES_REDES = 'ACIMA' AND STATUS_UNIDADES_REDES = 'ABAIXO' )
														OR ( STATUS_POSICOES_REDES = 'ABAIXO' AND STATUS_UNIDADES_REDES = 'ACIMA' ) ) THEN 'IMPORTANTE'
												 WHEN STATUS_POSICOES_REDES = 'ACIMA' AND STATUS_UNIDADES_REDES = 'ACIMA' THEN 'MUITO IMPORTANTE'
												 ELSE 'ABAIXO' END
FROM VAGAS_DW.TMP_CLIENTES A
WHERE A.EX_CLIENTE = 0
AND A.CONTEM_REDES = 1


-- TEMPO DE INATIVIDADE (solicitação marketing de produtos)
--UPDATE VAGAS_DW.TMP_CLIENTES SET TEMPO_INATIVIDADE = CASE WHEN DATA_ULT_VAGA_PUBLICADA IS NULL THEN 'NUNCA PUBLICOU'
--			WHEN DATEDIFF(MONTH,DATA_ULT_VAGA_PUBLICADA,GETDATE()) <= 0 THEN 'ATIVO'
--			WHEN DATEDIFF(MONTH,DATA_ULT_VAGA_PUBLICADA,GETDATE()) = 1 THEN '1 MÊS'
--			WHEN DATEDIFF(MONTH,DATA_ULT_VAGA_PUBLICADA,GETDATE()) > 1 
--				AND DATEDIFF(MONTH,DATA_ULT_VAGA_PUBLICADA,GETDATE()) <= 3 THEN 'DE 1 A 3 MESES'
--			WHEN DATEDIFF(MONTH,DATA_ULT_VAGA_PUBLICADA,GETDATE()) > 3 
--				AND DATEDIFF(MONTH,DATA_ULT_VAGA_PUBLICADA,GETDATE()) <= 6 THEN 'DE 4 A 6 MESES'
--			WHEN DATEDIFF(MONTH,DATA_ULT_VAGA_PUBLICADA,GETDATE()) > 6 
--				AND DATEDIFF(MONTH,DATA_ULT_VAGA_PUBLICADA,GETDATE()) <= 9 THEN 'DE 7 A 9 MESES'
--			WHEN DATEDIFF(MONTH,DATA_ULT_VAGA_PUBLICADA,GETDATE()) > 9 
--				AND DATEDIFF(MONTH,DATA_ULT_VAGA_PUBLICADA,GETDATE()) <= 12 THEN 'DE 9 A 12 MESES'
--			WHEN DATEDIFF(MONTH,DATA_ULT_VAGA_PUBLICADA,GETDATE()) > 12 THEN 'ACIMA DE 12 MESES'
--		END,
UPDATE	[VAGAS_DW].[TMP_CLIENTES]
SET		TEMPO_ASSINATURA_CONTRATO = CASE WHEN DATA_PRM_OPORTUNIDADE_CRM IS NULL THEN 'NÃO CLASSIFICADO'
			WHEN DATEDIFF(MONTH,DATA_PRM_OPORTUNIDADE_CRM,GETDATE()) <= 0 THEN 'MÊS ATUAL'
			WHEN DATEDIFF(MONTH,DATA_PRM_OPORTUNIDADE_CRM,GETDATE()) = 1 THEN '1 MÊS'
			WHEN DATEDIFF(MONTH,DATA_PRM_OPORTUNIDADE_CRM,GETDATE()) > 1 
				AND DATEDIFF(MONTH,DATA_PRM_OPORTUNIDADE_CRM,GETDATE()) <= 3 THEN 'DE 1 A 3 MESES'
			WHEN DATEDIFF(MONTH,DATA_PRM_OPORTUNIDADE_CRM,GETDATE()) > 3 
				AND DATEDIFF(MONTH,DATA_PRM_OPORTUNIDADE_CRM,GETDATE()) <= 6 THEN 'DE 4 A 6 MESES'
			WHEN DATEDIFF(MONTH,DATA_PRM_OPORTUNIDADE_CRM,GETDATE()) > 6 
				AND DATEDIFF(MONTH,DATA_PRM_OPORTUNIDADE_CRM,GETDATE()) <= 9 THEN 'DE 7 A 9 MESES'
			WHEN DATEDIFF(MONTH,DATA_PRM_OPORTUNIDADE_CRM,GETDATE()) > 9 
				AND DATEDIFF(MONTH,DATA_PRM_OPORTUNIDADE_CRM,GETDATE()) <= 12 THEN 'DE 9 A 12 MESES'
			WHEN DATEDIFF(MONTH,DATA_PRM_OPORTUNIDADE_CRM,GETDATE()) > 12 THEN 'ACIMA DE 12 MESES'
		END
FROM VAGAS_DW.TMP_CLIENTES A
WHERE EX_CLIENTE = 0
AND CONTEM_FIT = 1


-- 16/08/2018: Sobreposição da regra anterior para o campo TEMPO_INATIVIDADE, pois da forma anterior uma DATA_ULT_VAGA_PUBLICADA = 31/08/2018 versus a DATA_ATUAL igual a 01/09/2018 tería a diferença de 1 mês, e não 0 meses que é o correto.
UPDATE	[VAGAS_DW].[TMP_CLIENTES]
SET		TEMPO_INATIVIDADE = 
		CASE
			WHEN A.DATA_ULT_VAGA_PUBLICADA IS NULL THEN 'NUNCA PUBLICOU'
			WHEN DATEDIFF(DAY, DATA_ULT_VAGA_PUBLICADA, CAST(GETDATE() AS DATE)) / 30 <= 0 THEN 'ATIVO'
			WHEN DATEDIFF(DAY, DATA_ULT_VAGA_PUBLICADA, CAST(GETDATE() AS DATE)) / 30 = 1  THEN '1 MÊS'
			WHEN DATEDIFF(DAY, DATA_ULT_VAGA_PUBLICADA, CAST(GETDATE() AS DATE)) / 30 BETWEEN 2  AND 3 THEN  'DE 2 A 3 MESES'
			WHEN DATEDIFF(DAY, DATA_ULT_VAGA_PUBLICADA, CAST(GETDATE() AS DATE)) / 30 BETWEEN 4  AND 6 THEN  'DE 4 A 6 MESES'
			WHEN DATEDIFF(DAY, DATA_ULT_VAGA_PUBLICADA, CAST(GETDATE() AS DATE)) / 30 BETWEEN 7  AND 9 THEN  'DE 7 A 9 MESES'
			WHEN DATEDIFF(DAY, DATA_ULT_VAGA_PUBLICADA, CAST(GETDATE() AS DATE)) / 30 BETWEEN 10 AND 12 THEN 'DE 10 A 12 MESES'
			WHEN DATEDIFF(DAY, DATA_ULT_VAGA_PUBLICADA, CAST(GETDATE() AS DATE)) / 30 > 12 THEN 'ACIMA DE 12 MESES'
		END
FROM	[VAGAS_DW].[TMP_CLIENTES] AS A
WHERE	A.EX_CLIENTE = 0
		AND A.CONTEM_FIT = 1 ;

-- CLIENTES INADIMPLENTES
UPDATE VAGAS_DW.TMP_CLIENTES SET TEMPO_INATIVIDADE = 'Cliente Bloqueado'
FROM VAGAS_DW.TMP_CLIENTES A
WHERE A.EX_CLIENTE = 0
AND CONTEM_FIT = 1
AND EXISTS ( SELECT * 
			 FROM VAGAS_DW.OPORTUNIDADES 
			 WHERE CONTAID = A.CONTA_ID
			 AND TIPO_CONTA IN ('cliente_bloqueado_inadimplencia','cliente_bloqueado') )

-- CLIENTES SEM CONTA MARCADA SEM OPORTUNIDADE (NO DW)
UPDATE VAGAS_DW.TMP_CLIENTES  SET CONTA_ID = B.CONTA_ID
FROM VAGAS_DW.TMP_CLIENTES  A
INNER JOIN ( SELECT COD_CLI,
					'No_opp_' + CONVERT(VARCHAR,ROW_NUMBER() OVER (ORDER BY COD_CLI)) AS CONTA_ID
			 FROM VAGAS_DW.TMP_CLIENTES 
			 WHERE CONTA_ID IS NULL ) B ON B.COD_CLI = A.COD_CLI
WHERE A.CONTA_ID IS NULL 
AND NOT EXISTS ( SELECT * 
				 FROM VAGAS_DW.OPORTUNIDADES
				 WHERE ID_VAGAS = A.CLIENTE_VAGAS ) 

-- CLIENTES SEM CONTA COM ALGUMA OPORTUNIDADE EXISTENTE
UPDATE VAGAS_DW.TMP_CLIENTES SET CONTA_ID = B.CONTAID
FROM VAGAS_DW.TMP_CLIENTES A
CROSS APPLY ( SELECT TOP 1 CONTAID 
			  FROM VAGAS_DW.OPORTUNIDADES
			  WHERE ID_VAGAS = A.CLIENTE_VAGAS ) B
WHERE A.CONTA_ID IS NULL 

-- PERFIS DUPLICADOS (CONSIDERAR ÚLTIMO)
-- EX_CLIENTES
DELETE VAGAS_DW.TMP_CLIENTES 
FROM VAGAS_DW.TMP_CLIENTES A
WHERE CONTA_ID IN ( SELECT CONTA_ID FROM VAGAS_DW.TMP_CLIENTES GROUP BY CONTA_ID HAVING COUNT(*) > 1 )
AND EX_CLIENTE = 1

-- MANTER APENAS ÚLTIMO PERFIL CADASTRADO
DELETE VAGAS_DW.TMP_CLIENTES  
FROM VAGAS_DW.TMP_CLIENTES A
WHERE CONTA_ID IN ( SELECT CONTA_ID FROM VAGAS_DW.TMP_CLIENTES  GROUP BY CONTA_ID HAVING COUNT(*) > 1 )
AND DATA_CONTRATO_MANUT <> ( SELECT MAX(DATA_CONTRATO_MANUT) FROM VAGAS_DW.TMP_CLIENTES WHERE CONTA_ID = A.CONTA_ID )
AND A.TIPO_CLIENTE_MANUT != 'FIT' ;

-- REMOVER PERFIL DUPLICADO PELO ID_VAGAS:
DELETE VAGAS_DW.TMP_CLIENTES
FROM VAGAS_DW.TMP_CLIENTES A
WHERE CONTA_ID IN ( SELECT CONTA_ID FROM VAGAS_DW.TMP_CLIENTES  GROUP BY CONTA_ID HAVING COUNT(*) > 1 )
AND A.TIPO_CLIENTE_MANUT != 'FIT' ;


-- ATUALIZAR CLUSTER
UPDATE VAGAS_DW.TMP_CLIENTES SET CLUSTER = B.CLUSTER
FROM VAGAS_DW.TMP_CLIENTES A
INNER JOIN VAGAS_DW.CLUSTER_CLIENTES B ON B.COD_CLI = A.COD_CLI

-- Remove clientes provindos do CRM, que passaram a existir após a atribuição do id da conta, a partir da última oportunidade:
DELETE	FROM [VAGAS_DW].[TMP_CLIENTES]
FROM	[VAGAS_DW].[TMP_CLIENTES] AS A
WHERE	A.FONTE = 'CRM'
		AND EXISTS (SELECT	1
					FROM	[VAGAS_DW].[TMP_CLIENTES] AS A1
					WHERE	A.CONTA_ID = A1.CONTA_ID
							AND (A1.FONTE = 'MANUT' OR A1.FONTE IS NULL)) ;

-- Limpar dados da tabela fato
TRUNCATE TABLE VAGAS_DW.CLIENTES 

-- Carregar Tabela Fato
INSERT INTO VAGAS_DW.CLIENTES
SELECT * FROM VAGAS_DW.TMP_CLIENTES

---- Inserir dados na base historica
--INSERT INTO VAGAS_DW.CLIENTES_HISTORICO 
--SELECT * FROM VAGAS_DW.CLIENTES 

DECLARE @DT_REFERENCIA_INICIO SMALLDATETIME,
		@DT_REFERENCIA_FIM SMALLDATETIME

SELECT @DT_REFERENCIA_INICIO = MIN(DATA_REFERENCIA),
	   @DT_REFERENCIA_FIM = MAX(DATA_REFERENCIA)
FROM VAGAS_DW.TMP_CLIENTES

---- expurgar datas de referencia antigas (deixar apenas a últ. de cada mes)
---- apenas a base historico 
--DELETE VAGAS_DW.CLIENTES_HISTORICO 
--FROM VAGAS_DW.CLIENTES_HISTORICO A 
--WHERE DATA_REFERENCIA <> ( SELECT MAX(DATA_REFERENCIA) 
--              FROM VAGAS_DW.CLIENTES_HISTORICO 
--              WHERE YEAR(DATA_REFERENCIA) = YEAR(A.DATA_REFERENCIA) 
--              AND MONTH(DATA_REFERENCIA) = MONTH(A.DATA_REFERENCIA) ) 

-- Atualizar se o cliente possui "algum" contrato cadastrado 
UPDATE VAGAS_DW.CLIENTES SET FLAG_POSSUI_CONTRATO = 0
FROM VAGAS_DW.CLIENTES A
WHERE A.DATA_REFERENCIA = ( SELECT MAX(DATA_REFERENCIA) FROM VAGAS_DW.CLIENTES )
AND A.EX_CLIENTE = 0
AND ( A.CONTEM_FIT = 1 OR A.CONTEM_REDES = 1 )
AND NOT EXISTS ( SELECT * FROM VAGAS_DW.CONTRATOS
				 WHERE CONTA_ID = A.CONTA_ID )

UPDATE VAGAS_DW.CLIENTES SET FLAG_POSSUI_CONTRATO = 1
FROM VAGAS_DW.CLIENTES A
WHERE A.DATA_REFERENCIA = ( SELECT MAX(DATA_REFERENCIA) FROM VAGAS_DW.CLIENTES )
AND A.EX_CLIENTE = 0
AND ( A.CONTEM_FIT = 1 OR A.CONTEM_REDES = 1 )
AND A.FLAG_POSSUI_CONTRATO IS NULL

-- Atualização do último envio do Guia de Boas Práticas
UPDATE VAGAS_DW.CLIENTES SET RECEBEU_GUIA_BOAS_PRATICAS = 1,
							 DIAS_ULT_GUIA = DATEDIFF(DAY,B.DATA_ENVIO,GETDATE()),
							 DATA_RECEBIMENTO_GUIA_BOAS_PRATICAS = B.DATA_ENVIO
FROM VAGAS_DW.CLIENTES A
INNER JOIN VAGAS_DW.EMAILS_CRM B ON B.CONTA = A.CLIENTE_CRM 
								AND B.TIPO_ANEXO = 'Guia Boas Práticas'
								AND B.DATA_ENVIO = ( SELECT MAX(DATA_ENVIO) 
													 FROM VAGAS_DW.EMAILS_CRM
													 WHERE CONTA = A.CLIENTE_CRM 
													 AND TIPO_ANEXO = 'Guia Boas Práticas' )
WHERE DATA_REFERENCIA = ( SELECT MAX(DATA_REFERENCIA) FROM VAGAS_DW.CLIENTES )
AND EX_CLIENTE = 0

UPDATE VAGAS_DW.CLIENTES SET QTD_VAGAS_COM_ERRO_POS_GUIA = B.QTD_VAGAS
FROM VAGAS_DW.CLIENTES A
OUTER APPLY ( SELECT COUNT(*) AS QTD_VAGAS
			  FROM VAGAS_DW.VAGAS_VALIDACAO A1
			  INNER JOIN VAGAS_DW.VAGAS B1 ON B1.VAGAS_Cod_Vaga = A1.COD_VAGA
			  WHERE B1.COD_CLI = A.COD_CLI
			  AND B1.DATA_PUBLICACAO > A.DATA_RECEBIMENTO_GUIA_BOAS_PRATICAS
			  AND A1.TIPO_AJUSTE <> 'Sem Ajuste'
			  AND B1.VEICULACAO_SUSPENSA = 'SIM'
			  ) B
WHERE DATA_REFERENCIA = ( SELECT MAX(DATA_REFERENCIA) FROM VAGAS_DW.CLIENTES )
AND EX_CLIENTE = 0
AND RECEBEU_GUIA_BOAS_PRATICAS = 1

-- Atualização do Contem_VET baseado na tabela de perfil de uso (query gerada pela Beth)
UPDATE VAGAS_DW.CLIENTES SET CONTEM_VET = 1
FROM VAGAS_DW.CLIENTES A
WHERE A.DATA_REFERENCIA = ( SELECT MAX(DATA_REFERENCIA) FROM VAGAS_DW.CLIENTES )
AND A.EX_CLIENTE = 0
AND A.CONTEM_VET = 0
AND EXISTS ( SELECT * FROM VAGAS_DW.TMP_CLIENTES_PERFIL_USO WHERE COD_CLI = A.COD_CLI AND QTD_VAGAS_ETALENT > 0 )

-- Atualiza o campo EX_CLIENTE, para contas provindas do CRM:
UPDATE [VAGAS_DW].[CLIENTES]
SET EX_CLIENTE = 1
FROM [VAGAS_DW].[CLIENTES] AS A
WHERE A.FONTE = 'CRM'


-- CARTEIRA PROSPECÇÃO:
UPDATE	[VAGAS_DW].[CLIENTES]
SET		CARTEIRA = 'PROSPECÇÃO'
FROM	[VAGAS_DW].[CLIENTES] AS A
WHERE	(A.EX_CLIENTE = 1
		AND LEFT(A.CONTA_ID, 6) != 'No_opp'
		AND NOT EXISTS (SELECT	1 
						FROM	[VAGAS_DW].[OPORTUNIDADES] AS A1 
						WHERE	A.CONTA_ID = A1.CONTAID
								AND A1.FASE IN ('proposta_comercial', 'prospeccao', 'avaliacao_interna', 'contrato'))) -- Regra da carteira de prospecção
		OR (A.EX_CLIENTE = 0
			AND LEFT(A.CONTA_ID, 6) != 'No_opp'
			AND A.CONTEM_FIT = 0
			AND NOT EXISTS (SELECT	1 
							FROM	[VAGAS_DW].[OPORTUNIDADES] AS A1 
							WHERE	A.CONTA_ID = A1.CONTAID
									AND A1.FASE IN ('proposta_comercial', 'prospeccao', 'avaliacao_interna', 'contrato'))) ;


-- CARTEIRA NEGOCIAÇÃO:
UPDATE	[VAGAS_DW].[CLIENTES]
SET		CARTEIRA = 'NEGOCIAÇÃO'
FROM	[VAGAS_DW].[CLIENTES] AS A
WHERE	(A.EX_CLIENTE = 1
		AND LEFT(A.CONTA_ID, 6) != 'No_opp'
		AND EXISTS (SELECT	1
					FROM	[VAGAS_DW].[OPORTUNIDADES] AS A1
					WHERE	A.CONTA_ID = A1.CONTAID
							AND A1.FASE IN ('proposta_comercial', 'prospeccao', 'avaliacao_interna', 'contrato'))) -- Regra da carteira de Negociação
		OR (A.EX_CLIENTE = 0
			AND LEFT(A.CONTA_ID, 6) != 'No_opp'
			AND A.CONTEM_FIT = 0
			AND EXISTS (SELECT	1
						FROM	[VAGAS_DW].[OPORTUNIDADES] AS A1
						WHERE	A.CONTA_ID = A1.CONTAID
								AND A1.FASE IN ('proposta_comercial', 'prospeccao', 'avaliacao_interna', 'contrato'))) ;


-- CARTEIRA DE RELACIONAMENTO:
UPDATE	[VAGAS_DW].[CLIENTES]
SET		CARTEIRA = 'RELACIONAMENTO'
FROM	[VAGAS_DW].[CLIENTES] AS A
WHERE	A.EX_CLIENTE = 0
		 AND LEFT(A.CONTA_ID, 6) != 'No_opp'
		 AND A.CONTEM_FIT = 1 ;

---- CARTEIRA DE CRÉDITOS:
--UPDATE	[VAGAS_DW].[CLIENTES]
--SET		CARTEIRA = 'CRÉDITOS'
--FROM	[VAGAS_DW].[CLIENTES] AS A
--WHERE	A.EX_CLIENTE = 0
--		AND LEFT(A.CONTA_ID, 6) != 'No_opp'
--		AND A.CONTEM_FIT = 0 ;

-- Campo Mercado provindo do CRM:
UPDATE	[VAGAS_DW].[CLIENTES]
SET		MERCADO = (SELECT	UPPER(A1.MERCADO)
				   FROM		[VAGAS_DW].[CONTAS_CRM] AS A1
				   WHERE	A.CONTA_ID = A1.CONTA_ID)
FROM	[VAGAS_DW].[CLIENTES] AS A
WHERE	EXISTS (SELECT	1
				FROM	[VAGAS_DW].[CONTAS_CRM] AS A1
				WHERE	A.CONTA_ID = A1.CONTA_ID
						AND ISNULL(A1.MERCADO, '') != '') ;

-- GR da CONTA:
UPDATE	[VAGAS_DW].[CLIENTES]
SET		GR = (SELECT	A1.PROPRIETARIO_CONTA
			  FROM		[VAGAS_DW].[CONTAS_CRM] AS A1
			  WHERE		A.CONTA_ID = A1.CONTA_ID
			  UNION ALL
			  SELECT	A2.PROPRIETARIO_CONTA
			  FROM		[VAGAS_DW].[CONTAS_MEMBRO_CRM] AS A2
			  WHERE		A.CONTA_ID = A2.CONTA_ID)
FROM	[VAGAS_DW].[CLIENTES] AS A ;

-- Hierarquia da CONTA no CRM:
UPDATE	[VAGAS_DW].[CLIENTES]
SET		HIERARQUIA_CONTA
					 = (SELECT CASE WHEN SUBQUERY.CONTA_ID_PAI IS NULL THEN 'PAI' ELSE 'FILHO' END AS HIERARQUIA_CONTA
						FROM	(
									SELECT	A1.CONTA_ID ,
											NULL AS CONTA_ID_PAI
									FROM	[VAGAS_DW].[CONTAS_CRM] AS A1
									UNION ALL
									SELECT	A2.CONTA_ID ,
											A2.CONTA_ID_PAI
									FROM	[VAGAS_DW].[CONTAS_MEMBRO_CRM] AS A2) AS SUBQUERY
					 WHERE	A.CONTA_ID = SUBQUERY.CONTA_ID)
FROM	[VAGAS_DW].[CLIENTES] AS A

--------------------------------------
-- FLAG_TEVE_ATIVIDADE MERCADO SUPERA:
--------------------------------------
DECLARE	@DATA_INICIO SMALLDATETIME = DATEADD(MONTH, DATEPART(MONTH, CONVERT(DATE, GETDATE())) * -1, DATEADD(DAY, (DATEPART(DAY, CAST(GETDATE() AS DATE)) *-1) +1, CAST(GETDATE() AS DATE))) ,
		@DATA_FIM SMALLDATETIME = DATEFROMPARTS(DATEPART(YEAR, CAST(GETDATE() AS DATE)) + 1, '01', '01');

-- DROP TABLE #TMP_ATIVIDADE_SUPERA ;
SELECT	CONTA_ID ,
		CLIENTE_CRM ,
		QTD_REUNIOES_SUPERA_REL, QTD_EMAILS_SUPERA_REL, QTD_LIGACOES_SUPERA_REL ,
		(QTD_REUNIOES_SUPERA_REL + QTD_EMAILS_SUPERA_REL + QTD_LIGACOES_SUPERA_REL) AS SOMA_ATIVIDADE ,
		IIF((QTD_REUNIOES_SUPERA_REL + QTD_EMAILS_SUPERA_REL + QTD_LIGACOES_SUPERA_REL) > 0, 'SIM', 'NÃO') AS TEVE_ATIVIDADE
INTO	#TMP_ATIVIDADE_SUPERA
FROM	(
SELECT	A.CONTA_ID ,
		A.CLIENTE_CRM ,
		COUNT(DISTINCT B.ID_REUNIAO) AS QTD_REUNIOES_SUPERA_REL ,
		COUNT(DISTINCT C.ID_EMAIL) AS QTD_EMAILS_SUPERA_REL ,
		COUNT(DISTINCT E.ID_LIGACAO) AS QTD_LIGACOES_SUPERA_REL
FROM	[VAGAS_DW].[CLIENTES] AS A		LEFT OUTER JOIN [VAGAS_DW].[REUNIOES] AS B ON A.CONTA_ID = B.CONTAID AND B.DATA_INICIO >= @DATA_INICIO AND B.DATA_INICIO < @DATA_FIM AND B.USUARIO_PARTICIPANTE IN (SELECT A1.VENDEDOR FROM [VAGAS_DW].[GRUPO_VENDEDORES] AS A1 WHERE GRUPO_VENDEDOR = 'SU,RL - Supera Relacionamento') AND B.STATUS = 'REALIZADO'
										LEFT OUTER JOIN [VAGAS_DW].[EMAILS_CRM] AS C ON A.CONTA_ID = C.CONTA_ID AND C.DATA_ENVIO >= @DATA_INICIO AND C.DATA_ENVIO < @DATA_FIM AND C.USUARIO_CADASTRO IN (SELECT A1.VENDEDOR FROM [VAGAS_DW].[GRUPO_VENDEDORES] AS A1 WHERE GRUPO_VENDEDOR = 'SU,RL - Supera Relacionamento')
										LEFT OUTER JOIN [VAGAS_DW].[LIGACOES_CRM] AS E ON A.CONTA_ID = E.CONTA_ID AND E.DATA_FIM >= @DATA_INICIO AND E.DATA_FIM < @DATA_FIM AND E.USUARIO_CADASTRO IN (SELECT A1.VENDEDOR FROM [VAGAS_DW].[GRUPO_VENDEDORES] AS A1 WHERE GRUPO_VENDEDOR = 'SU,RL - Supera Relacionamento') AND E.TIPO_CONTATO IN ('Accounts', 'Opportunities')
WHERE	A.EX_CLIENTE = 0
		AND A.MERCADO = 'SUPERA'
GROUP BY
		A.CONTA_ID ,
		A.CLIENTE_CRM ) AS SUBQUERY ;


UPDATE	[VAGAS_DW].[CLIENTES]
SET		TEVE_ATIVIDADE_SUPERA = (SELECT	A1.TEVE_ATIVIDADE
								 FROM	#TMP_ATIVIDADE_SUPERA AS A1
								 WHERE	A.CONTA_ID = A1.CONTA_ID)
FROM	[VAGAS_DW].[CLIENTES] AS A
WHERE	A.MERCADO = 'SUPERA'
		AND A.EX_CLIENTE = 0 ;

-- Atualizar TEVE_ATIVIDADE_SUPERA com "NÃO", para campos que ficaram em branco:
UPDATE	[VAGAS_DW].[CLIENTES]
SET		TEVE_ATIVIDADE_SUPERA = 'NÃO'
FROM	[VAGAS_DW].[CLIENTES] AS A
WHERE	ISNULL(A.TEVE_ATIVIDADE_SUPERA, '') = '' ;


-- Atualização de informações contratuais (PAINEL DO CLIENTE):
-- DROP TABLE #TMP_INF_CONTRAT ;
WITH CTE_SOURCE (CONTA_ID, TIPO_RENOVACAO) 
AS
	(
		SELECT	DISTINCT A.CONTA_ID ,
				A.TIPO_RENOVACAO
		FROM	[VAGAS_DW].[CONTRATOS] AS A
		WHERE	EXISTS (SELECT	1
						FROM	[VAGAS_DW].[CLIENTES] AS A1
						WHERE	A.CONTA_ID = A1.CONTA_ID
								AND A1.EX_CLIENTE = 0
								AND A1.CARTEIRA = 'RELACIONAMENTO')
				AND A.[STATUS] IN ('ativado_em_processo', 'ativado_digital', 'ativado_aceite_online', 'ativado', 'ativado_sem_contrato')
				AND ISNULL(A.TIPO_RENOVACAO, '') != '' ) ,
	CTE_SOURCE_NUM
AS (
		SELECT	CTE_SOURCE.CONTA_ID ,
				CTE_SOURCE.TIPO_RENOVACAO ,
				ROW_NUMBER() OVER(PARTITION BY CTE_SOURCE.CONTA_ID ORDER BY CTE_SOURCE.CONTA_ID ASC) AS CONTROLE
		FROM	CTE_SOURCE ) ,
	CTE_CONCAT_RESULT
AS (
		SELECT	DISTINCT A.CONTA_ID ,
				 (SELECT	STUFF( ' , ' + UPPER(A1.TIPO_RENOVACAO), 1, 1, '')
				  FROM	CTE_SOURCE_NUM  AS A1
				  WHERE	A.CONTA_ID = A1.CONTA_ID
				  FOR XML PATH('')) AS TIPO_RENOVACAO
		FROM	CTE_SOURCE_NUM AS A )


SELECT	A.CONTA_ID ,
		A.CLIENTE_VAGAS ,
		B.ULT_INIC_VIG AS DATA_INICIO_CONTRATO ,
		B.ULT_FIM_VIG AS DATA_FIM_CONTRATO ,
		ISNULL(B.DOC_ULT_CONTRATO, C.VIA_CONTRATO) AS URL_VIA_CONTRATO ,
		IIF(ISNULL(B.DOC_ULT_CONTRATO, C.VIA_CONTRATO) IS NOT NULL, 'SIM', 'NÃO') AS POSSUI_VIA_FISICA ,
		D.TIPO_RENOVACAO ,
		DATEADD(MONTH, -3, ULT_FIM_VIG) AS ABORDAR_RENOV_EM
INTO	#TMP_INF_CONTRAT
FROM	[VAGAS_DW].[CLIENTES] AS A		CROSS APPLY (SELECT	TOP 1	A1.ID_CONTRATO AS ID_ULT_CONTRATO ,
																	IIF(A1.DOCUMENTO = 'http://' OR A1.DOCUMENTO = 'https://', NULL, A1.DOCUMENTO) AS DOC_ULT_CONTRATO ,
																	A1.INICIO_VIGENCIA AS ULT_INIC_VIG ,
																	A1.FIM_VIGENCIA AS ULT_FIM_VIG
													 FROM	[VAGAS_DW].[CONTRATOS] AS A1
													 WHERE	A.CONTA_ID = A1.CONTA_ID
															AND A1.FIM_VIGENCIA > DATEADD(DAY, 1, CAST(GETDATE() AS DATE))
													 ORDER BY
															A1.FIM_VIGENCIA DESC ,
															A1.INICIO_VIGENCIA DESC ) AS B

										OUTER APPLY (SELECT	TOP 1 IIF(A1.DOCUMENTO = 'http://' OR A1.DOCUMENTO = 'https://', NULL, A1.DOCUMENTO) AS VIA_CONTRATO ,
																  A1.[STATUS] AS STATUS_VIA_CONTRATO
													 FROM	[VAGAS_DW].[CONTRATOS] AS A1
													 WHERE	A.CONTA_ID = A1.CONTA_ID
															AND ISNULL(A1.Documento, '') != ''
															AND A1.[STATUS] IN('ativado_em_processo', 'ativado_digital', 'ativado_aceite_online', 'ativado', 'ativado_sem_contrato')) AS C 
										LEFT OUTER JOIN CTE_CONCAT_RESULT AS D ON A.CONTA_ID = D.CONTA_ID
																			
WHERE	A.EX_CLIENTE = 0
		AND A.CARTEIRA = 'RELACIONAMENTO'
		AND EXISTS (SELECT	1
					FROM	[VAGAS_DW].[CONTRATOS] AS A1
					WHERE	A.CONTA_ID = A1.CONTA_ID
							AND A1.[STATUS] IN ('ativado_em_processo', 'ativado_digital', 'ativado_aceite_online', 'ativado', 'ativado_sem_contrato')) ;

UPDATE	[VAGAS_DW].[CLIENTES]
SET		DATA_INICIO_CONTRATO = B.DATA_INICIO_CONTRATO ,
		DATA_FIM_CONTRATO = B.DATA_FIM_CONTRATO ,
		POSSUI_VIA_FISICA = B.POSSUI_VIA_FISICA ,
		TIPO_RENOVACAO = B.TIPO_RENOVACAO ,
		ABORDAR_RENOV_EM = B.ABORDAR_RENOV_EM
FROM	[VAGAS_DW].[CLIENTES] AS A		INNER JOIN #TMP_INF_CONTRAT AS B ON A.CONTA_ID = B.CONTA_ID ;


-- Atualização de informações de treinamento (PAINEL DO CLIENTE):
-- DROP TABLE #TMP_INF_TREINAMENT ;
SELECT	A.CONTA_ID ,
		IIF(B.DATA_REALIZACAO_INICIO <= DATEADD(DAY, 30, A.DATA_INICIO_CONTRATO), 'SIM', 'NÃO') AS TREINAMENTO_IMPLANTACAO ,
		IIF(B.DATA_REALIZACAO_INICIO <= DATEADD(DAY, 30, A.DATA_INICIO_CONTRATO), B.DATA_REALIZACAO_INICIO, NULL) AS DATA_REALIZACAO ,
		IIF(B.DATA_REALIZACAO_INICIO <= DATEADD(DAY, 30, A.DATA_INICIO_CONTRATO), B.QTD_PARTICIPANTES, NULL) AS QTD_PARTICIPANTES
INTO	#TMP_INF_TREINAMENT
FROM	[VAGAS_DW].[CLIENTES] AS A		OUTER APPLY (SELECT	TOP 1 A1.ID_TREINAMENTO ,
																  CONVERT(SMALLDATETIME, CONVERT(DATE, A1.DATA_REALIZACAO_INICIO)) AS DATA_REALIZACAO_INICIO ,
																  COUNT(CASE 
																			WHEN A2.STATUS_PARTICIPANTE = 'PARTICIPOU' 
																				THEN A2.ID_PARTICIPANTE 
																				ELSE NULL 
																		END) AS QTD_PARTICIPANTES
													 FROM	[VAGAS_DW].[TREINAMENTOS_CRM] AS A1	LEFT OUTER JOIN [VAGAS_DW].[TREINAMENTOS_PARTICIPANTES_CRM] AS A2 
																								ON A1.ID_TREINAMENTO = A2.ID_TREINAMENTO
													 WHERE	A.CLIENTE_VAGAS COLLATE SQL_Latin1_General_CP1_CS_AS = A1.CLIENTE_VAGAS COLLATE SQL_Latin1_General_CP1_CS_AS
															AND A1.[STATUS] = 'REALIZADO'
															AND A1.DATA_REALIZACAO_INICIO >= A.DATA_INICIO_CONTRATO -- Treinamento a partir da DATA_INICIO_CONTRATO
													 GROUP BY
															A1.ID_TREINAMENTO ,
															CONVERT(SMALLDATETIME, CONVERT(DATE, A1.DATA_REALIZACAO_INICIO)) 
													 ORDER BY
															DATA_REALIZACAO_INICIO DESC) AS B
WHERE	A.EX_CLIENTE = 0
		AND A.CARTEIRA = 'RELACIONAMENTO'
		AND A.FLAG_CLIENTE_NOVO = 1 ;

UPDATE	[VAGAS_DW].[CLIENTES]
SET		TREINAMENTO_IMPLANTACAO = B.TREINAMENTO_IMPLANTACAO ,
		DATA_REALIZACAO = B.DATA_REALIZACAO ,
		QTD_PARTICIPANTES = B.QTD_PARTICIPANTES
FROM	[VAGAS_DW].[CLIENTES] AS A		INNER JOIN #TMP_INF_TREINAMENT AS B ON A.CONTA_ID = B.CONTA_ID ;


-- Atualização de informações de implantação (PAINEL DO CLIENTE):
-- DROP TABLE #TMP_INF_IMPLANT ;
SELECT	A.CONTA_ID ,
		B.STATUS_IMPLANTACAO ,
		B.DATA_CONC_IMPLANTACAO
INTO	#TMP_INF_IMPLANT
FROM	[VAGAS_DW].[CLIENTES] AS A		OUTER APPLY (SELECT	TOP 1	A1.STATUS_DEMANDA AS STATUS_IMPLANTACAO ,
																	A1.DATA_CONC_IMPLANTACAO AS DATA_CONC_IMPLANTACAO
													 FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A1
													 WHERE	A.CLIENTE_CRM COLLATE SQL_Latin1_General_CP1_CS_AS = A1.CLIENTE COLLATE SQL_Latin1_General_CP1_CS_AS
															AND A1.EQUIPE_PROJETO = 'Implantação'
															AND A1.FLAG_ROOT = 1
															AND A1.FILA = 'NOVO CLIENTE VAGAS E-PARTNER'
													 ORDER BY
															A1.DATA_CADASTRAMENTO DESC) AS B
					
WHERE	A.EX_CLIENTE = 0
		AND A.CARTEIRA = 'RELACIONAMENTO'
		AND A.FLAG_CLIENTE_NOVO = 1 ;

UPDATE	[VAGAS_DW].[CLIENTES]
SET		STATUS_IMPLANTACAO = B.STATUS_IMPLANTACAO ,
		DATA_CONC_IMPLANTACAO = B.DATA_CONC_IMPLANTACAO
FROM	[VAGAS_DW].[CLIENTES] AS A		INNER JOIN #TMP_INF_IMPLANT AS B ON A.CONTA_ID = B.CONTA_ID ;

-- Atualização do campo que informa se o cliente possui NUM_PEDIDO no FATURAMENTO:
UPDATE	[VAGAS_DW].[CLIENTES]
SET		NUM_PD_NA_NF = B.NUM_PD_NA_NF
FROM	[VAGAS_DW].[CLIENTES] AS A		INNER JOIN [VAGAS_DW].[TMP_NUM_PED_FAT] AS B ON A.CONTA_ID = B.CONTA_ID
WHERE	A.EX_CLIENTE = 0
		AND A.CARTEIRA = 'RELACIONAMENTO' ;

---------------------------------------------------------------
-- COMPOSIÇÃO DO FATURAMENTO (FATURAMENTO) - PAINEL DO CLIENTE:
---------------------------------------------------------------
-- Valores referente a composição do Painel do Cliente:
-- DROP TABLE #TMP_ULT_FATURAMENTO_PRODUTO
SELECT	A.COD_CLI_CRM ,
		A.DATA_EMISSAO ,
		SUM(CASE
				WHEN A.PRODUTO IN ('VAGAS REDES', 'VAGAS FIT ANUID', 'VAGAS FIT LIC', 'VAGAS RECRUTADOR', 'VAGAS RECRUTADOR ANUID') 
					THEN A.VALOR
				ELSE NULL
			END) AS VALOR_SOFT_M ,
		SUM(CASE
				WHEN A.PRODUTO IN ('COMPL VET', 'COMPL SMS', 'VAGAS PET', 'COMPL HOMEPAGE', 'COMPL AVALIACAO', 'COMPL SMS')
					THEN A.VALOR
				ELSE NULL
			END) AS VALOR_COMPL_M ,
		SUM(CASE
				WHEN A.PRODUTO IN ('VAGAS FLEX PAP', 'VAGAS FIT EI', 'VAGAS FIT REV', 'VAGAS PONTUAL')
					THEN A.VALOR
				ELSE NULL
			END) AS VALOR_SOFT_P ,
		SUM(CASE
				WHEN A.PRODUTO IN ('VAGAS PETP', 'PET', 'VETP', 'COMPL AVALIACAOP', 'COMPL SMSP', 'COMPL PORTAL')
					THEN A.VALOR
				ELSE NULL
			END) AS VALOR_COMPL_P ,
		SUM(CASE
				WHEN A.PRODUTO IN ('SERV DSM', 'SERV DSM - 02800', 'DSMCORT', 'DSMFRANQ', 'SERV DSM', 'SERV TREIN')
					THEN A.VALOR
				ELSE NULL
			END) AS VALOR_SERV_P ,
		ROW_NUMBER() OVER(PARTITION BY A.COD_CLI_CRM ORDER BY A.COD_CLI_CRM ASC) AS CONTROLE
INTO	#TMP_ULT_FATURAMENTO_PRODUTO
FROM	[VAGAS_DW].[FATURAMENTO] AS A
WHERE	EXISTS (SELECT	1
				FROM	[VAGAS_DW].[CLIENTES] AS A1
				WHERE	A.COD_CLI_CRM = A1.CONTA_ID
						AND A1.EX_CLIENTE = 0
						AND A1.CARTEIRA = 'RELACIONAMENTO' )
		AND A.DATA_EMISSAO = (SELECT	MAX(A1.DATA_EMISSAO)
							  FROM		[VAGAS_DW].[FATURAMENTO] AS A1
							  WHERE		A.COD_CLI_CRM = A1.COD_CLI_CRM
										AND A.PRODUTO = A1.PRODUTO )
GROUP BY
		A.COD_CLI_CRM ,
		A.DATA_EMISSAO ;


-- Faturamento nos últimos 2 meses:
-- DROP TABLE #TMP_FATURAMENTO_2_MESES ;
SELECT	A.COD_CLI_CRM ,
		A.DATA_EMISSAO ,
		A.VALOR_SOFT_M ,
		A.VALOR_COMPL_M ,
		A.VALOR_SOFT_P ,
		A.VALOR_COMPL_P ,
		A.VALOR_SERV_P
INTO	#TMP_FATURAMENTO_2_MESES
FROM	#TMP_ULT_FATURAMENTO_PRODUTO AS A
WHERE	DATA_EMISSAO >= DATEADD(DAY, 1, DATEADD(DAY, DATEPART(DAY, DATEADD(MONTH, -2, CAST(GETDATE() AS DATE))) *-1, DATEADD(MONTH, -2, CAST(GETDATE() AS DATE)))) ;


-- Agrupamento dos valores faturados nos últimos 2 meses por cliente:
-- DROP TABLE #TMP_FATURAMENTO ;
SELECT	A.COD_CLI_CRM ,
		MAX(A.DATA_EMISSAO) AS ULT_DATA_EMISSAO ,
		SUM(A.VALOR_SOFT_M) AS VALOR_SOFT_M ,
		SUM(A.VALOR_COMPL_M) AS VALOR_COMPL_M ,
		SUM(A.VALOR_SOFT_P) AS VALOR_SOFT_P ,
		SUM(A.VALOR_COMPL_P) AS VALOR_COMPL_P ,
		SUM(A.VALOR_SERV_P) AS VALOR_SERV_P
INTO	#TMP_FATURAMENTO
FROM	#TMP_FATURAMENTO_2_MESES AS A
GROUP BY
		A.COD_CLI_CRM ;



-- Performance:
CREATE NONCLUSTERED INDEX IDX_#TMP_FATURAMENTO_COD_CLI_CRM ON #TMP_FATURAMENTO (COD_CLI_CRM) ;

UPDATE	[VAGAS_DW].[CLIENTES]
SET		VALOR_SOFT_M = B.VALOR_SOFT_M ,
		VALOR_COMPL_M = B.VALOR_COMPL_M ,
		VALOR_SOFT_P = B.VALOR_SOFT_P ,
		VALOR_COMPL_P = B.VALOR_COMPL_P ,
		VALOR_SERV_P = B.VALOR_SERV_P
FROM	[VAGAS_DW].[CLIENTES] AS A		INNER JOIN #TMP_FATURAMENTO AS B ON A.CONTA_ID = B.COD_CLI_CRM
WHERE	A.EX_CLIENTE = 0
		AND A.CARTEIRA = 'RELACIONAMENTO' ;

-----------------------------------------
-- Atualização da Intensidade do cliente:
-----------------------------------------
UPDATE	[VAGAS_DW].[CLIENTES]
SET		INTENSIDADE = B.INTENSIDADE
FROM	[VAGAS_DW].[CLIENTES] AS A		INNER JOIN [VAGAS_DW].[CLIENTES_INTENSIDADE] AS B ON A.CLIENTE_CRM = B.CONTA_CRM
WHERE	A.EX_CLIENTE = 0
		AND A.CARTEIRA = 'RELACIONAMENTO' ;


-- Limpar inconsistências:
DELETE FROM [VAGAS_DW].[CLIENTES]
WHERE	CONTA_ID IS NULL
		AND COD_CLI IS NULL ;

----------------------------------------------------------------
-- COMPOSIÇÃO DO FATURAMENTO (OPORTUNIDADE) - PAINEL DO CLIENTE:
----------------------------------------------------------------
-- DROP TABLE #TMP_OPORTUNIDADE ;
-- Composição do faturamento - OPORTUNIDADES:
SELECT	A.CONTAID ,
		SUM(CASE
				WHEN A.PRODUTO IN ('VAGAS FIT ANUID', 'VAGAS FIT LIC', 'VAGAS REDES', 'VAGAS RECRUTADOR', 'FIT', 'VREDES')
					THEN A.ValorProdutoFINAL
				ELSE NULL
			END) AS VAL_OPP_SOFT_M ,
		SUM(CASE
				WHEN A.PRODUTO IN ('VETM', 'SMS', 'PET', 'COMPL AVALIACAOM', 'COMPL SMSM', 'VAGAS PETM', 'COMPL HOMEPAGE')
					THEN A.ValorProdutoFINAL
				ELSE NULL
			END) AS VAL_OPP_COMPL_M ,

		SUM(CASE
				WHEN A.PRODUTO IN ('VAGAS PONTUAL', 'VAGAS FIT EI', 'VAGAS FIT REV', 'EI', 'REV')
					THEN A.ValorProdutoFINAL
				ELSE NULL
			END) AS VAL_OPP_SOFT_P ,

		SUM(CASE
			WHEN A.PRODUTO IN ('VETP', 'COMPL EBPORT', 'SMS', 'PET', 'COMPL AVALIACAOP', 'COMPL PORTAL', 'COMPL SMSP', 'VAGAS PETP')
				THEN A.ValorProdutoFINAL
			ELSE NULL
		END) AS VAL_OPP_COMPL_P ,

		SUM(CASE
			WHEN A.PRODUTO IN ('DSMCORT', 'DSMFRANQ', 'SERV DSM', 'SERV TREIN', 'SERV DSM CORTESIA', 'SERV DSM FRANQUIA')
				THEN A.ValorProdutoFINAL
			ELSE NULL
		END) AS VAL_OPP_SERV_P 
INTO	#TMP_OPORTUNIDADE
FROM	[VAGAS_DW].[OPORTUNIDADES] AS A
WHERE	A.PROPOSTA = A.CONTAPROPOSTAAPROV
		AND A.FECHADO_GANHO = 1
		AND A.RECORRENTE = 1
		AND EXISTS (SELECT	1
					FROM	[VAGAS_DW].[CLIENTES] AS A1
					WHERE	A.CONTAID = A1.CONTA_ID
							AND A1.EX_CLIENTE = 0
							AND A1.CARTEIRA = 'RELACIONAMENTO' )
GROUP BY
		A.CONTAID ;

-- Performance:
CREATE NONCLUSTERED INDEX IDX_#TMP_OPORTUNIDADE_CONTAID ON #TMP_OPORTUNIDADE (CONTAID) ;


UPDATE	[VAGAS_DW].[CLIENTES]
SET		VAL_OPP_SOFT_M = B.VAL_OPP_SOFT_M ,
		VAL_OPP_COMPL_M = B.VAL_OPP_COMPL_M ,
		VAL_OPP_SOFT_P = B.VAL_OPP_SOFT_P ,
		VAL_OPP_COMPL_P = B.VAL_OPP_COMPL_P ,
		VAL_OPP_SERV_P = B.VAL_OPP_SERV_P
FROM	[VAGAS_DW].[CLIENTES] AS A		INNER JOIN #TMP_OPORTUNIDADE AS B ON A.CONTA_ID = B.CONTAID
WHERE	A.EX_CLIENTE = 0
		AND A.CARTEIRA = 'RELACIONAMENTO' ;


-- Atualiza o CONTATO_PRINCIPAL:
-- DROP TABLE #TMP_CONTATO_PRINCIPAL ;
WITH CTE_CONTATOS_CLIENTES (CONTA_ID, NOME_CONTATO, EMAIL_CONTATO, DATA_CONTATO, FONTE_CONTATO)
	AS
		(
			SELECT	A.CONTA_ID ,
					A.NOME_CONTATO ,
					A.EMAIL_CONTATO ,
					MAX(A.DATA_ALTERACAO) AS DATA_CONTATO ,
					'EMAIL' AS FONTE_CONTATO
			FROM	[VAGAS_DW].[EMAILS_CRM] AS A
			WHERE	A.CONTATO_ADM_PRINCIPAL = 'SIM'
					AND NOT (A.NOME_CONTATO IS NULL
							 OR A.EMAIL_CONTATO IS NULL)
					AND EXISTS (SELECT	1
								FROM	[VAGAS_DW].[CLIENTES] AS A1
								WHERE	A.CONTA_ID = A1.CONTA_ID
										AND A1.EX_CLIENTE = 0
										AND A1.CARTEIRA = 'RELACIONAMENTO')
					AND EXISTS (SELECT	1
								FROM	[VAGAS_DW].[GRUPO_VENDEDORES] AS A1
								WHERE	(A.USUARIO_CADASTRO = A1.VENDEDOR
										 OR A.USUARIO_ALTERACAO = A1.VENDEDOR
										 OR A.USUARIO_RESPONSAVEL = A1.VENDEDOR)
										 AND A1.GRUPO_VENDEDOR NOT IN ('Ex-funcionário', 'LEADs', 'PUBLICIDADE'))										
			GROUP BY
					A.CONTA_ID ,
					A.NOME_CONTATO ,
					A.EMAIL_CONTATO

			UNION ALL

			SELECT	A.CONTA_ID ,
					A.NOME_CONTATO ,
					A.EMAIL_CONTATO ,
					MAX(A.DATA_ALTERACAO) AS DATA_CONTATO ,
					'LIGACAO' AS FONTE_CONTATO
			FROM	[VAGAS_DW].[LIGACOES_CRM] AS A
			WHERE	A.CONTATO_ADM_PRINCIPAL = 'SIM'
					AND NOT (A.NOME_CONTATO IS NULL
							 OR A.EMAIL_CONTATO IS NULL)
					AND EXISTS (SELECT	1
								FROM	[VAGAS_DW].[CLIENTES] AS A1
								WHERE	A.CONTA_ID = A1.CONTA_ID
										AND A1.EX_CLIENTE = 0
										AND A1.CARTEIRA = 'RELACIONAMENTO')
					AND EXISTS (SELECT	1
								FROM	[VAGAS_DW].[GRUPO_VENDEDORES] AS A1
								WHERE	(A.USUARIO_CADASTRO = A1.VENDEDOR
											OR A.USUARIO_ALTERACAO = A1.VENDEDOR
											OR A.USUARIO_RESPONSAVEL = A1.VENDEDOR)
											AND A1.GRUPO_VENDEDOR NOT IN ('Ex-funcionário', 'LEADs', 'PUBLICIDADE'))
			GROUP BY
					A.CONTA_ID ,
					A.NOME_CONTATO ,
					A.EMAIL_CONTATO 
					
					
			UNION ALL
			
			SELECT	A.CONTA_ID ,
					A.NOME_CONTATO_EMAIL ,
					A.EMAIL_CONTATO ,
					MAX(A.DATA_MODIFICACAO) AS DATA_CONTATO ,
					'CASOS' AS FONTE_CONTATO
			FROM	[VAGAS_DW].[CASOS] AS A
			WHERE	A.CONTATO_ADM_PRINCIPAL = 'SIM'
					AND NOT (A.NOME_CONTATO_EMAIL IS NULL
							 OR A.EMAIL_CONTATO IS NULL)
					AND EXISTS (SELECT	1
								FROM	[VAGAS_DW].[CLIENTES] AS A1
								WHERE	A.CONTA_ID = A1.CONTA_ID
										AND A1.EX_CLIENTE = 0
										AND A1.CARTEIRA = 'RELACIONAMENTO')
			GROUP BY
					A.CONTA_ID ,
					A.NOME_CONTATO_EMAIL ,
					A.EMAIL_CONTATO)
SELECT	A.CONTA_ID ,
		ISNULL(IIF(B.NOME_CONTATO IS NULL
				   AND B.EMAIL_CONTATO IS NULL, CONVERT(VARCHAR(100), C.NOME_CONTATO), CONVERT(VARCHAR(100), B.NOME_CONTATO)), CONVERT(VARCHAR(100), D.NOME_CONTATO)) AS NOME_CONTATO ,
		ISNULL(IIF(B.NOME_CONTATO IS NULL
			       AND B.EMAIL_CONTATO IS NULL, C.EMAIL, B.EMAIL_CONTATO), D.EMAIL) AS EMAIL_CONTATO ,
		ISNULL(IIF(B.NOME_CONTATO IS NULL
			   AND B.EMAIL_CONTATO IS NULL, C.FONTE_CONTATO, C.FONTE_CONTATO), D.FONTE_CONTATO) AS FONTE_CONTATO
INTO	#TMP_CONTATO_PRINCIPAL
FROM	[VAGAS_DW].[CLIENTES] AS A		OUTER APPLY (SELECT	TOP 1 A1.NOME_CONTATO ,
																  A1.EMAIL_CONTATO ,
																  A1.FONTE_CONTATO
													 FROM	CTE_CONTATOS_CLIENTES AS A1
													 WHERE	A.CONTA_ID = A1.CONTA_ID
													 ORDER BY
															A1.DATA_CONTATO DESC) AS B
										OUTER APPLY (SELECT	TOP 1 CONCAT(A1.NOME, ' ', A1.SOBRENOME) AS NOME_CONTATO ,
																  A1.EMAIL ,
																  'CONTATO_CRM' AS FONTE_CONTATO
													 FROM	[VAGAS_DW].[CONTATOS_CRM] AS A1
													 WHERE	A.CONTA_ID = A1.COD_CONTA_CRM
															AND A1.EMAIL IS NOT NULL
															AND (A1.CONTATO_PRINCIPAL = 1
																 OR A1.[ADMIN] = 1)
															AND A1.FUNCIONARIO_DESLIGADO = 'NÃO'
													 ORDER BY
															A1.DATA_MODIFICACAO DESC) AS C

										OUTER APPLY (SELECT	TOP 1 CONCAT(A1.NOME, ' ', A1.SOBRENOME) AS NOME_CONTATO ,
																  A1.EMAIL ,
																  'N_ADMIN_N_P' AS FONTE_CONTATO
													 FROM	[VAGAS_DW].[CONTATOS_CRM] AS A1
													 WHERE	A.CONTA_ID = A1.COD_CONTA_CRM
															AND A1.EMAIL IS NOT NULL
															AND A1.FUNCIONARIO_DESLIGADO = 'NÃO'
													 ORDER BY
															A1.DATA_MODIFICACAO DESC) AS D -- Último contato modificado que não é principal e nem admin
WHERE	A.EX_CLIENTE = 0
		AND A.CARTEIRA = 'RELACIONAMENTO' ;

UPDATE	[VAGAS_DW].[CLIENTES]
SET		CONTATO_PRINCIPAL = B.EMAIL_CONTATO
FROM	[VAGAS_DW].[CLIENTES] AS A		INNER JOIN #TMP_CONTATO_PRINCIPAL AS B ON A.CONTA_ID = B.CONTA_ID
WHERE	A.EX_CLIENTE = 0
		AND A.CARTEIRA = 'RELACIONAMENTO' ;


---------------------------------------------------------------
-- Atualiza o campo que informa se o cliente possui requisição:
---------------------------------------------------------------
UPDATE	[VAGAS_DW].[CLIENTES]
SET		REQUISICAO = 'NÃO' ;

UPDATE	[VAGAS_DW].[CLIENTES]
SET		REQUISICAO = 'SIM'
FROM	[VAGAS_DW].[CLIENTES] AS A
WHERE	A.EX_CLIENTE = 0
		AND A.CARTEIRA = 'RELACIONAMENTO'		
		AND EXISTS (SELECT	1
					FROM	[hrh-data].[dbo].[Fichas-DescrGeral] AS A1
					WHERE	A.COD_CLI = A1.CodCli_fic
							AND ReqVaga_fic = 1 ) ; -- Clientes que possuem ficha do tipo requisição


---------------------------------------------------------------------
-- Atualiza o campo que informa se o cliente possui acesso as fichas:
---------------------------------------------------------------------
UPDATE	[VAGAS_DW].[CLIENTES]
SET		FICHA = 'NÃO' ;

UPDATE	[VAGAS_DW].[CLIENTES]
SET		FICHA = 'SIM'
FROM	[VAGAS_DW].[CLIENTES] AS A
WHERE	A.EX_CLIENTE = 0
		AND A.CARTEIRA = 'RELACIONAMENTO'
		AND EXISTS (SELECT	1
					FROM	[hrh-data].[dbo].[Fichas-DescrGeral] AS A1
					WHERE	A.COD_CLI = A1.CodCli_fic) ;


-----------------------------------------------------
-- Atualiza o campo que informa se tem divisão de RI:
-----------------------------------------------------
UPDATE	[VAGAS_DW].[CLIENTES]
SET		RI = 'NÃO' ;

UPDATE	[VAGAS_DW].[CLIENTES]
SET		RI = 'SIM'
FROM	[VAGAS_DW].[CLIENTES] AS A
WHERE	A.EX_CLIENTE = 0
		AND A.CARTEIRA = 'RELACIONAMENTO'
		AND EXISTS (SELECT	1
					FROM	[hrh-data].[dbo].[Divisoes] AS A1
					WHERE	A.COD_CLI = A1.CodCli_div
							AND A1.CodNavEx_div = 300 ) ; -- Tipo de navegação de RI 

--------------------------------------------------------------------------------------------
-- Atualiza o campo que informa se o cliente tem endereço exclusivo pra homepage da empresa:
--------------------------------------------------------------------------------------------
UPDATE	[VAGAS_DW].[CLIENTES]
SET		PORTAL = 'NÃO' ;

UPDATE	[VAGAS_DW].[CLIENTES]
SET		PORTAL = 'SIM'
FROM	[VAGAS_DW].[CLIENTES] AS A
WHERE	A.EX_CLIENTE = 0
		AND A.CARTEIRA = 'RELACIONAMENTO'
		AND EXISTS (SELECT	1
					FROM	[hrh-data].[dbo].[Divisoes] AS A1
					WHERE	A.COD_CLI = A1.CodCli_div
							AND A1.SubDirWeb_div IS NOT NULL -- Está definido uma URL de acesso pra homepage
							AND A1.HaPagEmpWeb_div = 1 ) ; -- existe uma homepage ativa

--------------------------------------------------------------------------------
-- Atualiza o campo que informa se o cliente tem saldo de crédito VAGAS ETALENT:
--------------------------------------------------------------------------------
UPDATE	[VAGAS_DW].[CLIENTES]
SET		VET = 'NÃO' ;

UPDATE	[VAGAS_DW].[CLIENTES]
SET		VET = 'SIM'
FROM	[VAGAS_DW].[CLIENTES] AS A
WHERE	A.EX_CLIENTE = 0
		AND A.CARTEIRA = 'RELACIONAMENTO'
		AND A.COD_CLI IN (
							SELECT	SUBQUERY.COD_CLI
							FROM	(
										SELECT	A1.Cod_cli ,
												SUM(A2.Credito_VeTCred) - SUM(A2.Usados_VeTCred) AS SALDO
										FROM	[hrh-data].[dbo].[Clientes] AS A1	INNER JOIN [hrh-data].[dbo].[Vagas_etalent_creditos] AS A2 ON A1.Cod_cli = A2.CodCli_VetCred
										WHERE	A2.DataVal_VeTCred >= GETDATE()
										GROUP BY
												A1.Cod_cli ) AS SUBQUERY ) ;


-- Atualiza campo que contém o faturamento acumulado nos últimos 12 meses:
-- DROP TABLE #TMP_FATURAMENTO_ACUMULADO_ANO ;
SELECT	A.COD_CLI_CRM ,
		SUM(A.VALOR) AS FATURAMENTO_ACUMULADO_ANO
INTO	#TMP_FATURAMENTO_ACUMULADO_ANO
FROM	[VAGAS_DW].[FATURAMENTO] AS A
WHERE	EXISTS (SELECT	1
				FROM	[VAGAS_DW].[CLIENTES] AS A1
				WHERE	A.COD_CLI_CRM = A1.CONTA_ID
						AND A1.EX_CLIENTE = 0
						AND A1.CARTEIRA = 'RELACIONAMENTO')
		AND A.DATA_EMISSAO >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE))
GROUP BY
		A.COD_CLI_CRM ;



UPDATE	[VAGAS_DW].[CLIENTES]
SET		FATURAMENTO_ACUMULADO_ANO = B.FATURAMENTO_ACUMULADO_ANO
FROM	[VAGAS_DW].[CLIENTES] AS A		INNER JOIN #TMP_FATURAMENTO_ACUMULADO_ANO AS B ON A.CONTA_ID = B.COD_CLI_CRM
WHERE	A.EX_CLIENTE = 0
		AND A.CARTEIRA = 'RELACIONAMENTO' ;

-- Atualiza os campos HORAS_TOTAIS_ANO e MINUTOS_TOTAIS_ANO:
UPDATE	[VAGAS_DW].[CLIENTES]
SET		HORAS_TOTAIS_ANO = 0 ,
		MINUTOS_TOTAIS_ANO = 0 ;

-- Atualiza os campos que contém a composição de horas acumuladas no ano vigente, referentes a Soluções Personalizadas, DSM, Suporte a Empresas, Ligações e Reuniões no CRM:
SELECT	CONTA_ID ,
		SUM(SOMA_HORAS_TOTAIS) AS SOMA_HORAS_TOTAIS ,
		CONVERT(INT, IIF(ROUND((((SUM(SOMA_HORAS_TOTAIS) * 24) - (FLOOR(SUM(SOMA_HORAS_TOTAIS) * 24))) * 60), 0) = 60, FLOOR(SUM(SOMA_HORAS_TOTAIS) * 24) + 1, FLOOR(SUM(SOMA_HORAS_TOTAIS) * 24))) AS HORAS_TOTAIS ,
		CONVERT(TINYINT, IIF(ROUND((((SUM(SOMA_HORAS_TOTAIS) * 24) - (FLOOR(SUM(SOMA_HORAS_TOTAIS) * 24))) * 60), 0) = 60, 0, ROUND((((SUM(SOMA_HORAS_TOTAIS) * 24) - (FLOOR(SUM(SOMA_HORAS_TOTAIS) * 24))) * 60), 0))) AS MINUTOS_TOTAIS
INTO	#TMP_HORAS_TOTAIS_ANO
FROM	
(
	SELECT	B.CONTA_ID ,
			SUM(A.TMS) AS SOMA_HORAS_TOTAIS
	FROM	[VAGAS_DW].[CASOS] AS A		INNER JOIN [VAGAS_DW].[CLIENTES] AS B ON A.CONTA_ID = B.CONTA_ID
	WHERE	A.DATA_INCLUSAO >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE))
			AND B.EX_CLIENTE = 0
	GROUP BY
			B.CONTA_ID
	UNION ALL
	SELECT	B.CONTA_ID ,
			SUM(A.TEMPO_GASTO / 24) + SUM(A.TEMPO_GASTO_AUXILIAR / 24) AS SOMA_HORAS_SOLUCOES_DSM
	FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A		INNER JOIN [VAGAS_DW].[CLIENTES] AS B ON A.CONTA_ID = B.CONTA_ID
	WHERE	EQUIPE_PROJETO = 'Soluções Personalizadas'
			AND FLAG_ROOT = 1
			AND ( A.DATA_CADASTRAMENTO >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE))
				  OR A.DATA_ALTERACAO  >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE))
				  OR A.DATA_CONCLUSAO  >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE)) )
			AND B.EX_CLIENTE = 0
	GROUP BY
			B.CONTA_ID 
	UNION ALL
	SELECT	SUBQUERY.CONTA_ID ,
			HORAS + MINUTOS
	FROM	
			(	
				SELECT	B.CONTA_ID ,
						IIF(FLOOR(CONVERT(FLOAT, SUM(DURACAO_MINUTOS)) / 60) >= 1, SUM(DURACAO_HORAS) + FLOOR(CONVERT(FLOAT, SUM(DURACAO_MINUTOS)) / 60), SUM(DURACAO_HORAS)) / 24 AS HORAS  ,
						(((CONVERT(FLOAT, SUM(DURACAO_MINUTOS)) / 60) - FLOOR(CONVERT(FLOAT, SUM(DURACAO_MINUTOS)) / 60)) * 60) / 60 / 24 AS MINUTOS
				FROM	[VAGAS_DW].[LIGACOES_CRM] AS A		INNER JOIN [VAGAS_DW].[CLIENTES] AS B ON A.CONTA_ID = B.CONTA_ID
				WHERE	DATA_FIM >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE))
						AND B.EX_CLIENTE = 0
				GROUP BY
						B.CONTA_ID
				UNION ALL
				SELECT	B.CONTA_ID ,
						IIF(FLOOR(CONVERT(FLOAT, SUM(DURACAO_MINUTOS)) / 60) >= 1, SUM(DURACAO_HORAS) + FLOOR(CONVERT(FLOAT, SUM(DURACAO_MINUTOS)) / 60), SUM(DURACAO_HORAS)) / 24 AS HORAS  ,
						(((CONVERT(FLOAT, SUM(DURACAO_MINUTOS)) / 60) - FLOOR(CONVERT(FLOAT, SUM(DURACAO_MINUTOS)) / 60)) * 60) / 60 / 24 AS MINUTOS
				FROM	[VAGAS_DW].[REUNIOES] AS A		INNER JOIN [VAGAS_DW].[CLIENTES] AS B ON A.CONTAID = B.CONTA_ID
				WHERE	DATA_INICIO >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE))
						AND B.EX_CLIENTE = 0
				GROUP BY B.CONTA_ID ) AS SUBQUERY
	UNION ALL
	SELECT	A.ID_CONTA AS CONTA_ID ,
			SUM(B.TEMPO_HORAS) AS TEMPO_HORAS_HOMEPAGES
	FROM	[VAGAS_DW].[LINKS_HOMEPAGES] AS A		INNER JOIN [VAGAS_DW].[LINKS_TRANSICAO_STATUS] AS B ON A.ID_LINK = B.ID_LINK
													INNER JOIN [VAGAS_DW].[CLIENTES] AS C ON A.ID_CONTA = C.CONTA_ID
	WHERE	B.MICRO_FASES IN ('Tempo em Execução', 'Tempo de Espera na Fila')
			AND B.DATA_VALOR_NORMALIZADO >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE))
			AND ISNULL(A.ID_CONTA, '') != ''
			AND C.EX_CLIENTE = 0
	GROUP BY
			A.ID_CONTA
	UNION ALL
	SELECT	A.CLIENTE ,
			SUM(A.TEMPO_GASTO)/24 AS TEMPO_GASTO_IMPL
	FROM	[VAGAS_DW].[DEMANDAS_EQUIPES] AS A		INNER JOIN [VAGAS_DW].[CLIENTES] AS B ON A.CLIENTE = B.CLIENTE_VAGAS
	WHERE	A.EQUIPE_PROJETO = 'Implantação'
			AND ( A.DATA_CADASTRAMENTO >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE))
				  OR A.DATA_ALTERACAO >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE))
				  OR A.DATA_CONCLUSAO >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE))
				  OR A.DATA_CONC_IMPLANTACAO >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE)) )
			AND A.FLAG_ROOT = 1
			AND B.EX_CLIENTE = 0
	GROUP BY
			A.CLIENTE
	UNION ALL
	SELECT	A.CONTA_ID ,
			CONVERT(FLOAT, SUM(DATEDIFF(HOUR, A.DATA_REALIZACAO_INICIO, A.DATA_REALIZACAO_FIM))) /24 AS TEMPO_GASTO
	FROM	[VAGAS_DW].[TREINAMENTOS_CRM] AS A		INNER JOIN [VAGAS_DW].[CLIENTES] AS B ON A.CONTA_ID = B.CONTA_ID
	WHERE	A.DATA_REALIZACAO_INICIO >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE))
			AND B.EX_CLIENTE = 0
	GROUP BY
			A.CONTA_ID
	 ) AS SUBQUERY_2
GROUP BY CONTA_ID ;


UPDATE	[VAGAS_DW].[CLIENTES]
SET		HORAS_TOTAIS_ANO = B.HORAS_TOTAIS ,
		MINUTOS_TOTAIS_ANO = B.MINUTOS_TOTAIS
FROM	[VAGAS_DW].[CLIENTES] AS A		INNER JOIN #TMP_HORAS_TOTAIS_ANO AS B ON A.CONTA_ID = B.CONTA_ID
WHERE	A.EX_CLIENTE = 0 ;

-- Marcar como EX_CLIENTES, contas do CRM, que estão com o TIPO e a CATEGORIA iguais a cliente_potencial, e que não possuem um ID VAGAS válido:
UPDATE	[VAGAS_DW].[CLIENTES]
SET		EX_CLIENTE = 1
FROM	[VAGAS_DW].[CLIENTES] AS A
WHERE	A.EX_CLIENTE IS NULL
		AND EXISTS (SELECT	*
					FROM	( 
								SELECT	A1.CONTA_ID
								FROM	[VAGAS_DW].[CONTAS_CRM] AS A1
								WHERE	A1.TIPO = 'cliente_potencial'
										AND A1.CATEGORIA = 'cliente_potencial'
								UNION ALL
								SELECT	A1.CONTA_ID
								FROM	[VAGAS_DW].[CONTAS_MEMBRO_CRM] AS A1
								WHERE	A1.TIPO = 'cliente_potencial'
										AND A1.CATEGORIA = 'cliente_potencial') AS SUBQUERY 
					WHERE	A.CONTA_ID = SUBQUERY.CONTA_ID ) ;

-- Marcar como EX_CLIENTE as contas que possuem o TIPO e a CATEGORIA iguais a cliente_potencial e que estão com a flag EX_CLIENTE = 0.
UPDATE	[VAGAS_DW].[CLIENTES]
SET		EX_CLIENTE = 1
FROM	[VAGAS_DW].[CLIENTES] AS A		INNER JOIN ( SELECT	A1.TIPO ,
																	A1.CATEGORIA ,
																	A1.CONTA_ID
														  FROM		[VAGAS_DW].[CONTAS_CRM] AS A1
														  UNION ALL
														  SELECT	A1.TIPO ,
																	A1.CATEGORIA ,
																	A1.CONTA_ID
														  FROM		[VAGAS_DW].[CONTAS_MEMBRO_CRM] AS A1 ) AS B ON A.CONTA_ID = B.CONTA_ID
WHERE	A.EX_CLIENTE = 0
		AND B.TIPO = 'cliente_potencial'
		AND B.CATEGORIA = 'cliente_potencial'
		AND A.TIPO_CLIENTE_MANUT = 'FIT' ;


UPDATE	[VAGAS_DW].[CLIENTES]
SET		FONTE = 'OPORTUNIDADES'
FROM	[VAGAS_DW].[CLIENTES] AS A
WHERE	FONTE IS NULL ;


-- Inclusão de COD_CLI incremental pra relacionar com CUBO de VAGAS pelo campo COD_CLI:
DECLARE	@COD_CLI INT = ( SELECT MAX(COD_CLI) + 1000 
						 FROM	[VAGAS_DW].[CLIENTES] AS A
						 WHERE	A.COD_CLI IS NOT NULL ) ;

DECLARE	@QTD_COD_CLI_NULL INT = ( SELECT COUNT(*) 
								  FROM	[VAGAS_DW].[CLIENTES] AS A 
								  WHERE	A.COD_CLI IS NULL ) ;

DECLARE	@LIMITE_INCREMENTO INT = @COD_CLI + @QTD_COD_CLI_NULL ;

WHILE (@COD_CLI < @LIMITE_INCREMENTO)
BEGIN
	UPDATE	[VAGAS_DW].[CLIENTES]
	SET		@COD_CLI = @COD_CLI + 1 ,
			COD_CLI = @COD_CLI
	FROM	[VAGAS_DW].[CLIENTES] AS A
	WHERE	A.COD_CLI IS NULL	
END

-- Enriquecimento dos registros que estão com o CNPJ NULL, em branco, ou com menos de 14 caracteres:
UPDATE	[VAGAS_DW].[CLIENTES]
SET		CNPJ = B.CGC_cli ,
		CLIENTE_VAGAS = B.Ident_cli
FROM	[VAGAS_DW].[CLIENTES] AS A		INNER JOIN [hrh-data].[dbo].[Clientes] AS B ON A.CLIENTE_VAGAS = B.Ident_cli COLLATE SQL_Latin1_General_CP1_CI_AI
WHERE	( ISNULL(A.CNPJ, '') = '' -- CNPJ EM BRANCO
		  OR LEN(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(A.CNPJ)), CHAR(9), ''), CHAR(10), ''), CHAR(13), ''), '.', ''), '/', ''), '-', '')) BETWEEN 1 AND 13 ) -- Quantidade de caracteres do CNPJ < 14
		AND A.FONTE = 'MANUT' ;


-- Cálculo do tempo de permanência do cliente na base:
UPDATE	[VAGAS_DW].[CLIENTES]
SET		TEMPO_PERMANENCIA_ANOS = DATEDIFF(YEAR, A.DATA_PRM_OPORTUNIDADE_CRM, CAST(GETDATE() AS DATE))
FROM	[VAGAS_DW].[CLIENTES] AS A
WHERE	A.EX_CLIENTE = 0 ;


-- Atualização do campo QTD_FUNC_REMOVIDO:
UPDATE	[VAGAS_DW].[CLIENTES]
SET		QTD_FUNC_REMOVIDO = ( SELECT	COUNT(*) AS QTD_FUNC_REMOVIDO
							  FROM		[hrh-data].[dbo].[Funcionarios] AS A1
							  WHERE		A.COD_CLI = A1.CodCli_func
										AND A1.Removido_func = 1 )
FROM	[VAGAS_DW].[CLIENTES] AS A ;


-- Inserir dados na base historica
INSERT INTO VAGAS_DW.CLIENTES_HISTORICO 
SELECT * FROM VAGAS_DW.CLIENTES 

-- expurgar datas de referencia antigas (deixar apenas a últ. de cada mes)
-- apenas a base historico 
DELETE VAGAS_DW.CLIENTES_HISTORICO 
FROM VAGAS_DW.CLIENTES_HISTORICO A 
WHERE DATA_REFERENCIA <> ( SELECT MAX(DATA_REFERENCIA) 
              FROM VAGAS_DW.CLIENTES_HISTORICO 
              WHERE YEAR(DATA_REFERENCIA) = YEAR(A.DATA_REFERENCIA) 
              AND MONTH(DATA_REFERENCIA) = MONTH(A.DATA_REFERENCIA) ) 