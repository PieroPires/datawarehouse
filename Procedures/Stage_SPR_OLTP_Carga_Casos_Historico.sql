-- =============================================
-- Author: Fiama
-- Create date: 19/12/2017
-- Description: Procedure para carga das tabelas temporárias (BD Stage) para alimentação do DW
-- =============================================

USE [STAGE] ;
GO

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE NAME = 'SPR_OLTP_Carga_Casos_Historico' AND SCHEMA_NAME(SCHEMA_ID) = 'VAGAS_DW')
DROP PROCEDURE [VAGAS_DW].[SPR_OLTP_Carga_Casos_Historico] ;
GO

CREATE PROCEDURE [VAGAS_DW].[SPR_OLTP_Carga_Casos_Historico]
AS
SET NOCOUNT ON

TRUNCATE TABLE [VAGAS_DW].[VAGAS_DW].[TMP_CASOS_HISTORICO] ;

INSERT INTO [VAGAS_DW].[VAGAS_DW].[TMP_CASOS_HISTORICO](ID_CASO,NUMERO_CASO,VALOR_ANTERIOR,NOVO_VALOR,ALTERADOR,DATA_ALTERACAO_ANTERIOR,DATA_ALTERACAO,ESTAGIO_TRANSICAO)
SELECT	A.ID_CASO ,
		A.NUMERO_CASO ,
		A.VALOR_ANTERIOR ,
		A.NOVO_VALOR ,
		A.ALTERADOR ,			
		CASE
			WHEN A.ESTAGIO_TRANSICAO = 1 AND B.ORIGEM_SUPORTE = 'Telefone'
				 AND B.DATA_INCLUSAO_NORMALIZADA < ( SELECT	A1.DATA_ALTERACAO
													 FROM	[STAGE].[VAGAS_DW].[TMP_CASOS_HISTORICO] AS A1
													 WHERE	A.NUMERO_CASO = A1.NUMERO_CASO
															AND A1.ESTAGIO_TRANSICAO = 1 )
				THEN B.DATA_INCLUSAO_NORMALIZADA
			ELSE IIF(LAG(A.DATA_ALTERACAO, 1, 0) OVER(PARTITION BY A.NUMERO_CASO ORDER BY A.NUMERO_CASO ASC, A.DATA_ALTERACAO ASC) = '19000101', A.DATA_ALTERACAO, LAG(A.DATA_ALTERACAO, 1, 0) OVER(PARTITION BY A.NUMERO_CASO ORDER BY A.NUMERO_CASO ASC, A.DATA_ALTERACAO ASC))
			END AS DATA_ALTERACAO_ANTERIOR ,
		A.DATA_ALTERACAO ,
		A.ESTAGIO_TRANSICAO
FROM	[STAGE].[VAGAS_DW].[TMP_CASOS_HISTORICO] AS A		INNER JOIN [VAGAS_DW].[VAGAS_DW].[CASOS] AS B ON A.ID_CASO COLLATE SQL_Latin1_General_CP1_CI_AI = B.ID_CASO
WHERE	B.FILA_ATENDIMENTO = 'suporte_empresas'
ORDER BY
		A.NUMERO_CASO ,
		A.DATA_ALTERACAO ;


-- Para casos do tipo Telefone, caso a transição não exista considerar a diferença de horas entre a DATA_INCLUSAO_NORMALIZADA e DATA_FECHAMENTO:
INSERT INTO [VAGAS_DW].[VAGAS_DW].[TMP_CASOS_HISTORICO] (ID_CASO,NUMERO_CASO,VALOR_ANTERIOR,NOVO_VALOR,ALTERADOR,DATA_ALTERACAO_ANTERIOR,DATA_ALTERACAO,ESTAGIO_TRANSICAO)
SELECT	A.ID_CASO ,
		A.NUMERO_CASO ,
		'NOVO' AS VALOR_ANTERIOR ,
		'FECHADO' AS NOVO_VALOR ,
		A.USUARIO_RESPONSAVEL AS ALTERADOR ,
		A.DATA_INCLUSAO_NORMALIZADA AS DATA_ALTERACAO_ANTERIOR ,
		ISNULL(A.DATA_FECHAMENTO, A.DATA_INCLUSAO_NORMALIZADA) AS DATA_ALTERACAO ,
		1 AS ESTAGIO_TRANSICAO
FROM	[VAGAS_DW].[VAGAS_DW].[CASOS] AS A
WHERE	A.FILA_ATENDIMENTO = 'suporte_empresas'
		AND A.ORIGEM_SUPORTE = 'Telefone'
		AND NOT EXISTS ( SELECT	1
						 FROM	[VAGAS_DW].[VAGAS_DW].[TMP_CASOS_HISTORICO] AS A1
						 WHERE	A.ID_CASO = A1.ID_CASO )
		AND A.[STATUS] IN ('FECHADO', 'FECHADO_SEM_RESPOSTA') ;


-- Para casos do tipo e-mail ou telefone, considerar a DATA_FECHAMENTO pra última transição:
UPDATE	[VAGAS_DW].[VAGAS_DW].[TMP_CASOS_HISTORICO]
SET		DATA_ALTERACAO = ISNULL(B.DATA_FECHAMENTO, A.DATA_ALTERACAO)
FROM	[VAGAS_DW].[VAGAS_DW].[TMP_CASOS_HISTORICO] AS A		INNER JOIN [VAGAS_DW].[VAGAS_DW].[CASOS] AS B ON A.ID_CASO = B.ID_CASO
WHERE	B.FILA_ATENDIMENTO = 'suporte_empresas'
		AND A.ESTAGIO_TRANSICAO = ( SELECT	MAX(A1.ESTAGIO_TRANSICAO)
									FROM	[VAGAS_DW].[VAGAS_DW].[TMP_CASOS_HISTORICO] AS A1		INNER JOIN [VAGAS_DW].[VAGAS_DW].[CASOS] AS A2
																									ON A1.ID_CASO = A2.ID_CASO
									WHERE	A.NUMERO_CASO = A1.NUMERO_CASO
											AND A2.FILA_ATENDIMENTO = 'suporte_empresas' )
		AND B.DATA_FECHAMENTO > A.DATA_ALTERACAO ; -- Atribuir o DATA_FECHAMENTO > DATA_ALTERACAO do CASO, garantir que não atribua um DATA_FECHAMENTO < ULT_DATA_ALTERACAO