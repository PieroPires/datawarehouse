USE VAGAS_DW
GO

IF EXISTS ( SELECT * FROM SYS.OBJECTS WHERE NAME = 'SPR_OLAP_Carga_Evolucao_Marcos_Equipes' AND SCHEMA_NAME(SCHEMA_ID) = 'VAGAS_DW')
DROP PROCEDURE VAGAS_DW.SPR_OLAP_Carga_Evolucao_Marcos_Equipes
GO

-- =============================================
-- Author: Luiz Fernando Braz
-- Create date: 05/07/2016
-- Description: Procedure para carga das tabelas temporárias (BD Stage) para alimentação do DW
-- =============================================

CREATE PROCEDURE VAGAS_DW.SPR_OLAP_Carga_Evolucao_Marcos_Equipes

AS
SET NOCOUNT ON

 TRUNCATE TABLE VAGAS_DW.TMP_EVOLUCAO_MARCOS_EQUIPES
 TRUNCATE TABLE VAGAS_DW.TMP_AUXILIAR_EVOLUCAO_MARCOS_EQUIPES
 TRUNCATE TABLE VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES

CREATE TABLE #TMP_LOG_ERRO (ID_LOG_ERRO SMALLINT IDENTITY PRIMARY KEY,
							ERRO VARCHAR(8000) )	

-- DROP TABLE #TMP_CONTROLE_SPREADSHEET 
CREATE TABLE #TMP_CONTROLE_SPREADSHEET (ID_CONTROLE_SPREADSHEET SMALLINT PRIMARY KEY,
										URL VARCHAR(500),
										SHEET_NAME VARCHAR(100),
										ID_EQUIPE TINYINT,
										QTD_COLUNAS TINYINT )

INSERT INTO #TMP_CONTROLE_SPREADSHEET (ID_CONTROLE_SPREADSHEET,URL,SHEET_NAME,ID_EQUIPE,QTD_COLUNAS)
SELECT ID_CONTROLE_SPREADSHEET,URL,SHEET_NAME,ID_EQUIPE,QTD_COLUNAS
FROM VAGAS_DW.CONTROLE_SPREADSHEET 
WHERE FLAG_ATIVO = 1 AND NOME_CONTROLE = 'EVOLUCAO_CICLO' --AND ID_CONTROLE_SPREADSHEET = 98
AND ID_EQUIPE <> 4 -- A PLANILHA DESTA EQUIPE NÃO ESTA FUNCIONANDO (FE SANTANA ESTÁ ANALISANDO)

	----------------------------------------------------
	--------------------- INÍCIO DA IMPORTAÇÃO VIA GOOGLE DRIVE 
	----------------------------------------------------

	DECLARE @CMD VARCHAR(8000),
			@MSG VARCHAR(8000),
			@QTD_COLUNAS_ARQUIVO TINYINT,
			@NOME_ARQUIVO VARCHAR(200)

	DECLARE @ID_CONTROLE_SPREADSHEET SMALLINT,
			@URL VARCHAR(500),
			@SHEET_NAME VARCHAR(100),
			@ID_EQUIPE TINYINT,
			@QTD_COLUNAS TINYINT

	-- SELECT * FROM #TMP_CONTROLE_SPREADSHEET
	SELECT TOP 1 @ID_CONTROLE_SPREADSHEET = ID_CONTROLE_SPREADSHEET,
				 @URL = URL,
				 @SHEET_NAME = SHEET_NAME,
				 @ID_EQUIPE = ID_EQUIPE,
				 @QTD_COLUNAS = QTD_COLUNAS
	FROM #TMP_CONTROLE_SPREADSHEET
	--WHERE ID_CONTROLE_SPREADSHEET IN (73,61,55)
	ORDER BY ID_CONTROLE_SPREADSHEET ASC

	WHILE @@ROWCOUNT > 0
	BEGIN

		-- Importar planilha Google Drive diretamente para o BD (Tabela VAGAS_DW.VW_TMP_AUXILIAR_EVOLUCAO_MARCOS_EQUIPES)
		SET @CMD = 'set PYTHONIOENCODING=cp437 & C:\Python27\python G:\Projetos\Scripts_Python\Exportacao_Arquivos_Google_Drive\LerPlanilhaGoogleDrive.py ' + 
					' "' + CONVERT(VARCHAR,@ID_CONTROLE_SPREADSHEET) + '" "TMP_AUXILIAR_EVOLUCAO_MARCOS_EQUIPES" "1"'
	
		INSERT INTO #TMP_LOG_ERRO (ERRO)
		EXEC MASTER.DBO.XP_CMDSHELL @CMD
		PRINT @CMD
		
		-- Tratar erros ocorridos na rotina do Python	
		IF EXISTS ( SELECT * FROM #TMP_LOG_ERRO WHERE CHARINDEX('ERROR_MESSAGE',ERRO) > 0 ) 
		BEGIN 
			SET @MSG = 'ERRO ocorrido na importação dos dados no ID_CONTROLE_SPREADSHEET :' + CONVERT(VARCHAR,@ID_CONTROLE_SPREADSHEET)
			RAISERROR(@MSG , 16, 1) 
		END

		-- Tratar diferenças na estrutura dos dados
		SELECT @QTD_COLUNAS_ARQUIVO = MAX(column_id) - 1
		FROM sys.columns A
		INNER JOIN sys.tables B ON B.OBJECT_ID = A.OBJECT_ID
		WHERE B.NAME = 'TMP_AUXILIAR_EVOLUCAO_MARCOS_EQUIPES' 
		AND SCHEMA_NAME(B.SCHEMA_ID) = 'VAGAS_DW'

	
		--IF @QTD_COLUNAS <> @QTD_COLUNAS_ARQUIVO
		--BEGIN
		--	SET @MSG = 'ERRO ocorrido na importação dos dados no ID_CONTROLE_SPREADSHEET (DIFERENÇA DE COLUNAS) :' + CONVERT(VARCHAR,@ID_CONTROLE_SPREADSHEET)
		--	RAISERROR(@MSG , 16, 1) 
		--END

		-- ALIMENTAR TABELA TMP PRINCIPAL COM AS EQUIPES
		INSERT INTO VAGAS_DW.TMP_EVOLUCAO_MARCOS_EQUIPES (INDICE,MARCO_ESTRATEGICO,CRITERIO_SUCESSO,METRICA,PERC_ATINGIMENTO_MARCO,
														  SEMANA_1,SEMANA_2,SEMANA_3,SEMANA_4,SEMANA_5,SEMANA_6,SEMANA_7,SEMANA_8,ID_EQUIPE,ID_CONTROLE_SPREADSHEET)
		SELECT [INDEX],[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],@ID_EQUIPE,@ID_CONTROLE_SPREADSHEET
		FROM VAGAS_DW.TMP_AUXILIAR_EVOLUCAO_MARCOS_EQUIPES

		TRUNCATE TABLE #TMP_LOG_ERRO
		TRUNCATE TABLE VAGAS_DW.TMP_AUXILIAR_EVOLUCAO_MARCOS_EQUIPES
					
		SELECT TOP 1 @ID_CONTROLE_SPREADSHEET = ID_CONTROLE_SPREADSHEET,
				 @URL = URL,
				 @SHEET_NAME = SHEET_NAME,
				 @ID_EQUIPE = ID_EQUIPE,
				 @QTD_COLUNAS = QTD_COLUNAS
		FROM #TMP_CONTROLE_SPREADSHEET
		WHERE /*ID_EQUIPE > @ID_EQUIPE */
		ID_CONTROLE_SPREADSHEET > @ID_CONTROLE_SPREADSHEET
		--AND ID_CONTROLE_SPREADSHEET IN (73,61,55)
		ORDER BY ID_CONTROLE_SPREADSHEET ASC

	END

	----------------------------------------------------
	--------------------- FIM DA EXPORTAÇÃO DOS ARQUIVOS VIA GOOGLE DRIVE E IMPORTAÇÃO VIA BULK INSERT
	----------------------------------------------------

	CREATE TABLE #TMP_EVOLUCAO_MARCOS_EQUIPES (ID_EVOLUCAO_MARCOS_EQUIPES INT IDENTITY PRIMARY KEY,MARCO_ESTRATEGICO VARCHAR(1000),
										   MARCO_ESTRATEGICO_ATUAL VARCHAR(1000),
										   PROXIMO_MARCO_ESTRATEGICO VARCHAR(1000),
										   CRITERIO_SUCESSO VARCHAR(1000),PERC_ATINGIMENTO_MARCO VARCHAR(1000))

	CREATE TABLE #TMP_EVOLUCAO_MARCOS_EQUIPES_PERC_ATINGIMENTO (ID_EVOLUCAO_MARCOS_EQUIPES_PERC_ATINGIMENTO INT IDENTITY,
															MARCO_ESTRATEGICO VARCHAR(1000),
															CRITERIO_SUCESSO  VARCHAR(1000),
															PERC_ATINGIMENTO_MARCO_STRING VARCHAR(1000),
															PERC_ATINGIMENTO_MARCO NUMERIC(4,2),
															ID_EQUIPE TINYINT,
															ID_CONTROLE_SPREADSHEET SMALLINT )


	----------------------------------------------------
	--------------------- INÍCIO DO LOOP POR EQUIPE PARA TRATAMENTO DOS DADOS
	----------------------------------------------------
	DECLARE @MARCO_ESTRATEGICO VARCHAR(8000),
			@PROXIMO_MARCO_ESTRATEGICO VARCHAR(8000),
			@MARCO_ESTRATEGICO_ATUAL VARCHAR(8000),
			@CRITERIO_SUCESSO VARCHAR(1000),
			@PERC_ATINGIMENTO_MARCO VARCHAR(1000),
			@ID_EVOLUCAO_MARCOS_EQUIPES INT,
			@PERC_ATINGIMENTO_MARCO_CONCATENADO VARCHAR(1000) = '' 

	SELECT TOP 1 @ID_EQUIPE = ID_EQUIPE,@ID_CONTROLE_SPREADSHEET = ID_CONTROLE_SPREADSHEET
	FROM VAGAS_DW.TMP_EVOLUCAO_MARCOS_EQUIPES
	WHERE MARCO_ESTRATEGICO NOT IN ('0','MARCOS ESTRATÉGICOS')
	--AND ID_EQUIPE = 37
	ORDER BY ID_CONTROLE_SPREADSHEET 

	WHILE @@ROWCOUNT > 0
	BEGIN
	
	-- SEPARAR AS INFORMAÇÕES DA EQUIPE QUE ESTAMOS TRATANDO
	INSERT INTO #TMP_EVOLUCAO_MARCOS_EQUIPES (MARCO_ESTRATEGICO_ATUAL,PROXIMO_MARCO_ESTRATEGICO,MARCO_ESTRATEGICO,CRITERIO_SUCESSO,
											  PERC_ATINGIMENTO_MARCO)
	SELECT C.MARCO_ESTRATEGICO, -- ATUAL
		   B.MARCO_ESTRATEGICO, -- PRÓXIMO
		   A.MARCO_ESTRATEGICO, -- LINHA ORIGINAL
		   A.CRITERIO_SUCESSO,
		   A.PERC_ATINGIMENTO_MARCO 
	FROM VAGAS_DW.TMP_EVOLUCAO_MARCOS_EQUIPES A
	OUTER APPLY ( SELECT TOP 1 * 
				  FROM VAGAS_DW.TMP_EVOLUCAO_MARCOS_EQUIPES 
				  WHERE INDICE > A.INDICE 
				  AND LEFT(LTRIM(MARCO_ESTRATEGICO),5) = 'Marco' 
				  AND ID_EQUIPE = A.ID_EQUIPE
				  AND ID_CONTROLE_SPREADSHEET = @ID_CONTROLE_SPREADSHEET
				  ORDER BY INDICE ASC) B 
	OUTER APPLY ( SELECT TOP 1 * 
				  FROM VAGAS_DW.TMP_EVOLUCAO_MARCOS_EQUIPES 
				  WHERE INDICE <= A.INDICE 
				  AND RTRIM(LTRIM(MARCO_ESTRATEGICO )) <> '' 
				  AND ID_EQUIPE = A.ID_EQUIPE
				  AND INDICE NOT IN ('0','1')
				  AND ID_CONTROLE_SPREADSHEET = @ID_CONTROLE_SPREADSHEET
				  ORDER BY INDICE DESC) C 
	WHERE A.ID_EQUIPE = @ID_EQUIPE
	AND A.INDICE NOT IN ('0','1')
	AND A.ID_CONTROLE_SPREADSHEET = @ID_CONTROLE_SPREADSHEET

	SELECT TOP 1 @ID_EVOLUCAO_MARCOS_EQUIPES = ID_EVOLUCAO_MARCOS_EQUIPES, 
				@MARCO_ESTRATEGICO_ATUAL = MARCO_ESTRATEGICO_ATUAL,
				@PROXIMO_MARCO_ESTRATEGICO = PROXIMO_MARCO_ESTRATEGICO,
				@MARCO_ESTRATEGICO = MARCO_ESTRATEGICO,
				@CRITERIO_SUCESSO = CRITERIO_SUCESSO,@PERC_ATINGIMENTO_MARCO = PERC_ATINGIMENTO_MARCO
	FROM #TMP_EVOLUCAO_MARCOS_EQUIPES 
	ORDER BY ID_EVOLUCAO_MARCOS_EQUIPES
	
	-- LOOP NAS LINHAS DA EQUIPE POR MARCO
	WHILE @@ROWCOUNT > 0
	BEGIN
		
		-- NO COMEÇO DE CADA LINHA DOS MARCOS TEMOS QUE ZERAR O PERCENTUAL
		IF @MARCO_ESTRATEGICO_ATUAL = @MARCO_ESTRATEGICO
			SET @PERC_ATINGIMENTO_MARCO_CONCATENADO = ''
		
		SET @PERC_ATINGIMENTO_MARCO_CONCATENADO = @PERC_ATINGIMENTO_MARCO_CONCATENADO + ' ' + @PERC_ATINGIMENTO_MARCO
		
		IF NOT EXISTS ( SELECT * FROM #TMP_EVOLUCAO_MARCOS_EQUIPES_PERC_ATINGIMENTO
						WHERE MARCO_ESTRATEGICO = @MARCO_ESTRATEGICO_ATUAL AND ID_CONTROLE_SPREADSHEET = @ID_CONTROLE_SPREADSHEET )
			INSERT INTO #TMP_EVOLUCAO_MARCOS_EQUIPES_PERC_ATINGIMENTO (MARCO_ESTRATEGICO,CRITERIO_SUCESSO,PERC_ATINGIMENTO_MARCO_STRING,ID_EQUIPE,ID_CONTROLE_SPREADSHEET)
			VALUES (@MARCO_ESTRATEGICO_ATUAL,@CRITERIO_SUCESSO,@PERC_ATINGIMENTO_MARCO_CONCATENADO,@ID_EQUIPE,@ID_CONTROLE_SPREADSHEET)
		ELSE
			UPDATE #TMP_EVOLUCAO_MARCOS_EQUIPES_PERC_ATINGIMENTO SET PERC_ATINGIMENTO_MARCO_STRING = @PERC_ATINGIMENTO_MARCO_CONCATENADO
			FROM #TMP_EVOLUCAO_MARCOS_EQUIPES_PERC_ATINGIMENTO 
			WHERE MARCO_ESTRATEGICO = @MARCO_ESTRATEGICO_ATUAL
			AND ID_CONTROLE_SPREADSHEET = @ID_CONTROLE_SPREADSHEET

		SELECT TOP 1 @ID_EVOLUCAO_MARCOS_EQUIPES = ID_EVOLUCAO_MARCOS_EQUIPES, 
				@MARCO_ESTRATEGICO_ATUAL = MARCO_ESTRATEGICO_ATUAL,
				@PROXIMO_MARCO_ESTRATEGICO = PROXIMO_MARCO_ESTRATEGICO,
				@MARCO_ESTRATEGICO = MARCO_ESTRATEGICO,@CRITERIO_SUCESSO = CRITERIO_SUCESSO,@PERC_ATINGIMENTO_MARCO = PERC_ATINGIMENTO_MARCO
		FROM #TMP_EVOLUCAO_MARCOS_EQUIPES 
		WHERE ID_EVOLUCAO_MARCOS_EQUIPES > @ID_EVOLUCAO_MARCOS_EQUIPES
		AND MARCO_ESTRATEGICO NOT IN ('0','MARCOS ESTRATÉGICOS')
		ORDER BY ID_EVOLUCAO_MARCOS_EQUIPES
	END

	SET @PERC_ATINGIMENTO_MARCO_CONCATENADO = ''
	TRUNCATE TABLE #TMP_EVOLUCAO_MARCOS_EQUIPES

	SELECT TOP 1 @ID_EQUIPE = ID_EQUIPE,@ID_CONTROLE_SPREADSHEET = ID_CONTROLE_SPREADSHEET
	FROM VAGAS_DW.TMP_EVOLUCAO_MARCOS_EQUIPES
	WHERE /*ID_EQUIPE > @ID_EQUIPE
	AND */ 
	ID_CONTROLE_SPREADSHEET > @ID_CONTROLE_SPREADSHEET
	AND MARCO_ESTRATEGICO NOT IN ('0','MARCOS ESTRATÉGICOS')
	--AND ID_EQUIPE = 37
	--ORDER BY ID_EQUIPE
	ORDER BY ID_CONTROLE_SPREADSHEET 

	END

DECLARE @DATA_REFERENCIA SMALLDATETIME

SET @DATA_REFERENCIA  = CONVERT(SMALLDATETIME,CONVERT(VARCHAR,GETDATE(),112))

-- APAGAR CICLO QUE SERÁ RE-CARREGADO
DELETE VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES 
FROM VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES A
WHERE EXISTS ( SELECT * 
			   FROM #TMP_EVOLUCAO_MARCOS_EQUIPES_PERC_ATINGIMENTO A1
			   INNER JOIN VAGAS_DW.EQUIPES B1 ON B1.ID_EQUIPE = A1.ID_EQUIPE			   
			   INNER JOIN VAGAS_DW.CONTROLE_SPREADSHEET C1 ON C1.ID_CONTROLE_SPREADSHEET = A1.ID_CONTROLE_SPREADSHEET 
			   WHERE B1.NOME = A.NOME_EQUIPE
			   AND C1.SHEET_NAME = A.NOME_PLANILHA )

INSERT INTO VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES (NOME_EQUIPE,MARCO_ESTRATEGICO,CRITERIO_SUCESSO,
											  NOME_PLANILHA,URL_PLANILHA,PERC_ATINGIMENTO_MARCO,DATA_REFERENCIA)
SELECT C.NOME AS NOME_EQUIPE,
	   CONVERT(VARCHAR(250),MARCO_ESTRATEGICO) AS MARCO_ESTRATEGICO,
	   CRITERIO_SUCESSO,
	   D.SHEET_NAME AS NOME_PLANILHA,
	   D.URL AS URL_PLANILHA,
	   AVG(CONVERT(NUMERIC(5,2),CONVERT(INT,B.STRING))) / 100 AS PERC_ATINGIMENTO_REAL,
	   @DATA_REFERENCIA
FROM #TMP_EVOLUCAO_MARCOS_EQUIPES_PERC_ATINGIMENTO A
CROSS APPLY [VAGAS_DW].SPLIT_TABELA([VAGAS_DW].Tratar_String_Percentual([VAGAS_DW].Remover_ASCII_CHAR(PERC_ATINGIMENTO_MARCO_STRING))) B
INNER JOIN VAGAS_DW.EQUIPES C ON C.ID_EQUIPE = A.ID_EQUIPE
INNER JOIN VAGAS_DW.CONTROLE_SPREADSHEET D ON D.ID_CONTROLE_SPREADSHEET = A.ID_CONTROLE_SPREADSHEET
WHERE LEFT(MARCO_ESTRATEGICO,5) = 'Marco' 
GROUP BY CONVERT(VARCHAR(250),MARCO_ESTRATEGICO),
	   CRITERIO_SUCESSO,
	   C.NOME,
	   D.SHEET_NAME,
	   D.URL
ORDER BY C.NOME,CONVERT(VARCHAR(250),MARCO_ESTRATEGICO)

-- LEVAR DADOS DE CICLOS "ENCERRADOS"
INSERT INTO VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES (NOME_EQUIPE,MARCO_ESTRATEGICO,CRITERIO_SUCESSO,NOME_PLANILHA,URL_PLANILHA,
											  PERC_ATINGIMENTO_MARCO,DATA_REFERENCIA)
SELECT DISTINCT NOME_EQUIPE,MARCO_ESTRATEGICO,CRITERIO_SUCESSO,NOME_PLANILHA,URL_PLANILHA,PERC_ATINGIMENTO_MARCO,@DATA_REFERENCIA
FROM VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES A
WHERE DATA_REFERENCIA = ( SELECT MAX(DATA_REFERENCIA) 
						  FROM VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES
						  WHERE DATA_REFERENCIA <> @DATA_REFERENCIA )
AND NOT EXISTS ( SELECT * FROM VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES
				 WHERE NOME_EQUIPE = A.NOME_EQUIPE
				 AND NOME_PLANILHA = A.NOME_PLANILHA
				 AND DATA_REFERENCIA = @DATA_REFERENCIA  )

-- REMOVER DADOS DE DATAS ANTIGAS
DELETE VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES 
WHERE DATA_REFERENCIA <> @DATA_REFERENCIA

---- ATUALIZAR SEMANA E % DO CICLO ATUAL
UPDATE VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES SET 
	   -- CASO SEJA UM CICLO JÁ ENCERRADO COLOCAMOS 100%, SENÃO CALCULAMOS A PARTIR DA QUANTIDADE DE DIAS DE UM CICLO (BASEADO NA REUNIÃO AGENDADA)
	   -- CASO NÃO EXISTA UMA PRÓXIMA REUNIÃO AGENDADA CALCULAMOS COM UM CICLO DE 60 DIAS
		PERC_ESPERADO = CASE WHEN REPLACE(REPLACE(A.NOME_PLANILHA,'Ciclo',''),'º','') <> B.CICLO_ATUAL THEN 1
							ELSE CASE WHEN C.DATA_INICIO IS NULL OR D.DATA_INICIO IS NULL THEN 0 
									  ELSE CONVERT(NUMERIC(5,2),ISNULL(DATEDIFF(DAY,C.DATA_INICIO,A.DATA_REFERENCIA),0)) / 
											CONVERT(NUMERIC(5,2),ISNULL(DATEDIFF(DAY,C.DATA_INICIO,ISNULL(D.DATA_INICIO,DATEADD(DAY,60,C.DATA_INICIO))),1)) END
						END,
	   -- Multiplicamos o percentual baseado na data de referencia para sabermos em que semana estamos pela quantidade de semanas no ciclo
	   SEMANA_CICLO = CASE WHEN REPLACE(REPLACE(A.NOME_PLANILHA,'Ciclo',''),'º','') <> B.CICLO_ATUAL THEN 'CICLO FECHADO'
						   ELSE 'SEMANA ' + CONVERT(VARCHAR,CONVERT(TINYINT,CONVERT(NUMERIC(5,2),ISNULL(DATEDIFF(DAY,C.DATA_INICIO,A.DATA_REFERENCIA),0)) / 
										    CONVERT(NUMERIC(5,2),ISNULL(DATEDIFF(DAY,C.DATA_INICIO,D.DATA_INICIO),1)) 
											* DATEDIFF(WEEK,C.DATA_INICIO,D.DATA_INICIO))) END,
	   -- Calculo de quantas semanas o ciclo possui
	   QTD_SEMANAS_CICLO = CASE WHEN DATEDIFF(WEEK,C.DATA_INICIO,D.DATA_INICIO) < 0 THEN 0 ELSE DATEDIFF(WEEK,C.DATA_INICIO,D.DATA_INICIO) END
FROM VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES A
INNER JOIN VAGAS_DW.EQUIPES B ON B.NOME = A.NOME_EQUIPE
OUTER APPLY ( SELECT TOP 1 *
			  FROM VAGAS_DW.AGENDA 
			  WHERE NOME_EQUIPE_PARTICIPANTE = A.NOME_EQUIPE
			  AND TIPO_REUNIAO IN ('Definição Marcos Estratégicos','Negociação de Acordo + Marcos da VAGAS com a Equipe')
			  AND (    ( REPLACE(CICLO_ACORDO,'Ciclo','') = B.CICLO_ATUAL )
					OR ( REPLACE(CICLO_ACORDO,'Ciclo','') IS NULL 
						 AND TIPO_REUNIAO = 'Negociação de Acordo + Marcos da VAGAS com a Equipe' 
						 AND B.CICLO_ATUAL = 1  ) )
			  ORDER BY DATA_INICIO DESC ) C -- REUNIÃO DO CICLO ATUAL
OUTER APPLY ( SELECT TOP 1 *
			  FROM VAGAS_DW.AGENDA 
			  WHERE NOME_EQUIPE_PARTICIPANTE = A.NOME_EQUIPE
			  AND TIPO_REUNIAO IN ('Definição Marcos Estratégicos','Negociação de Acordo + Marcos da VAGAS com a Equipe')
			  AND REPLACE(CICLO_ACORDO,'Ciclo','') > B.CICLO_ATUAL
			  ORDER BY DATA_INICIO DESC ) D -- REUNIÃO DO PRÓXIMO CICLO 
--WHERE A.NOME_EQUIPE = 'Gestão de Contratos'
WHERE DATA_REFERENCIA = @DATA_REFERENCIA 

-- APAGAR DADOS DO MARCO 1 PARA QUE ELE NÃO INTERFIRA NA MÉDIA GERAL
DELETE FROM VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES WHERE LEFT(MARCO_ESTRATEGICO,7) = 'Marco 1'

-- APAGAR EQUIPES EM "DISCUSSÃO" (FÊ ESTÁ REVISANDO 20161027)
DELETE VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES 
FROM VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES 
WHERE NOME_EQUIPE IN ('Negócio Consultorias de R&S','VAGAS PaaS','Infra','Backend')


UPDATE VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES SET FLAG_ULT_CICLO = 1
FROM VAGAS_DW.EVOLUCAO_MARCOS_EQUIPES A 
INNER JOIN VAGAS_DW.EQUIPES B ON B.NOME = A.NOME_EQUIPE
WHERE LEFT(NOME_PLANILHA,1) = B.CICLO_ATUAL

DROP TABLE #TMP_EVOLUCAO_MARCOS_EQUIPES
DROP TABLE #TMP_EVOLUCAO_MARCOS_EQUIPES_PERC_ATINGIMENTO
DROP TABLE #TMP_LOG_ERRO
DROP TABLE #TMP_CONTROLE_SPREADSHEET
