-- =============================================
-- Author: Fiama
-- Create date: 16/11/2017
-- Description: Procedure para carga das tabelas temporárias (BD Stage) para alimentação do DW
-- =============================================

USE [VAGAS_DW] ;
GO

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE NAME = 'SPR_OLAP_Carga_Links_Transicao_Status_Homepages' AND SCHEMA_NAME(SCHEMA_ID) = 'VAGAS_DW')
DROP PROCEDURE [VAGAS_DW].[SPR_OLAP_Carga_Links_Transicao_Status_Homepages] ;
GO

CREATE PROCEDURE [VAGAS_DW].[SPR_OLAP_Carga_Links_Transicao_Status_Homepages]

AS
SET NOCOUNT ON

-- TRUNCAR TABELA FATO:
TRUNCATE TABLE [VAGAS_DW].[LINKS_TRANSICAO_STATUS] ;

-- DROP TABLE #TMP_DATA_NORMALIZADA ;
SELECT	TAB.ID_LINK ,
		TAB.NOME_LINK ,
		CASE
			WHEN DATEPART(WEEKDAY, TAB.DATA_VALOR_NORMALIZADO) = 7 -- SÁBADO
				THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,2,TAB.DATA_VALOR_NORMALIZADO),112)))
			WHEN DATEPART(WEEKDAY,TAB.DATA_VALOR_NORMALIZADO) = 1 -- DOMINGO
				THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,1,TAB.DATA_VALOR_NORMALIZADO),112)))
			ELSE TAB.DATA_VALOR_NORMALIZADO 
		END AS DATA_VALOR_NORMALIZADO ,
		TAB.DATA_VALOR_POSTERIOR ,
		TAB.CONTROLE ,
		TAB.FASES
INTO	#TMP_DATA_NORMALIZADA
FROM	
	(
		-- TRATAR CHAMADOS ABERTOS FORA DO HORÁRIO DE EXPEDIENTE (08:00 ÀS 20:00)
		SELECT	A.ID_LINK ,
				A.NOME_LINK ,
				A.DATA_VALOR_ANTERIOR ,
				A.DATA_VALOR_POSTERIOR ,
				A.CONTROLE ,
				A.FASES ,
				CASE
					WHEN DATEPART(HOUR, A.DATA_VALOR_ANTERIOR) >= 20 AND DATEPART(MINUTE, A.DATA_VALOR_ANTERIOR) > 0 OR DATEPART(HOUR, A.DATA_VALOR_ANTERIOR) > 20
						THEN DATEADD(HOUR, 8, DATEADD(DAY, 1, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, A.DATA_VALOR_ANTERIOR, 112))))
					WHEN DATEPART(HOUR, A.DATA_VALOR_ANTERIOR) < 8
						THEN DATEADD(HOUR, 8, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, A.DATA_VALOR_ANTERIOR, 112)))
					ELSE A.DATA_VALOR_ANTERIOR
				END AS DATA_VALOR_NORMALIZADO
		FROM	[VAGAS_DW].[TMP_LINKS_TRANSICAO_STATUS] AS A
	) AS TAB
ORDER BY
		1 ASC ;


-- TRATAR FERIADOS NACIONAIS + SP
UPDATE #TMP_DATA_NORMALIZADA SET DATA_VALOR_NORMALIZADO = CASE
				-- se o próx. dia for sábado adiantar 3 dias (seg.) 
				 WHEN DATEPART(WEEKDAY,DATEADD(DAY,1,DATA_VALOR_NORMALIZADO)) = 7 THEN DATEADD(HOUR, 8, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, DATEADD(DAY,3,DATA_VALOR_NORMALIZADO), 112))) 
				-- se o próx. dia for domingo adiantar 2 dias 
				 WHEN DATEPART(WEEKDAY,DATEADD(DAY,1,DATA_VALOR_NORMALIZADO)) = 1 THEN DATEADD(HOUR, 8, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, DATEADD(DAY,2,DATA_VALOR_NORMALIZADO), 112))) 
        ELSE DATEADD(HOUR, 8, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, DATEADD(DAY,1,DATA_VALOR_NORMALIZADO), 112))) END 
FROM #TMP_DATA_NORMALIZADA A
WHERE EXISTS ( SELECT 1
				FROM VAGAS_DW.FERIADOS_NACIONAIS -- CONTÉM OS FERIADOS BRA + SP ATE 2019
				WHERE DATA = CONVERT(SMALLDATETIME,CONVERT(VARCHAR,A.DATA_VALOR_NORMALIZADO,112)) )



-- INTERVALO DE DATA E HORA:
-- DROP TABLE #TMP_DATA_HORA ;
SELECT	A.Data AS DATA ,
		B.HORA AS HORA ,
		CONVERT(SMALLDATETIME, CONCAT(A.Data , ' ', B.HORA)) AS DATA_HORA
INTO	#TMP_DATA_HORA
FROM	[Dim].[Data] AS A	CROSS JOIN [Dim].[Hora] AS B
WHERE	A.Data >= (SELECT MIN(CONVERT(DATE, A1.DATA_VALOR_NORMALIZADO))
				   FROM #TMP_DATA_NORMALIZADA AS A1)
		AND A.Data <= CAST(GETDATE() AS DATE)
		AND NOT EXISTS (SELECT 1
						FROM [VAGAS_DW].[VAGAS_DW].[FERIADOS_NACIONAIS] AS A1
						WHERE A.Data = CONVERT(DATE, A1.DATA))
ORDER BY A.DATA ASC ;


-- CÁLCULO TME:
------------------------------------------------------------------------------------------
-- Intervalo de data e hora entre os campos DATA_VALOR_NORMALIZADO e DATA_VALOR_POSTERIOR:
------------------------------------------------------------------------------------------
-- DROP TABLE #FORMAT_DATA_HORA ;
SELECT	A.ID_LINK ,
		A.NOME_LINK ,
		A.FASES ,
		A.CONTROLE ,
		A.DATA_VALOR_NORMALIZADO ,
		A.DATA_VALOR_POSTERIOR ,
		CASE WHEN (CONVERT(DATE, A.DATA_VALOR_NORMALIZADO) = CONVERT(DATE, B.DATA_HORA) AND DATEPART(HOUR, A.DATA_VALOR_NORMALIZADO) = DATEPART(HOUR, B.DATA_HORA)) 
				THEN A.DATA_VALOR_NORMALIZADO
			 WHEN (CONVERT(DATE, A.DATA_VALOR_POSTERIOR) = CONVERT(DATE, B.DATA_HORA) AND DATEPART(HOUR, A.DATA_VALOR_POSTERIOR) = DATEPART(HOUR, B.DATA_HORA)) 
				THEN A.DATA_VALOR_POSTERIOR
			 ELSE B.DATA_HORA
		END AS DATA_HORA
INTO	#FORMAT_DATA_HORA
FROM	#TMP_DATA_NORMALIZADA AS A	LEFT OUTER JOIN #TMP_DATA_HORA AS B ON B.DATA_HORA >= DATEADD(MINUTE, DATEPART(MINUTE, A.DATA_VALOR_NORMALIZADO) * -1, A.DATA_VALOR_NORMALIZADO) AND B.DATA_HORA <= A.DATA_VALOR_POSTERIOR
ORDER BY DATA_HORA ASC ;

-- CONTROLE FORMAT_DATA_HORA:
-- DROP TABLE #CONTROLE_FORMAT_DATA_HORA ;
SELECT	A.ID_LINK ,
		A.FASES ,
		A.CONTROLE ,
		A.DATA_VALOR_NORMALIZADO ,
		A.DATA_VALOR_POSTERIOR ,
		COUNT(*) AS QTD_REGISTROS
INTO	#CONTROLE_FORMAT_DATA_HORA
FROM	#FORMAT_DATA_HORA AS A
GROUP BY
		A.ID_LINK ,
		A.FASES ,
		A.CONTROLE ,
		A.DATA_VALOR_NORMALIZADO ,
		A.DATA_VALOR_POSTERIOR ;

-- DROP TABLE #HORA_UTIL ;
SELECT	* ,
		CASE WHEN DATEPART(WEEKDAY, DATA_HORA) IN (1, 7) THEN 0
			 WHEN DATEPART(HOUR, DATA_HORA) >= 20 AND DATEPART(MINUTE, DATA_HORA) > 0 THEN 0
			 WHEN DATEPART(HOUR, DATA_HORA) BETWEEN 8 AND 20 THEN 1 ELSE 0 END AS HORA_UTIL
INTO	#HORA_UTIL
FROM	#FORMAT_DATA_HORA ;

-- DROP TABLE #INTERVALO_HORAS_UTEIS ;
SELECT	ID_LINK ,
		NOME_LINK ,
		FASES ,
		CONTROLE ,
		DATA_VALOR_NORMALIZADO ,
		DATA_VALOR_POSTERIOR ,
		DATA_HORA ,
		MENOR_DATA_HORA ,
		MAIOR_DATA_HORA ,
		HORA_UTIL
INTO	#INTERVALO_HORAS_UTEIS
FROM	#HORA_UTIL AS A				CROSS APPLY (SELECT	TOP 1 A1.DATA_HORA AS MENOR_DATA_HORA
												 FROM	#HORA_UTIL AS A1
												 WHERE	(A.ID_LINK = A1.ID_LINK 
														AND A.FASES = A1.FASES
														AND A.CONTROLE = A1.CONTROLE)
														AND CONVERT(DATE, A.DATA_HORA) = CONVERT(DATE, A1.DATA_HORA)
														AND A1.HORA_UTIL = 1
												 ORDER BY A1.DATA_HORA ASC) AS B
									CROSS APPLY (SELECT	TOP 1 CASE
																WHEN A2.QTD_REGISTROS = 1 AND CONVERT(DATE, A2.DATA_VALOR_NORMALIZADO) = CONVERT(DATE, A2.DATA_VALOR_POSTERIOR) AND DATEPART(HOUR, A2.DATA_VALOR_NORMALIZADO) = DATEPART(HOUR, A2.DATA_VALOR_POSTERIOR) AND DATEPART(MINUTE, A2.DATA_VALOR_NORMALIZADO) != DATEPART(MINUTE, A2.DATA_VALOR_POSTERIOR) THEN A2.DATA_VALOR_POSTERIOR
																ELSE A1.DATA_HORA
																END AS MAIOR_DATA_HORA
										 FROM	#HORA_UTIL AS A1	LEFT OUTER JOIN #CONTROLE_FORMAT_DATA_HORA AS A2 ON A.ID_LINK = A2.ID_LINK AND A.FASES = A2.FASES AND A.CONTROLE = A2.CONTROLE
										 WHERE	(A.ID_LINK = A1.ID_LINK
												AND A.FASES = A1.FASES
												AND A.CONTROLE = A1.CONTROLE)
												AND CONVERT(DATE, A.DATA_HORA) = CONVERT(DATE, A1.DATA_HORA)
												AND A1.HORA_UTIL = 1
												ORDER BY A1.DATA_HORA DESC) AS C
WHERE	A.HORA_UTIL = 1 ;

-- RESULTADO: Diferença de horas entre DATA_INCLUSAO_NORMALIZADA e DATA_PRM_ACAO no intervalo de horas úteis:
-- DROP TABLE #RESULTADO_INTERVALO_HORAS_UTEIS ;
SELECT	DISTINCT A.ID_LINK ,
				 A.NOME_LINK ,
				 A.FASES ,
				 A.DATA_VALOR_NORMALIZADO ,
				 A.DATA_VALOR_POSTERIOR ,
				 MENOR_DATA_HORA ,
				 MAIOR_DATA_HORA ,
				 A.CONTROLE ,
				 C.CATEGORIA_LINK ,
		CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 AS DIFERENCA_HORAS ,
		FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60) AS HORAS ,
		ROUND(ROUND(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 - FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60), 2)*60, 0) AS MINUTOS ,
		CONCAT(CONVERT(VARCHAR(2), FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60)), ':', CONVERT(VARCHAR(2), ROUND(ROUND(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 - FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60), 2)*60, 0))) AS HORA_MINUTO
INTO	#RESULTADO_INTERVALO_HORAS_UTEIS
FROM	#INTERVALO_HORAS_UTEIS AS A	INNER JOIN VAGAS_DW.VAGAS_DW.TMP_LINKS_TRANSICAO_STATUS AS B ON A.ID_LINK = B.ID_LINK
									LEFT OUTER JOIN [VAGAS_DW].[LINKS_HOMEPAGES] AS C ON A.ID_LINK = C.ID_LINK
ORDER BY A.DATA_VALOR_NORMALIZADO, A.DATA_VALOR_POSTERIOR ;

-- DROP TABLE #DIFERENCA_HORAS_UTEIS ;
SELECT	ID_LINK ,
		NOME_LINK ,
		FASES ,
		DATA_VALOR_NORMALIZADO ,
		DATA_VALOR_POSTERIOR ,
		CONTROLE ,
		CATEGORIA_LINK ,
		SUM(DIFERENCA_HORAS)/24 AS DIFERENCA_HORAS
INTO	#DIFERENCA_HORAS_UTEIS 
FROM	#RESULTADO_INTERVALO_HORAS_UTEIS
GROUP BY
		ID_LINK ,
		NOME_LINK ,
		FASES ,
		DATA_VALOR_NORMALIZADO ,
		DATA_VALOR_POSTERIOR ,
		CONTROLE ,
		CATEGORIA_LINK ;

INSERT INTO [VAGAS_DW].[LINKS_TRANSICAO_STATUS] (ID_LINK, NOME_LINK, FASES, DATA_VALOR_NORMALIZADO, DATA_VALOR_POSTERIOR, ESTAGIO_TRANSICAO, ESTAGIO_LEAD_TIME, MICRO_FASES, CATEGORIA_LINK, TEMPO_HORAS, TEMPO_DIAS)
SELECT	ID_LINK ,
		NOME_LINK ,
		FASES ,
		DATA_VALOR_NORMALIZADO ,
		DATA_VALOR_POSTERIOR ,
		CONTROLE ,
		CASE
			WHEN FASES = 'ELABORANDO -> APROVACAO' THEN 2
			WHEN FASES = 'APROVACAO -> ALTERACAO' THEN 3
			WHEN FASES = 'ALTERACAO -> ALTERANDO' THEN 4
			WHEN FASES = 'ALTERANDO -> APROVACAO' THEN 5
			WHEN FASES = 'APROVACAO -> CORRECAO' THEN 6
			WHEN FASES = 'CORRECAO -> CORRIGINDO' THEN 7
			WHEN FASES = 'CORRIGINDO -> APROVACAO' THEN 8
			WHEN FASES = 'APROVACAO -> IMPLANTACAO' THEN 9
			WHEN FASES = 'IMPLANTACAO -> IMPLANTANDO' THEN 10
			WHEN FASES = 'IMPLANTANDO -> PUBLICADO' THEN 11
		END AS ESTAGIO_LEAD_TIME ,
		CASE
			WHEN FASES IN ('ALTERACAO -> ALTERANDO', 'CORRECAO -> CORRIGINDO', 'IMPLANTACAO -> IMPLANTANDO')
				THEN 'Tempo de Espera na Fila'
			WHEN FASES IN ('ELABORANDO -> APROVACAO', 'ALTERANDO -> APROVACAO', 'CORRIGINDO -> APROVACAO', 'IMPLANTANDO -> PUBLICADO')
				THEN 'Tempo em Execução'
			WHEN FASES IN ('APROVACAO -> ALTERACAO', 'APROVACAO -> CORRECAO', 'APROVACAO -> IMPLANTACAO')
				THEN 'Tempo de Espera com o Cliente'
		END AS MICRO_FASES ,
		CATEGORIA_LINK ,
		DIFERENCA_HORAS ,
		DATEDIFF(DAY, DATA_VALOR_NORMALIZADO, DATA_VALOR_POSTERIOR) AS TEMPO_DIAS
FROM #DIFERENCA_HORAS_UTEIS ;
