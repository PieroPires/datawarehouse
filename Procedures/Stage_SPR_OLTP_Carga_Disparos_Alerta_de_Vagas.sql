-- =============================================
-- Author: Fiama
-- Create date: 19/09/2019
-- Description: Procedure com a alimentação da tabela de controle da quantidade de alerta enviado por vaga.
-- =============================================

USE [VAGAS_DW]
GO

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE NAME = 'SPR_OLTP_Carga_Controle_Alerta_de_Vagas' AND SCHEMA_NAME(SCHEMA_ID) = 'VAGAS_DW')
DROP PROCEDURE [VAGAS_DW].[SPR_OLTP_Carga_Controle_Alerta_de_Vagas]
GO

CREATE PROCEDURE [VAGAS_DW].[SPR_OLTP_Carga_Controle_Alerta_de_Vagas]
AS
SET NOCOUNT ON

-- Insere as vagas com envio de e-mail, mas que não constam na tabela controle:
INSERT INTO [VAGAS_DW].[CONTROLE_DISPAROS_ALERTA](COD_VAGA,COD_CRUZAMENTO,QTD_ENVIO)
SELECT	DISTINCT A.CodVaga_czMonitVagaCand AS COD_VAGA ,
		0 AS COD_CRUZAMENTO ,
		0 AS QTD_ENVIO
FROM	[recomendacao-data].[dbo].[CruzamentoMonitxVagaXCand] AS A
WHERE	NOT EXISTS (SELECT *
					FROM	[VAGAS_DW].[CONTROLE_DISPAROS_ALERTA] AS A1
					WHERE	A.CodVaga_czMonitVagaCand = A1.COD_VAGA) ;

-- Identifica se é carga FULL ou incrental:
IF EXISTS (SELECT *
		   FROM	  [VAGAS_DW].[CONTROLE_DISPAROS_ALERTA] AS A
		   WHERE  A.QTD_ENVIO = (SELECT SUM(CAST(A1.QTD_ENVIO AS BIGINT))
								 FROM	[VAGAS_DW].[CONTROLE_DISPAROS_ALERTA] AS A1)
				  AND A.QTD_ENVIO = 0
				  AND A.COD_CRUZAMENTO = (SELECT SUM(CAST(A1.COD_CRUZAMENTO AS BIGINT))
										  FROM	[VAGAS_DW].[CONTROLE_DISPAROS_ALERTA] AS A1)
				  AND A.COD_CRUZAMENTO = 0) 
-- Carga FULL
BEGIN
	SELECT	B.CodVaga_czMonitVagaCand AS COD_VAGA ,
			MAX(CodCzMonit_czMonitVagaCand) AS COD_CRUZAMENTO ,
			COUNT(*) AS QTD_ENVIO
	INTO	#TMP_DISPAROS_ALERTA
	FROM	[recomendacao-data].[dbo].[cruzamentoMonit] AS A	INNER JOIN [recomendacao-data].[dbo].[cruzamentoMonitxVagaXCand] AS B 
																ON A.Cod_CzMonit = B.CodCzMonit_czMonitVagaCand
	GROUP BY
			B.CodVaga_czMonitVagaCand

	-- Performance:
	CREATE NONCLUSTERED INDEX IDX_#TMP_DISPAROS_ALERTA_COD_CRUZAMENTO ON #TMP_DISPAROS_ALERTA (COD_CRUZAMENTO) ;
	CREATE NONCLUSTERED INDEX IDX_#TMP_DISPAROS_ALERTA_COD_VAGA ON #TMP_DISPAROS_ALERTA (COD_VAGA) ;

	-- Atualiza os registros na tabela controle:
	UPDATE	[VAGAS_DW].[CONTROLE_DISPAROS_ALERTA]
	SET		COD_CRUZAMENTO = B.COD_CRUZAMENTO ,
			QTD_ENVIO = B.QTD_ENVIO
	FROM	[VAGAS_DW].[CONTROLE_DISPAROS_ALERTA] AS A		INNER JOIN #TMP_DISPAROS_ALERTA AS B ON A.COD_VAGA = B.COD_VAGA
END

ELSE
-- Carga Incremental:	
BEGIN
	SELECT	A.COD_VAGA ,
			MAX(B.CodCzMonit_czMonitVagaCand) AS COD_CRUZAMENTO ,
			COUNT(*) AS QTD_ENVIO
	INTO	#TMP_DISPAROS_ALERTA_INCREMENTAL
	FROM	[VAGAS_DW].[CONTROLE_DISPAROS_ALERTA] AS A		INNER JOIN [recomendacao-data].[dbo].[cruzamentoMonitxVagaXCand] AS B ON A.COD_VAGA = B.CodVaga_czMonitVagaCand
	WHERE	B.CodCzMonit_czMonitVagaCand > A.COD_CRUZAMENTO
	GROUP BY
			A.COD_VAGA

	-- Performance:
	CREATE NONCLUSTERED INDEX IDX_#TMP_DISPAROS_ALERTA_INCREMENTAL_COD_CRUZAMENTO ON #TMP_DISPAROS_ALERTA_INCREMENTAL (COD_CRUZAMENTO) ;
	CREATE NONCLUSTERED INDEX IDX_#TMP_DISPAROS_ALERTA_INCREMENTAL_COD_VAGA ON #TMP_DISPAROS_ALERTA_INCREMENTAL (COD_VAGA) ;

	-- Atualização das informações na tabela controle:
	UPDATE	[VAGAS_DW].[CONTROLE_DISPAROS_ALERTA]
	SET		COD_CRUZAMENTO = B.COD_CRUZAMENTO ,
			QTD_ENVIO += B.QTD_ENVIO
	FROM	[VAGAS_DW].[CONTROLE_DISPAROS_ALERTA] AS A	INNER JOIN #TMP_DISPAROS_ALERTA_INCREMENTAL AS B ON A.COD_VAGA = B.COD_VAGA ;
END

-- Apaga as tabelas temporárias:
IF OBJECT_ID ('tempdb.dbo.#TMP_DISPAROS_ALERTA') IS NOT NULL
DROP TABLE #TMP_DISPAROS_ALERTA ;

IF OBJECT_ID ('tempdb.dbo.#TMP_DISPAROS_ALERTA_INCREMENTAL') IS NOT NULL
DROP TABLE #TMP_DISPAROS_ALERTA_INCREMENTAL ;