-- EXEC VAGAS_DW.SPR_OLAP_Carga_LTV
USE VAGAS_DW
GO

IF EXISTS ( SELECT * FROM SYS.OBJECTS WHERE NAME = 'SPR_OLAP_Carga_LTV' AND SCHEMA_NAME(SCHEMA_ID) = 'VAGAS_DW')
DROP PROCEDURE VAGAS_DW.SPR_OLAP_Carga_LTV
GO

-- =============================================
-- Author: Luiz Fernando Braz
-- Create date: 17/04/2017
-- Description: Procedure para alimentação do DW
-- =============================================
CREATE PROCEDURE VAGAS_DW.SPR_OLAP_Carga_LTV @DATA_REFERENCIA SMALLDATETIME = NULL

AS
SET NOCOUNT ON

IF @DATA_REFERENCIA IS NULL
	SET @DATA_REFERENCIA = CONVERT(SMALLDATETIME,CONVERT(VARCHAR,GETDATE(),112))

-- AJUSTE CARGA RETROATIVA (CONSIDERAR SEMPRE ULTIMO DIA DO MES REFERENCIA)
IF DAY(@DATA_REFERENCIA) = 1
	SELECT @DATA_REFERENCIA = DATEADD(MONTH,1,@DATA_REFERENCIA)-1

CREATE TABLE #TMP_CLIENTES (COD_CLI INT,CONTA_ID VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AI,CLIENTE_CRM VARCHAR(200) COLLATE SQL_Latin1_General_CP1_CI_AI,
							DATA_PRM_OPORTUNIDADE SMALLDATETIME,EX_CLIENTE BIT,DATA_RESCISAO SMALLDATETIME,VALOR_MENSALIDADE MONEY)

CREATE TABLE #TMP_CLIENTES_ATIVOS (COD_CLI INT,CONTA_ID VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AI,CLIENTE_CRM VARCHAR(200) COLLATE SQL_Latin1_General_CP1_CI_AI,
								   DATA_PRM_OPORTUNIDADE SMALLDATETIME,EX_CLIENTE BIT,DATA_RESCISAO SMALLDATETIME,VALOR_MENSALIDADE MONEY,
								   TEMPO_MESES SMALLINT,LTV MONEY,CLUSTER VARCHAR(25) COLLATE SQL_Latin1_General_CP1_CI_AI )
								   
INSERT INTO #TMP_CLIENTES (COD_CLI,CONTA_ID,CLIENTE_CRM,DATA_PRM_OPORTUNIDADE,EX_CLIENTE,DATA_RESCISAO,VALOR_MENSALIDADE)
SELECT A.COD_CLI,
	   A.CONTA_ID,
	   A.CLIENTE_CRM,
	   B.DATAFECHAMENTO AS DATA_PRM_OPORTUNIDADE,
	   A.EX_CLIENTE,
	   CASE WHEN C.DATA_RESCISAO < B.DATAFECHAMENTO THEN NULL
			ELSE C.DATA_RESCISAO END AS DATA_RESCISAO,
	   B.VALOR_MENSALIDADE
FROM VAGAS_DW.CLIENTES A
OUTER APPLY ( SELECT MAX(DATAFECHAMENTO) AS DATAFECHAMENTO, 
					 AVG(ValorProduto)  AS VALOR_MENSALIDADE
			  FROM VAGAS_DW.OPORTUNIDADES
			  WHERE CONTAID = A.CONTA_ID
			  AND PRODUTO = 'FIT'
			  AND FASE = 'fechado_e_ganho'
			  AND OPORTUNIDADECATEGORIA <> 'rescisao'
			  AND DATAFECHAMENTO <= @DATA_REFERENCIA ) B
OUTER APPLY ( SELECT MAX(DATAFECHAMENTO) AS DATA_RESCISAO
			  FROM VAGAS_DW.OPORTUNIDADES
			  WHERE CONTAID = A.CONTA_ID
			  AND OPORTUNIDADECATEGORIA = 'rescisao'
			  AND FASE = 'fechado_e_ganho'
			  AND DATAFECHAMENTO <= @DATA_REFERENCIA ) C				
WHERE A.DATA_REFERENCIA = ( SELECT MAX(DATA_REFERENCIA) FROM VAGAS_DW.CLIENTES )
AND A.CONTEM_FIT = 1
ORDER BY 1 DESC

-- ATUALIZAR COMO 12 MESES CLIENTES SEM DATA RESCISÃO
--UPDATE #TMP_CLIENTES SET DATA_RESCISAO = DATEADD(MONTH,12,DATA_PRM_OPORTUNIDADE)
--FROM #TMP_CLIENTES 
--WHERE EX_CLIENTE = 1 
--AND DATA_RESCISAO IS NULL

INSERT INTO #TMP_CLIENTES_ATIVOS (COD_CLI,CONTA_ID,CLIENTE_CRM,DATA_PRM_OPORTUNIDADE,EX_CLIENTE,DATA_RESCISAO,VALOR_MENSALIDADE)
SELECT * 
FROM #TMP_CLIENTES 
WHERE DATEADD(DAY,1,@DATA_REFERENCIA) BETWEEN DATA_PRM_OPORTUNIDADE AND ISNULL(DATA_RESCISAO,DATEADD(DAY,1,@DATA_REFERENCIA)) -- APENAS CLIENTES ATIVOS NA DATA REFERENCIA
ORDER BY DATA_RESCISAO DESC

-- CORREÇÃO DE CLIENTES QUE POSSUEM PRIMERA FATURA MENOR QUE A PRIMEIRA
UPDATE #TMP_CLIENTES_ATIVOS SET DATA_PRM_OPORTUNIDADE = ( SELECT MIN(DATA_VENCIMENTO) 
						  FROM VAGAS_DW.FATURAS
						  WHERE COD_CLI_CRM = A.CONTA_ID )
FROM #TMP_CLIENTES_ATIVOS A
WHERE DATA_PRM_OPORTUNIDADE > ( SELECT MIN(DATA_VENCIMENTO) 
						  FROM VAGAS_DW.FATURAS
						  WHERE COD_CLI_CRM = A.CONTA_ID ) 
						  
-- ATUALIZAR TEMPO EM MESES
UPDATE #TMP_CLIENTES_ATIVOS SET TEMPO_MESES = DATEDIFF(MONTH,DATA_PRM_OPORTUNIDADE,@DATA_REFERENCIA)
FROM #TMP_CLIENTES_ATIVOS 

-- GERAR MEDIA POR CLUSTER
SELECT B.CLUSTER COLLATE SQL_Latin1_General_CP1_CI_AI AS CLUSTER,
	   AVG(TEMPO_MESES) AS MEDIA_TEMPO_MESES
INTO #TMP_MEDIA_TEMPO_MESES
FROM #TMP_CLIENTES_ATIVOS A
INNER JOIN VAGAS_DW.CLUSTER_CLIENTES B ON B.COD_CLI = A.COD_CLI
GROUP BY B.CLUSTER

-- ATUALIZAR CLUSTER
UPDATE #TMP_CLIENTES_ATIVOS SET CLUSTER = CASE WHEN C.CLUSTER IS NULL 
											THEN CASE WHEN A.TEMPO_MESES > ( SELECT MIN(MEDIA_TEMPO_MESES) 
																			 FROM #TMP_MEDIA_TEMPO_MESES 
																			 WHERE CLUSTER = 'SIMPLIFICA' ) -- NORMALIZAR CASOS SEM CLUSTER
													  THEN 'SUPERA'
													  ELSE 'SIMPLIFICA' END
											ELSE C.CLUSTER END 
FROM #TMP_CLIENTES_ATIVOS A
LEFT OUTER JOIN VAGAS_DW.CLUSTER_CLIENTES B ON B.COD_CLI = A.COD_CLI
LEFT OUTER JOIN #TMP_MEDIA_TEMPO_MESES C ON C.CLUSTER = B.CLUSTER

-- ATUALIZAR LTV
UPDATE #TMP_CLIENTES_ATIVOS SET LTV = A.VALOR_MENSALIDADE * B.MEDIA_TEMPO_MESES
FROM #TMP_CLIENTES_ATIVOS A
LEFT OUTER JOIN #TMP_MEDIA_TEMPO_MESES B ON B.CLUSTER = A.CLUSTER


-- LIMPAR DADOS EXISTENTES PARA A DATA REFERENCIA DO MÊS (MANTER SEMPRE APENAS UMA DATA REF. POR MÊS)
DELETE FROM VAGAS_DW.LTV WHERE MONTH(DATA_REFERENCIA) = MONTH(@DATA_REFERENCIA) AND YEAR(DATA_REFERENCIA) = YEAR(@DATA_REFERENCIA)

-- INSERIR DADOS NA TABELA FATO
INSERT INTO VAGAS_DW.LTV (DATA_REFERENCIA,COD_CLI,CONTA_ID,CLIENTE,TEMPO_MESES,LTV,VALOR_MENSALIDADE,CLUSTER)
SELECT @DATA_REFERENCIA, 
	   COD_CLI,
	   CONTA_ID,
	   CLIENTE_CRM AS CLIENTE,
	   TEMPO_MESES,
	   LTV * 0.8 AS LTV,
	   VALOR_MENSALIDADE,
	   CLUSTER
FROM #TMP_CLIENTES_ATIVOS

DROP TABLE #TMP_CLIENTES
DROP TABLE #TMP_CLIENTES_ATIVOS
DROP TABLE #TMP_MEDIA_TEMPO_MESES

GO

