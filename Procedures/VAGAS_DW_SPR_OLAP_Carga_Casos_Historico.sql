-- =============================================
-- Author: Fiama
-- Create date: 19/12/2017
-- Description: Procedure para carga das tabelas temporárias (BD Stage) para alimentação do DW
-- =============================================

USE [VAGAS_DW] ;
GO

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE NAME = 'SPR_OLAP_Carga_Casos_Historico' AND SCHEMA_NAME(SCHEMA_ID) = 'VAGAS_DW')
DROP PROCEDURE [VAGAS_DW].[SPR_OLAP_Carga_Casos_Historico] ;
GO

CREATE PROCEDURE [VAGAS_DW].[SPR_OLAP_Carga_Casos_Historico]

AS
SET NOCOUNT ON

-- TRUNCAR TABELA FATO:
TRUNCATE TABLE [VAGAS_DW].[CASOS_HISTORICO] ;

-- DROP TABLE #TMP_DATA_NORMALIZADA ;
SELECT	TAB.ID_CASO ,
		TAB.NUMERO_CASO ,
		TAB.VALOR_ANTERIOR ,
		TAB.NOVO_VALOR ,
		TAB.ALTERADOR ,
		CASE
			WHEN DATEPART(WEEKDAY, TAB.DATA_VALOR_NORMALIZADO) = 7 -- SÁBADO
				THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,2,TAB.DATA_VALOR_NORMALIZADO),112)))
			WHEN DATEPART(WEEKDAY,TAB.DATA_VALOR_NORMALIZADO) = 1 -- DOMINGO
				THEN DATEADD(HOUR,8,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,DATEADD(DAY,1,TAB.DATA_VALOR_NORMALIZADO),112)))
			ELSE TAB.DATA_VALOR_NORMALIZADO 
		END AS DATA_VALOR_NORMALIZADO ,
		TAB.DATA_ALTERACAO ,
		TAB.ESTAGIO_TRANSICAO
INTO	#TMP_DATA_NORMALIZADA
FROM	
	(
		-- TRATAR CHAMADOS ABERTOS FORA DO HORÁRIO DE EXPEDIENTE (08:00 ÀS 19:00)
		SELECT	A.ID_CASO ,
				A.NUMERO_CASO ,
				A.VALOR_ANTERIOR ,
				A.NOVO_VALOR ,
				A.ALTERADOR ,
				A.DATA_ALTERACAO_ANTERIOR ,
				A.DATA_ALTERACAO ,
				A.ESTAGIO_TRANSICAO ,
				CASE
					WHEN DATEPART(HOUR, A.DATA_ALTERACAO_ANTERIOR) >= 19 AND DATEPART(MINUTE, A.DATA_ALTERACAO_ANTERIOR) > 0 OR DATEPART(HOUR, A.DATA_ALTERACAO_ANTERIOR) > 19
						THEN DATEADD(HOUR, 8, DATEADD(DAY, 1, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, A.DATA_ALTERACAO_ANTERIOR, 112))))
					WHEN DATEPART(HOUR, A.DATA_ALTERACAO_ANTERIOR) < 8
						THEN DATEADD(HOUR, 8, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, A.DATA_ALTERACAO_ANTERIOR, 112)))
					ELSE A.DATA_ALTERACAO_ANTERIOR
				END AS DATA_VALOR_NORMALIZADO
		FROM	[VAGAS_DW].[TMP_CASOS_HISTORICO] AS A
	) AS TAB
ORDER BY
		1 ASC ;



-- TRATAR FERIADOS NACIONAIS + SP
UPDATE #TMP_DATA_NORMALIZADA SET DATA_VALOR_NORMALIZADO = CASE
				-- se o próx. dia for sábado adiantar 3 dias (seg.) 
				 WHEN DATEPART(WEEKDAY,DATEADD(DAY,1,DATA_VALOR_NORMALIZADO)) = 7 THEN DATEADD(HOUR, 8, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, DATEADD(DAY,3,DATA_VALOR_NORMALIZADO), 112))) 
				-- se o próx. dia for domingo adiantar 2 dias 
				 WHEN DATEPART(WEEKDAY,DATEADD(DAY,1,DATA_VALOR_NORMALIZADO)) = 1 THEN DATEADD(HOUR, 8, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, DATEADD(DAY,2,DATA_VALOR_NORMALIZADO), 112))) 
        ELSE DATEADD(HOUR, 8, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, DATEADD(DAY,1,DATA_VALOR_NORMALIZADO), 112))) END 
FROM #TMP_DATA_NORMALIZADA A
WHERE EXISTS ( SELECT 1
				FROM VAGAS_DW.FERIADOS_NACIONAIS -- CONTÉM OS FERIADOS BRA + SP ATE 2019
				WHERE DATA = CONVERT(SMALLDATETIME,CONVERT(VARCHAR,A.DATA_VALOR_NORMALIZADO,112)) )


-- INTERVALO DE DATA E HORA:
-- DROP TABLE #TMP_DATA_HORA ;
SELECT	A.Data AS DATA ,
		B.HORA AS HORA ,
		CONVERT(SMALLDATETIME, CONCAT(A.Data , ' ', B.HORA)) AS DATA_HORA
INTO	#TMP_DATA_HORA
FROM	[Dim].[Data] AS A	CROSS JOIN [Dim].[Hora] AS B
WHERE	A.Data >= (SELECT MIN(CONVERT(DATE, A1.DATA_VALOR_NORMALIZADO))
				   FROM #TMP_DATA_NORMALIZADA AS A1)
		AND A.Data <= CAST(GETDATE() AS DATE)
		AND NOT EXISTS (SELECT 1
						FROM [VAGAS_DW].[VAGAS_DW].[FERIADOS_NACIONAIS] AS A1
						WHERE A.Data = CONVERT(DATE, A1.DATA))
ORDER BY A.DATA ASC ;


-- CÁLCULO TME:
------------------------------------------------------------------------------------------
-- Intervalo de data e hora entre os campos DATA_VALOR_NORMALIZADO e DATA_VALOR_POSTERIOR:
------------------------------------------------------------------------------------------
-- DROP TABLE #FORMAT_DATA_HORA ;
SELECT	A.ID_CASO ,
		A.NUMERO_CASO ,
		A.DATA_VALOR_NORMALIZADO ,
		A.DATA_ALTERACAO ,
		A.VALOR_ANTERIOR ,
		A.NOVO_VALOR ,
		A.ESTAGIO_TRANSICAO ,
		A.ALTERADOR ,
		CASE WHEN (CONVERT(DATE, A.DATA_VALOR_NORMALIZADO) = CONVERT(DATE, B.DATA_HORA) AND DATEPART(HOUR, A.DATA_VALOR_NORMALIZADO) = DATEPART(HOUR, B.DATA_HORA)) 
				THEN A.DATA_VALOR_NORMALIZADO
			 WHEN (CONVERT(DATE, A.DATA_ALTERACAO) = CONVERT(DATE, B.DATA_HORA) AND DATEPART(HOUR, A.DATA_ALTERACAO) = DATEPART(HOUR, B.DATA_HORA)) 
				THEN A.DATA_ALTERACAO
			 ELSE B.DATA_HORA
		END AS DATA_HORA
INTO	#FORMAT_DATA_HORA
FROM	#TMP_DATA_NORMALIZADA AS A	LEFT OUTER JOIN #TMP_DATA_HORA AS B ON B.DATA_HORA >= DATEADD(MINUTE, DATEPART(MINUTE, A.DATA_VALOR_NORMALIZADO) * -1, A.DATA_VALOR_NORMALIZADO) AND B.DATA_HORA <= A.DATA_ALTERACAO
ORDER BY DATA_HORA ASC ;

-- CONTROLE FORMAT_DATA_HORA:
-- DROP TABLE #CONTROLE_FORMAT_DATA_HORA ;
SELECT	A.ID_CASO ,
		A.NUMERO_CASO ,
		A.VALOR_ANTERIOR ,
		A.NOVO_VALOR ,
		A.ALTERADOR ,
		A.ESTAGIO_TRANSICAO ,
		A.DATA_VALOR_NORMALIZADO ,
		A.DATA_ALTERACAO ,
		COUNT(*) AS QTD_REGISTROS
INTO	#CONTROLE_FORMAT_DATA_HORA
FROM	#FORMAT_DATA_HORA AS A
GROUP BY
		A.ID_CASO ,
		A.NUMERO_CASO ,
		A.VALOR_ANTERIOR ,
		A.NOVO_VALOR ,
		A.ALTERADOR ,
		A.ESTAGIO_TRANSICAO ,
		A.DATA_VALOR_NORMALIZADO ,
		A.DATA_ALTERACAO ;


-- DROP TABLE #HORA_UTIL ;
SELECT	* ,
		CASE WHEN DATEPART(WEEKDAY, DATA_HORA) IN (1, 7) THEN 0
			 WHEN DATEPART(HOUR, DATA_HORA) >= 19 AND DATEPART(MINUTE, DATA_HORA) > 0 THEN 0
			 WHEN DATEPART(HOUR, DATA_HORA) BETWEEN 8 AND 19 THEN 1 ELSE 0 END AS HORA_UTIL
INTO	#HORA_UTIL
FROM	#FORMAT_DATA_HORA ;

-- DROP TABLE #INTERVALO_HORAS_UTEIS ;
SELECT	ID_CASO ,
		NUMERO_CASO ,
		VALOR_ANTERIOR ,
		NOVO_VALOR ,
		DATA_VALOR_NORMALIZADO ,
		DATA_ALTERACAO ,
		DATA_HORA ,
		MENOR_DATA_HORA ,
		MAIOR_DATA_HORA ,
		HORA_UTIL ,
		ALTERADOR ,
		ESTAGIO_TRANSICAO
INTO	#INTERVALO_HORAS_UTEIS
FROM	#HORA_UTIL AS A				
									CROSS APPLY (SELECT	TOP 1 CASE
																WHEN A2.QTD_REGISTROS = 1 AND CONVERT(DATE, A2.DATA_VALOR_NORMALIZADO) = CONVERT(DATE, A2.DATA_ALTERACAO) AND DATEPART(HOUR, A2.DATA_VALOR_NORMALIZADO) = DATEPART(HOUR, A2.DATA_ALTERACAO) AND DATEPART(MINUTE, A2.DATA_VALOR_NORMALIZADO) != DATEPART(MINUTE, A2.DATA_ALTERACAO) THEN A2.DATA_ALTERACAO
																ELSE A1.DATA_HORA
																END AS MAIOR_DATA_HORA
										 FROM	#HORA_UTIL AS A1	LEFT OUTER JOIN #CONTROLE_FORMAT_DATA_HORA AS A2 ON A.ID_CASO = A2.ID_CASO AND A.NUMERO_CASO = A2.NUMERO_CASO AND A.VALOR_ANTERIOR = A2.VALOR_ANTERIOR  AND A.NOVO_VALOR = A2.NOVO_VALOR AND A.ESTAGIO_TRANSICAO = A2.ESTAGIO_TRANSICAO AND A.ALTERADOR = A2.ALTERADOR
										 WHERE	(A.ID_CASO = A1.ID_CASO 
												AND A.NUMERO_CASO = A1.NUMERO_CASO
												AND A.VALOR_ANTERIOR = A1.VALOR_ANTERIOR
												AND A.NOVO_VALOR = A1.NOVO_VALOR
												AND A.ESTAGIO_TRANSICAO = A1.ESTAGIO_TRANSICAO
												AND A.ALTERADOR = A1.ALTERADOR)
												AND CONVERT(DATE, A.DATA_HORA) = CONVERT(DATE, A1.DATA_HORA)
												AND A1.HORA_UTIL = 1
												ORDER BY A1.DATA_HORA DESC) AS C


									CROSS APPLY (SELECT	TOP 1 IIF(A1.DATA_HORA = C.MAIOR_DATA_HORA AND A1.NUMERO_CASO IN (SELECT A1.NUMERO_CASO FROM #CONTROLE_FORMAT_DATA_HORA AS A1), DATEADD(HOUR, 8, CONVERT(SMALLDATETIME, CONVERT(VARCHAR, A1.DATA_HORA, 112))), A1.DATA_HORA) AS MENOR_DATA_HORA
												 FROM	#HORA_UTIL AS A1
												 WHERE	(A.ID_CASO = A1.ID_CASO 
														AND A.NUMERO_CASO = A1.NUMERO_CASO
														AND A.VALOR_ANTERIOR = A1.VALOR_ANTERIOR
														AND A.NOVO_VALOR = A1.NOVO_VALOR
														AND A.ESTAGIO_TRANSICAO = A1.ESTAGIO_TRANSICAO
														AND A.ALTERADOR = A1.ALTERADOR)
														AND CONVERT(DATE, A.DATA_HORA) = CONVERT(DATE, A1.DATA_HORA)
														AND A1.HORA_UTIL = 1
												 ORDER BY A1.DATA_HORA ASC) AS B
WHERE	A.HORA_UTIL = 1 ;


-----------------------------------
-- Atribuição da DATA_HORA inicial:
-----------------------------------
UPDATE	#INTERVALO_HORAS_UTEIS
SET		MENOR_DATA_HORA = DATA_HORA
FROM	#INTERVALO_HORAS_UTEIS AS A
WHERE	A.ESTAGIO_TRANSICAO = 1 ;


-- RESULTADO: Diferença de horas entre DATA_VALOR_NORMALIZADO e DATA_ALTERACAO no intervalo de horas úteis:
-- DROP TABLE #RESULTADO_INTERVALO_HORAS_UTEIS ;
SELECT	DISTINCT A.ID_CASO ,
				 A.NUMERO_CASO ,
				 A.VALOR_ANTERIOR ,
				 A.NOVO_VALOR ,
				 A.ALTERADOR ,
				 A.DATA_VALOR_NORMALIZADO ,
				 A.DATA_ALTERACAO ,
				 MENOR_DATA_HORA ,
				 MAIOR_DATA_HORA ,
				 A.ESTAGIO_TRANSICAO ,
		CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 AS DIFERENCA_HORAS ,
		FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60) AS HORAS ,
		ROUND(ROUND(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 - FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60), 2)*60, 0) AS MINUTOS ,
		CONCAT(CONVERT(VARCHAR(2), FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60)), ':', CONVERT(VARCHAR(2), ROUND(ROUND(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60 - FLOOR(CONVERT(FLOAT, DATEDIFF(MINUTE, MENOR_DATA_HORA, MAIOR_DATA_HORA))/60), 2)*60, 0))) AS HORA_MINUTO
INTO	#RESULTADO_INTERVALO_HORAS_UTEIS
FROM	#INTERVALO_HORAS_UTEIS AS A	INNER JOIN VAGAS_DW.VAGAS_DW.TMP_CASOS_HISTORICO AS B ON A.ID_CASO = B.ID_CASO
ORDER BY A.DATA_VALOR_NORMALIZADO, A.DATA_ALTERACAO ;


-- DROP TABLE #DIFERENCA_HORAS_UTEIS ;
SELECT	ID_CASO ,
		NUMERO_CASO ,
		VALOR_ANTERIOR ,
		NOVO_VALOR ,
		ALTERADOR ,
		DATA_VALOR_NORMALIZADO ,
		DATA_ALTERACAO ,
		ESTAGIO_TRANSICAO ,
		SUM(DIFERENCA_HORAS)/24 AS DIFERENCA_HORAS
INTO	#DIFERENCA_HORAS_UTEIS 
FROM	#RESULTADO_INTERVALO_HORAS_UTEIS
GROUP BY
		ID_CASO ,
		NUMERO_CASO ,
		VALOR_ANTERIOR ,
		NOVO_VALOR ,
		ALTERADOR ,
		DATA_VALOR_NORMALIZADO ,
		DATA_ALTERACAO ,
		ESTAGIO_TRANSICAO ;


-- Populando a tabela temporária:
SELECT	A.ID_CASO , 
		A.NUMERO_CASO , 
		A.VALOR_ANTERIOR , 
		A.NOVO_VALOR ,	
		A.ALTERADOR , 
		CONVERT(SMALLDATETIME, CONVERT(VARCHAR, A.DATA_VALOR_NORMALIZADO, 112)) AS DATA_VALOR_NORMALIZADO ,	
		CONVERT(SMALLDATETIME, CONVERT(VARCHAR, A.DATA_ALTERACAO, 112)) AS DATA_ALTERACAO ,	
		A.ESTAGIO_TRANSICAO , 
		A.DIFERENCA_HORAS AS TEMPO_TRANSICAO
INTO	#TMP_CASOS_HISTORICO_BASE_CALC
FROM	#DIFERENCA_HORAS_UTEIS AS A ;


------------------------------------------------------
-- Cruzamento do valor hora homem com o CUBO de CASOS:
------------------------------------------------------
-- Primeira data de recebimento:
DECLARE	@PRM_DATA_RECEBIMENTO DATE ;
SET		@PRM_DATA_RECEBIMENTO = ( SELECT	MIN(A.DATA_RECEBIMENTO)
								  FROM		[VAGAS_DW].[CUSTO_MEDIO_PESSOA_HORA] AS A ) ;

DECLARE	@PRM_VAL_DATA_RECEBIMENTO MONEY ;
SET		@PRM_VAL_DATA_RECEBIMENTO = ( SELECT	A.VALOR_HORA_HOMEM
									  FROM		[VAGAS_DW].[CUSTO_MEDIO_PESSOA_HORA] AS A
									  WHERE		A.DATA_RECEBIMENTO = ( SELECT	MIN(A1.DATA_RECEBIMENTO)
																	   FROM		[VAGAS_DW].[CUSTO_MEDIO_PESSOA_HORA] AS A1 ) ) ;


-- Última data de recebimento:
DECLARE	@ULT_DATA_RECEBIMENTO DATE ;
SET		@ULT_DATA_RECEBIMENTO = ( SELECT	MAX(A.DATA_RECEBIMENTO)
								  FROM		[VAGAS_DW].[CUSTO_MEDIO_PESSOA_HORA] AS A ) ;

DECLARE	@ULT_VAL_DATA_RECEBIMENTO MONEY ;
SET		@ULT_VAL_DATA_RECEBIMENTO = ( SELECT	A.VALOR_HORA_HOMEM
									  FROM		[VAGAS_DW].[CUSTO_MEDIO_PESSOA_HORA] AS A
									  WHERE		A.DATA_RECEBIMENTO = ( SELECT	MAX(A1.DATA_RECEBIMENTO)
																	   FROM		[VAGAS_DW].[CUSTO_MEDIO_PESSOA_HORA] AS A1 ) ) ;

SELECT	A.ID_CASO ,
		A.NUMERO_CASO ,
		A.VALOR_ANTERIOR ,
		A.NOVO_VALOR ,
		A.ALTERADOR ,
		A.DATA_VALOR_NORMALIZADO ,
		A.DATA_ALTERACAO ,
		A.ESTAGIO_TRANSICAO ,
		A.TEMPO_TRANSICAO ,
		CASE
			WHEN A.DATA_VALOR_NORMALIZADO < @PRM_DATA_RECEBIMENTO
				 AND (D.DATA_RECEBIMENTO IS NULL
					  AND B.DATA_REC_ANTERIOR IS NULL)
				THEN @PRM_DATA_RECEBIMENTO
			WHEN A.DATA_VALOR_NORMALIZADO > @ULT_DATA_RECEBIMENTO
				 AND (D.DATA_RECEBIMENTO IS NULL
					  AND C.DATA_REC_PROXIMA IS NULL)
				THEN @ULT_DATA_RECEBIMENTO
			ELSE D.DATA_RECEBIMENTO
		END AS DATA_RECEBIMENTO ,

		CASE
			WHEN A.DATA_VALOR_NORMALIZADO < @PRM_DATA_RECEBIMENTO
				 AND (D.DATA_RECEBIMENTO IS NULL
					  AND B.DATA_REC_ANTERIOR IS NULL)
				THEN @PRM_VAL_DATA_RECEBIMENTO
			WHEN A.DATA_VALOR_NORMALIZADO > @ULT_DATA_RECEBIMENTO
				 AND (D.DATA_RECEBIMENTO IS NULL
					  AND C.DATA_REC_PROXIMA IS NULL)
				THEN @ULT_VAL_DATA_RECEBIMENTO
			ELSE D.VALOR_HORA_HOMEM
		END AS VALOR_HORA_HOMEM
INTO	#TMP_CASOS_HISTORICO
FROM	#TMP_CASOS_HISTORICO_BASE_CALC AS A			OUTER APPLY ( SELECT  TOP 1 A1.DATA_RECEBIMENTO AS DATA_REC_ANTERIOR 
															  FROM		[VAGAS_DW].[CUSTO_MEDIO_PESSOA_HORA] AS A1
															  WHERE		A1.DATA_RECEBIMENTO <= A.DATA_VALOR_NORMALIZADO
															  ORDER BY
																		A1.DATA_RECEBIMENTO DESC) AS B
													OUTER APPLY ( SELECT	TOP 1 A1.DATA_RECEBIMENTO AS DATA_REC_PROXIMA
																	FROM		[VAGAS_DW].[CUSTO_MEDIO_PESSOA_HORA] AS A1
																	WHERE		A1.DATA_RECEBIMENTO > A.DATA_VALOR_NORMALIZADO
																	ORDER BY
																			A1.DATA_RECEBIMENTO ASC ) AS C
												LEFT OUTER JOIN [VAGAS_DW].[CUSTO_MEDIO_PESSOA_HORA] AS D ON D.DATA_RECEBIMENTO >= B.DATA_REC_ANTERIOR
																											 AND D.DATA_RECEBIMENTO < ISNULL(C.DATA_REC_PROXIMA, '20900101')
ORDER BY
		A.DATA_VALOR_NORMALIZADO ;




INSERT INTO [VAGAS_DW].[CASOS_HISTORICO] (ID_CASO, NUMERO_CASO, VALOR_ANTERIOR, NOVO_VALOR,	ALTERADOR, DATA_VALOR_NORMALIZADO,	DATA_ALTERACAO,	ESTAGIO_TRANSICAO, TEMPO_TRANSICAO, DATA_RECEBIMENTO, VALOR_HORA_HOMEM)
SELECT	A.ID_CASO ,
		A.NUMERO_CASO ,
		A.VALOR_ANTERIOR ,
		A.NOVO_VALOR ,
		A.ALTERADOR ,
		A.DATA_VALOR_NORMALIZADO ,
		A.DATA_ALTERACAO ,
		A.ESTAGIO_TRANSICAO ,
		A.TEMPO_TRANSICAO ,
		A.DATA_RECEBIMENTO ,
		A.VALOR_HORA_HOMEM
FROM	#TMP_CASOS_HISTORICO AS A ;



-- Ajuste campo FLAG_SUP_DM_EQUIP para CASOS com VALOR_ANTERIOR de SUPORTE A EMPRESAS, e VALOR_ANTERIOR existente em demais equipes:
UPDATE	[VAGAs_DW].[CASOS_HISTORICO]
SET		FLAG_SUP_DM_EQUIP = 'SIM'
FROM	[VAGAS_DW].[CASOS_HISTORICO] AS A
WHERE	A.VALOR_ANTERIOR IN ('EM_PROGRESSO', 'FECHADO', 'FECHADO_SEM_RESPOSTA')
		AND EXISTS ( SELECT	1
					 FROM	[VAGAS_DW].[CASOS_HISTORICO] AS A1 
					 WHERE	A1.VALOR_ANTERIOR IN ('ESCALADO', 'AGUARDANDO_SOLICITANTE')
							AND A.NUMERO_CASO = A1.NUMERO_CASO ) ;

-- Ajuste campo FLAG_SUP_DM_EQUIP para CASOS com VALOR_ANTERIOR <> de SUPORTE A EMPRESAS, e VALOR_ANTERIOR existente em demais equipes:
UPDATE	[VAGAs_DW].[CASOS_HISTORICO]
SET		FLAG_SUP_DM_EQUIP = 'SIM'
FROM	[VAGAS_DW].[CASOS_HISTORICO] AS A
WHERE	A.VALOR_ANTERIOR IN ('ESCALADO', 'AGUARDANDO_SOLICITANTE')
		AND EXISTS ( SELECT	1
					 FROM	[VAGAS_DW].[CASOS_HISTORICO] AS A1 
					 WHERE	A1.VALOR_ANTERIOR IN ('EM_PROGRESSO', 'FECHADO', 'FECHADO_SEM_RESPOSTA')
							AND A.NUMERO_CASO = A1.NUMERO_CASO ) ;


-- Ajuste no campo TEMPO_TRANSICAO, pra casos reabertos, isto é, STATUS_ANTERIOR = 'FECHADO', vamos zerar o valor:
UPDATE	[VAGAS_DW].[CASOS_HISTORICO]
SET		TEMPO_TRANSICAO = 0
FROM	[VAGAS_DW].[CASOS_HISTORICO] AS A
WHERE	A.VALOR_ANTERIOR IN ('FECHADO', 'FECHADO_SEM_RESPOSTA') ;