-- select * from vagas_dw.TMP_VAGAS
-- EXEC VAGAS_DW.SPR_Carga_Vagas
USE VAGAS_DW
GO

IF EXISTS ( SELECT * FROM SYS.OBJECTS WHERE NAME = 'SPR_OLAP_Carga_Vagas' AND SCHEMA_NAME(SCHEMA_ID) = 'VAGAS_DW')
DROP PROCEDURE VAGAS_DW.SPR_OLAP_Carga_Vagas
GO

-- =============================================
-- Author: Luiz Fernando Braz
-- Create date: 29/09/2015
-- Description: Procedure para alimentação do DW
-- =============================================
CREATE PROCEDURE VAGAS_DW.SPR_OLAP_Carga_Vagas

AS
SET NOCOUNT ON

DECLARE @DT_CARGA_INICIO SMALLDATETIME,
		@DT_CARGA_FIM SMALLDATETIME

SELECT @DT_CARGA_INICIO = MIN(DATA_ATUALIZACAO),
	   @DT_CARGA_FIM = DATEADD(DAY,1,MAX(DATA_ATUALIZACAO))	
FROM VAGAS_DW.TMP_VAGAS

DELETE VAGAS_DW.VAGAS 
FROM VAGAS_DW.VAGAS A
WHERE EXISTS ( SELECT 1 FROM VAGAS_DW.TMP_VAGAS 
				WHERE VAGAS_Cod_Vaga = A.VAGAS_Cod_Vaga )


-- Enriquecendo campos de CNAES:
UPDATE [VAGAS_DW].[TMP_VAGAS]
SET CNAE_SECAO_ID	= B.CNAE_SECAO_ID ,
	CNAE_SECAO		= B.CNAE_SECAO ,
	CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID ,
	CNAE_DIVISAO	= B.CNAE_DIVISAO ,
	CNAE_CLASSE_ID	= B.CNAE_CLASSE_ID ,
	CNAE_CLASSE		= B.CNAE_CLASSE ,
	CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS ,
	CNAE_SUBCLASSE_ID_C = B.CNAE_SUBCLASSE_ID_C ,
	CNAE_SUBCLASSE_DESCR_C = B.CNAE_SUBCLASSE_DESCR_C
FROM [VAGAS_DW].[TMP_VAGAS]	AS A	OUTER APPLY ( SELECT TOP 1 A1.CNAE_SECAO_ID ,
															   A1.CNAE_SECAO ,
															   A1.CNAE_DIVISAO_ID ,
															   A1.CNAE_DIVISAO ,
															   A1.CNAE_CLASSE_ID ,
															   A1.CNAE_CLASSE ,
															   A1.CNAE_FAIXA_FUNCIONARIOS ,
															   A1.CNAE_SUBCLASSE_ID_C ,
															   A1.CNAE_SUBCLASSE_DESCR_C
												  FROM [VAGAS_DW].[CLIENTES] AS A1
												  WHERE A.CLIENTE = A1.CLIENTE_VAGAS
														AND A1.DATA_REFERENCIA = (SELECT MAX(DATA_REFERENCIA) FROM [VAGAS_DW].[VAGAS_DW].[CLIENTES])) AS B
				
-- CARREGAR CUBO
INSERT INTO VAGAS_DW.VAGAS (VAGAS_Cod_Vaga,COD_CLI,CLIENTE,CARGO,ESCOLARIDADE,NIVEL,CIDADE,UF,PREF_SEXO,AREA_01,AREA_02,AREA_03,ACEITA_CAND_OUTRA_REGIAO,
VAGA_VALIDADA,DATA_CADASTRAMENTO_SOURCE,DATA_CADASTRAMENTO,DATA_VALIDACAO_SOURCE,DATA_VALIDACAO,DATA_PUBLICACAO_SOURCE,DATA_PUBLICACAO,
ACEITA_CAND_OUTRO_NIVEL,ACEITA_CAND_OUTRA_AREA,DISPONIB_VIAGEM,DATA_EXPIRACAO_SOURCE,DATA_EXPIRACAO,DATA_ULT_TRIAGEM_SOURCE,
DATA_ULT_TRIAGEM,SOLICITA_PREENCHIMENTO_FICHA,PCD,ANUNCIO_IDENTIFICADO,SEGMENTO,GRUPO_SEGMENTO,QTD_POSICOES,QTD_DIAS_ALERTADO,
QTD_ALERTA_DISPARADO,PERC_RETORNO,QTD_PageViews,PAIS,DATA_ATUALIZACAO_SOURCE,DATA_ATUALIZACAO,VEICULACAO_SUSPENSA,CLIENTE_BLOQUEADO,
ATINGIU_LIMITE_CANDIDATURAS,NAV_EXC,CAPTACAO_CONTINUA,EXIBE_VAGAS_COM,INVISIVEL,TIPO_PROCESSO,FLAG_VAGA_TESTE, CNAE_SECAO_ID, CNAE_SECAO, CNAE_DIVISAO_ID, CNAE_DIVISAO, CNAE_CLASSE_ID, CNAE_CLASSE, CNAE_FAIXA_FUNCIONARIOS,CNAE_SUBCLASSE_ID_C, CNAE_SUBCLASSE_DESCR_C,REGIAO, COD_FUNC, DIVISAO, SOLICITA_TESTE, TESTE_OBRIGATORIO, VAGAS_ETALENT, INDICACAO_VAGA,POSSUI_TESTE_CUSTOMIZADO, POSSUI_FICHA_COMPLEMENTAR)
SELECT VAGAS_Cod_Vaga,COD_CLI,CLIENTE,CARGO,ESCOLARIDADE,NIVEL,CIDADE,UF,PREF_SEXO,AREA_01,AREA_02,AREA_03,ACEITA_CAND_OUTRA_REGIAO,
VAGA_VALIDADA,DATA_CADASTRAMENTO_SOURCE,DATA_CADASTRAMENTO,DATA_VALIDACAO_SOURCE,DATA_VALIDACAO,DATA_PUBLICACAO_SOURCE,DATA_PUBLICACAO,
ACEITA_CAND_OUTRO_NIVEL,ACEITA_CAND_OUTRA_AREA,DISPONIB_VIAGEM,DATA_EXPIRACAO_SOURCE,DATA_EXPIRACAO,DATA_ULT_TRIAGEM_SOURCE,
DATA_ULT_TRIAGEM,SOLICITA_PREENCHIMENTO_FICHA,PCD,ANUNCIO_IDENTIFICADO,SEGMENTO,GRUPO_SEGMENTO,QTD_POSICOES,QTD_DIAS_ALERTADO,
QTD_ALERTA_DISPARADO,PERC_RETORNO,QTD_PageViews,PAIS,DATA_ATUALIZACAO_SOURCE,DATA_ATUALIZACAO,VEICULACAO_SUSPENSA,CLIENTE_BLOQUEADO,
ATINGIU_LIMITE_CANDIDATURAS,NAV_EXC,CAPTACAO_CONTINUA,EXIBE_VAGAS_COM,INVISIVEL,TIPO_PROCESSO,FLAG_VAGA_TESTE, CNAE_SECAO_ID, CNAE_SECAO, CNAE_DIVISAO_ID, CNAE_DIVISAO, CNAE_CLASSE_ID, CNAE_CLASSE, CNAE_FAIXA_FUNCIONARIOS,CNAE_SUBCLASSE_ID_C, CNAE_SUBCLASSE_DESCR_C,REGIAO, COD_FUNC, DIVISAO, SOLICITA_TESTE, TESTE_OBRIGATORIO, VAGAS_ETALENT, INDICACAO_VAGA,POSSUI_TESTE_CUSTOMIZADO, POSSUI_FICHA_COMPLEMENTAR
FROM VAGAS_DW.TMP_VAGAS

-- MARCAR VAGAS INATIVAS / ATIVAS
UPDATE VAGAS_DW.VAGAS SET VAGA_ATIVA = 'NÃO'
FROM VAGAS_DW.VAGAS 
WHERE DATA_EXPIRACAO < CONVERT(SMALLDATETIME,CONVERT(VARCHAR,CASE WHEN DATEPART(WEEKDAY,GETDATE()) = 2 /* SEGUNDA */ 
																  THEN DATEADD(DAY,-3,GETDATE()) 
																  ELSE DATEADD(DAY,-1,GETDATE()) END,112))
AND ( VAGA_ATIVA IS NULL OR VAGA_ATIVA = 'SIM' )

UPDATE VAGAS_DW.VAGAS SET VAGA_ATIVA = 'NÃO' 
FROM VAGAS_DW.VAGAS
WHERE VEICULACAO_SUSPENSA = 'SIM'
OR CLIENTE_BLOQUEADO = 'SIM'
OR ATINGIU_LIMITE_CANDIDATURAS = 'SIM'
OR INVISIVEL = 'SIM' 

UPDATE VAGAS_DW.VAGAS SET VAGA_ATIVA = 'SIM'
FROM VAGAS_DW.VAGAS 
WHERE VAGA_ATIVA IS NULL 

-- Limpeza dos campos referentes ao VAGAS FLIX:
UPDATE	[VAGAS_DW].[VAGAS]
SET		FLAG_EMPRESA_VAGAS_FLIX = NULL ,
		COD_CLI_VAGAS_FLIX = NULL ,
		ULT_DT_RF_VAGASFLIX = NULL ;


-- Atualização da FLAG_EMPRES_VAGAS_FLIX:
UPDATE	[VAGAS_DW].[VAGAS]
SET		FLAG_EMPRESA_VAGAS_FLIX = (SELECT	1
								   FROM		[hrh-data].[dbo].[FranqueadorxFranqueado] AS A1		INNER JOIN [hrh-data].[dbo].[Clientes] AS A2 ON A1.codclifranqueado_fcf = A2.Cod_cli
																								INNER JOIN [hrh-data].[dbo].[Divisoes] AS A3 ON A1.coddivfranqueador_fcf = A3.Cod_div
								   WHERE	A1.cod_fcf = A.codfranqueado_vaga
											AND A1.codclifranqueador_fcf = 65561)
FROM	[hrh-data].[dbo].[Vagas] AS A	INNER JOIN [VAGAS_DW].[VAGAS] AS B ON A.Cod_vaga = B.VAGAS_COD_VAGA ;

UPDATE	[VAGAS_DW].[VAGAS]
SET		FLAG_EMPRESA_VAGAS_FLIX = 0
FROM	[VAGAS_DW].[VAGAS] AS A
WHERE	A.FLAG_EMPRESA_VAGAS_FLIX IS NULL ;



-- Atualização do COD_CLI_VAGAS_FLIX:
UPDATE	[VAGAS_DW].[VAGAS]
SET		COD_CLI_VAGAS_FLIX = (SELECT	A3.Cod_cli AS COD_CLI_VAGAS_FLIX
							  FROM		[hrh-data].[dbo].[Vagas] AS A1	INNER JOIN [hrh-data].[dbo].[FranqueadorxFranqueado] AS A2 ON A1.codfranqueado_vaga = A2.cod_fcf
																		INNER JOIN [hrh-data].[dbo].[Clientes] AS A3 ON A2.codclifranqueado_fcf = A3.cod_cli
																		INNER JOIN [hrh-data].[dbo].[Divisoes] AS A4 ON A2.coddivfranqueador_fcf = A4.Cod_div
							  WHERE	A2.codclifranqueador_fcf = 65561
									AND A1.Cod_vaga = A.Cod_vaga)
FROM	[hrh-data].[dbo].[Vagas] AS A	INNER JOIN [VAGAS_DW].[VAGAS] AS B ON A.Cod_vaga = B.VAGAS_Cod_Vaga ;


-- Atualização do campo ULT_DT_RF_VAGASFLIX:
DECLARE	@MAIOR_DATA_REF_CARGA_FLIX SMALLDATETIME ;
SET		@MAIOR_DATA_REF_CARGA_FLIX = (SELECT MAX(A1.DATA_REFERENCIA) FROM [VAGAS_DW].[BASE_EMPRESAS_VAGAS_FLIX] AS A1) ;

UPDATE	[VAGAS_DW].[VAGAS]
SET		ULT_DT_RF_VAGASFLIX = IIF(DATEPART(YEAR, A.DATA_CADASTRAMENTO) = DATEPART(YEAR, @MAIOR_DATA_REF_CARGA_FLIX)
								  AND DATEPART(MONTH, A.DATA_CADASTRAMENTO) = DATEPART(MONTH, @MAIOR_DATA_REF_CARGA_FLIX), 1, 0)
FROM	[VAGAS_DW].[VAGAS] AS A
WHERE	A.FLAG_EMPRESA_VAGAS_FLIX = 1 ;

UPDATE	[VAGAS_DW].[VAGAS]
SET		ULT_DT_RF_VAGASFLIX = 0
FROM	[VAGAS_DW].[VAGAS] AS A
WHERE	A.ULT_DT_RF_VAGASFLIX IS NULL ;

-- Atualização do CNPJ dos clientes VAGAS FLIX:
UPDATE	[VAGAS_DW].[VAGAS]
SET		CNPJ_VAGAS_FLIX = (SELECT	A3.CGC_cli AS CNPJ_VAGAS_FLIX
						   FROM		[hrh-data].[dbo].[Vagas] AS A1	INNER JOIN [hrh-data].[dbo].[FranqueadorxFranqueado] AS A2 ON A1.codfranqueado_vaga = A2.cod_fcf
																	INNER JOIN [hrh-data].[dbo].[Clientes] AS A3 ON A2.codclifranqueado_fcf = A3.cod_cli
																	INNER JOIN [hrh-data].[dbo].[Divisoes] AS A4 ON A2.coddivfranqueador_fcf = A4.Cod_div
				  		   WHERE	A2.codclifranqueador_fcf = 65561
									AND A1.Cod_vaga = A.Cod_vaga)
FROM	[hrh-data].[dbo].[Vagas] AS A	INNER JOIN [VAGAS_DW].[VAGAS] AS B ON A.Cod_vaga = B.VAGAS_Cod_Vaga
WHERE	B.COD_CLI_VAGAS_FLIX IS NOT NULL ;


-- Atualização do NOME_FANTASIA dos clientes VAGAS FLIX:
UPDATE	[VAGAS_DW].[VAGAS]
SET		NOME_FANTASIA_VAGASFLIX = B.NOME_FANTASIA
FROM	[VAGAS_DW].[VAGAS] AS A		INNER JOIN [VAGAS_DW].[BASE_EMPRESAS_VAGAS_FLIX] AS B ON A.COD_CLI_VAGAS_FLIX = B.COD_CLI_VAGAS_EPARTNER ;

-- 13/10/2017: Tratamento de vagas da MagazineLuiza que excedem o volume de posições normalmente publicado pelas empresas:
UPDATE	[VAGAS_DW].[VAGAS]
SET		QTD_POSICOES = 1
FROM	[VAGAS_DW].[VAGAS] AS A
WHERE	A.VAGAS_Cod_Vaga IN (1462564, 1585461, 1506684, 1505748, 1483950, 1453337, 1517694, 1528982, 1518892, 1564768, 1458374, 1524462, 1539953, 1528189, 1532546, 1523707
, 1508158, 1535731, 1474097, 1470753, 1516049, 1523346, 1536257, 1518882, 1458563, 1518029, 1485367, 1462761, 1489707, 1538869, 1453781, 1456994, 1577664, 1470437, 1518712, 1506764, 1548150) ;


-- Atualização dos valores totalizados com % sobre o processo seletivo por vaga:
SELECT	COD_VAGA ,
		TEMPO_DIAS_REQ_PUBL ,
		TEMPO_DIAS_TRIAGEM ,
		TEMPO_REQ_TRIAGEM ,
		CONVERT(FLOAT, TEMPO_DIAS_REQ_PUBL) / IIF(TEMPO_REQ_TRIAGEM = 0, 1, TEMPO_REQ_TRIAGEM) AS PORCENTAGEM_PUBL ,
		CONVERT(FLOAT, TEMPO_DIAS_TRIAGEM) / IIF(TEMPO_REQ_TRIAGEM = 0, 1, TEMPO_REQ_TRIAGEM) AS PORCENTAGEM_TRIAG
INTO	#TMP_DADOS_CONSOLIDADOS_PORC
FROM	(
	SELECT	SUBQUERY.COD_VAGA ,
			SUM(IIF(DATA_PREENCH_FICHA_REQ <= DATA_PUBLICACAO, DATEDIFF(DAY, DATA_PREENCH_FICHA_REQ, DATA_PUBLICACAO), 0)) AS TEMPO_DIAS_REQ_PUBL ,
			SUM(SUBQUERY.TEMPO_DIAS_TRIAGEM) AS TEMPO_DIAS_TRIAGEM ,
			SUM(IIF(DATA_PREENCH_FICHA_REQ <= DATA_PUBLICACAO, DATEDIFF(DAY, DATA_PREENCH_FICHA_REQ, DATA_PUBLICACAO), 0) + SUBQUERY.TEMPO_DIAS_TRIAGEM) AS TEMPO_REQ_TRIAGEM
	FROM	[VAGAS_DW].[REQUISICOES_VAGAS] AS A		INNER JOIN (
																	SELECT	A.COD_VAGA ,
																			SUM(TEMPO_DIAS_TRIAGEM) AS TEMPO_DIAS_TRIAGEM
																	FROM	[VAGAS_DW].[TRIAGENS_VAGAS]	AS A
																	GROUP BY
																			A.COD_VAGA ) AS SUBQUERY ON SUBQUERY.COD_VAGA = A.COD_VAGA


	GROUP BY SUBQUERY.COD_VAGA ) AS SUBQUERY_2 ;

UPDATE	[VAGAS_DW].[VAGAS]
SET		PORCENTAGEM_PUBL = B.PORCENTAGEM_PUBL ,
		PORCENTAGEM_TRIAG = B.PORCENTAGEM_TRIAG
FROM	[VAGAS_DW].[VAGAS] AS A		INNER JOIN #TMP_DADOS_CONSOLIDADOS_PORC AS B ON A.VAGAS_Cod_Vaga = B.COD_VAGA ;


-- Atualização dos valores brutos totalizados sobre o processo seletivo por vaga:
SELECT	SUBQUERY_2.COD_VAGA ,
		SUM(SUBQUERY_2.TEMPO_DIAS_REQ_PUBL + SUBQUERY_2.TEMPO_DIAS_TRIAGEM) AS TEMPO_PROCESSO_SELETIVO
INTO	#TMP_TEMPO_PROCESSO_SELETIVO
FROM	(
	SELECT	SUBQUERY.COD_VAGA ,
			SUM(IIF(DATA_PREENCH_FICHA_REQ <= DATA_PUBLICACAO, DATEDIFF(DAY, DATA_PREENCH_FICHA_REQ, DATA_PUBLICACAO), 0)) AS TEMPO_DIAS_REQ_PUBL ,
			SUM(SUBQUERY.TEMPO_DIAS_TRIAGEM) AS TEMPO_DIAS_TRIAGEM
	FROM	[VAGAS_DW].[REQUISICOES_VAGAS] AS A		INNER JOIN (
																	SELECT	A.COD_VAGA ,
																			SUM(TEMPO_DIAS_TRIAGEM) AS TEMPO_DIAS_TRIAGEM
																	FROM	[VAGAS_DW].[TRIAGENS_VAGAS]	AS A
																	GROUP BY
																			A.COD_VAGA ) AS SUBQUERY ON SUBQUERY.COD_VAGA = A.COD_VAGA
	GROUP BY SUBQUERY.COD_VAGA ) AS SUBQUERY_2 
GROUP BY 
		SUBQUERY_2.COD_VAGA ,
		SUBQUERY_2.TEMPO_DIAS_REQ_PUBL ,
		SUBQUERY_2.TEMPO_DIAS_TRIAGEM ;

UPDATE	[VAGAS_DW].[VAGAS]
SET		TEMPO_PROCESSO_SELETIVO = B.TEMPO_PROCESSO_SELETIVO
FROM	[VAGAS_DW].[VAGAS] AS A		INNER JOIN #TMP_TEMPO_PROCESSO_SELETIVO AS B ON A.VAGAS_Cod_Vaga = B.COD_VAGA ;


-- Vagas sem a primeira data de candidatura:
-- DROP TABLE #TMP_VAGAS_CANDID ;
SELECT	A.VAGAS_Cod_Vaga AS COD_VAGA ,
		A.DATA_PUBLICACAO
INTO	#TMP_VAGAS_CANDID
FROM	[VAGAS_DW].[VAGAS] AS A
WHERE	A.TEMPO_DIAS_PUBL_CANDID IS NULL ;

-- Indice:
CREATE NONCLUSTERED INDEX IDX_#TMP_VAGAS_CANDID_COD_VAGA ON #TMP_VAGAS_CANDID (COD_VAGA) ;

-- DROP TABLE #TMP_PRM_CANDIDATURA ;
SELECT	A.COD_VAGA AS COD_VAGA ,
		A.DATA_PUBLICACAO ,
		MIN(B.DATA_CANDIDATURA) AS PRM_CANDIDATURA
INTO	#TMP_PRM_CANDIDATURA
FROM	#TMP_VAGAS_CANDID AS A		INNER JOIN [VAGAS_DW].[CANDIDATURAS] AS B ON A.COD_VAGA = B.CodVaga_HistCand
GROUP BY
		A.COD_VAGA ,
		A.DATA_PUBLICACAO ;

-- Índice:
CREATE NONCLUSTERED INDEX IDX_#TMP_PRM_CANDIDATURA_COD_VAGA ON #TMP_PRM_CANDIDATURA (COD_VAGA) ;

-- Atualização do campo TEMPO_DIAS_PUBL_CANDID ;
UPDATE	[VAGAS_DW].[VAGAS]
SET		TEMPO_DIAS_PUBL_CANDID = IIF(DATEDIFF(DAY, B.DATA_PUBLICACAO, B.PRM_CANDIDATURA) < 0, DATEDIFF(DAY, A.DATA_CADASTRAMENTO, B.PRM_CANDIDATURA), DATEDIFF(DAY, B.DATA_PUBLICACAO, B.PRM_CANDIDATURA))
FROM	[VAGAS_DW].[VAGAS] AS A		INNER JOIN #TMP_PRM_CANDIDATURA AS B ON A.VAGAS_Cod_Vaga = B.COD_VAGA
WHERE	A.DATA_PUBLICACAO >= '20140101' ; -- Registros no CUBO de candidaturas a partir de jan/14.


-----------------------------------------------------------
-- Atualização de informações do processo seletivo na vaga:
-----------------------------------------------------------

	-- DROP TABLE #TMP_CAND_DESIST ;
	SELECT	A.CodVaga_cvlog AS COD_VAGA ,
			COUNT(DISTINCT A.CodCand_cvlog) AS QTD_CAND_DESIST
	INTO	#TMP_CAND_DESIST
	FROM	[hrh-data].[dbo].[CandidatoxVagas_log] AS A
	WHERE	A.DataCandFim_cvlog IS NULL
	GROUP BY
			A.CodVaga_cvlog ;

	CREATE NONCLUSTERED INDEX IDX_#TMP_CAND_DESIST_COD_VAGA ON #TMP_CAND_DESIST (COD_VAGA) ;

	UPDATE	[VAGAS_DW].[VAGAS]
	SET		QTD_CAND_DESIST = B.QTD_CAND_DESIST
	FROM	[VAGAS_DW].[VAGAS] AS A		INNER JOIN #TMP_CAND_DESIST AS B ON A.VAGAS_Cod_Vaga = B.COD_VAGA
	WHERE	ISNULL(A.QTD_CAND_DESIST, 0) <> B.QTD_CAND_DESIST ;


	-- DROP TABLE #TMP_RECOMENDACAO ;
	SELECT	A.CodVaga_czMonitVagaCand AS COD_VAGA ,
			COUNT(*) AS Emails_enviados
	INTO	#TMP_RECOMENDACAO
	FROM	[Recomendacao-Data].[dbo].[cruzamentoMonitxVagaXCand] AS A		INNER JOIN [Recomendacao-Data].[dbo].[cruzamentoMonit] AS B 
																			ON A.CodCzMonit_czMonitVagaCand = B.Cod_CzMonit
	GROUP BY
			A.CodVaga_czMonitVagaCand

	CREATE NONCLUSTERED INDEX IDX_#TMP_RECOMENDACAO_COD_VAGA ON #TMP_RECOMENDACAO (COD_VAGA) ;

	UPDATE	[VAGAS_DW].[VAGAS]
	SET		QTD_EMAILS_RECOMENDACAO = B.Emails_enviados
	FROM	[VAGAS_DW].[VAGAS] AS A		INNER JOIN #TMP_RECOMENDACAO AS B ON A.VAGAS_Cod_Vaga = B.COD_VAGA
	WHERE	ISNULL(A.QTD_EMAILS_RECOMENDACAO, 0) <> B.Emails_enviados


	-- DROP TABLE #TMP_ELIMINOU_CAND_VAGA ;
	SELECT	A.CodVaga_faseCand AS COD_VAGA ,
			COUNT(DISTINCT A.CodCand_faseCand) AS QTD_CANDIDATOS_ELIMINADOS
	INTO	#TMP_ELIMINOU_CAND_VAGA
	FROM	[hrh-data].[dbo].[HistoricoFasesCand] AS A
	WHERE	A.Eliminado_faseCand = 1
	GROUP BY
			A.CodVaga_faseCand ;

	CREATE NONCLUSTERED INDEX IDX_#TMP_ELIMINOU_CAND_VAGA_COD_VAGA ON #TMP_ELIMINOU_CAND_VAGA (COD_VAGA) ;

	UPDATE	[VAGAS_DW].[VAGAS]
	SET		ELIMINOU_CANDIDATOS = IIF(B.COD_VAGA IS NULL, 'NÃO', 'SIM') ,
			QTD_CANDIDATOS_ELIMINADOS = B.QTD_CANDIDATOS_ELIMINADOS ,
			QTD_VAGAS_ELIMINOU_CAND = 1
	FROM	[VAGAS_DW].[VAGAS] AS A		LEFT OUTER JOIN #TMP_ELIMINOU_CAND_VAGA AS B ON A.VAGAS_Cod_Vaga = B.COD_VAGA
										AND	ISNULL(A.QTD_CANDIDATOS_ELIMINADOS, 0) <> B.QTD_CANDIDATOS_ELIMINADOS ;



	-- DROP TABLE #TMP_AVALIOU_CAND_VAGA ;
	SELECT	A.CodVaga_faseCand AS COD_VAGA ,
			COUNT(*) AS QTD_AVALIACAO_CANDIDATOS
	INTO	#TMP_AVALIOU_CAND_VAGA
	FROM	[hrh-data].[dbo].[HistoricoFasesCand] AS A
	WHERE	( A.CodAval_faseCand < 0
			  OR A.CodAval_faseCand > 0 )
	GROUP BY
			A.CodVaga_faseCand ;

	CREATE NONCLUSTERED INDEX IDX_#TMP_AVALIOU_CAND_VAGA_COD_VAGA ON #TMP_AVALIOU_CAND_VAGA (COD_VAGA) ;

	UPDATE	[VAGAS_DW].[VAGAS]
	SET		AVALIOU_CANDIDATOS = IIF(B.COD_VAGA IS NULL, 'NÃO', 'SIM') ,
			QTD_AVALIACAO_CANDIDATOS = B.QTD_AVALIACAO_CANDIDATOS
	FROM	[VAGAS_DW].[VAGAS] AS A		LEFT OUTER JOIN #TMP_AVALIOU_CAND_VAGA AS B ON A.COD_VAGA = B.COD_VAGA
										AND	ISNULL(A.QTD_AVALIACAO_CANDIDATOS, 0) <> B.QTD_AVALIACAO_CANDIDATOS ;



	-- DROP TABLE #TMP_VISUALIZACOES_CVs ;
	SELECT	A.CodVaga_cvVisto AS COD_VAGA ,
			COUNT(*) AS QTD_VISUALIZACOES_CVs
	INTO	#TMP_VISUALIZACOES_CVs
	FROM	[hrh-data].[dbo].[Curriculo_Visto] AS A
	GROUP BY
			A.CodVaga_cvVisto ;

	CREATE NONCLUSTERED INDEX IDX_#TMP_VISUALIZACOES_CVs_COD_VAGA ON #TMP_VISUALIZACOES_CVs (COD_VAGA) ;

	UPDATE	[VAGAS_DW].[VAGAS]
	SET		QTD_VISUALIZACOES_CVs = B.QTD_VISUALIZACOES_CVs
	FROM	[VAGAS_DW].[VAGAS] AS A		INNER JOIN #TMP_VISUALIZACOES_CVs AS B ON A.VAGAS_Cod_Vaga = B.COD_VAGA
	WHERE	ISNULL(A.QTD_VISUALIZACOES_CVs, 0) <> B.QTD_VISUALIZACOES_CVs ;


	-- DROP TABLE #TMP_ANOTACOES_CAND_VAGA ;
	SELECT	A.CodVaga_respCab AS COD_VAGA ,
			COUNT(*) AS QTD_ANOTACOES_CAND_VAGA 
	INTO	#TMP_ANOTACOES_CAND_VAGA
	FROM	[hrh-data].[dbo].[Fichas-RespCab] AS A		INNER JOIN [hrh-data].[dbo].[Fichas-DescrGeral] AS B ON A.CodFicha_RespCab = B.Cod_fic
	WHERE	B.Ident_fic = 'Anotações candidato x vaga'
	GROUP BY
			A.CodVaga_respCab ;


	CREATE NONCLUSTERED INDEX IDX_#TMP_ANOTACOES_CAND_VAGA_COD_VAGA ON #TMP_ANOTACOES_CAND_VAGA (COD_VAGA) ;

	UPDATE	[VAGAS_DW].[VAGAS]
	SET		QTD_ANOTACOES_CAND_VAGA = B.QTD_ANOTACOES_CAND_VAGA
	FROM	[VAGAS_DW].[VAGAS] AS A		INNER JOIN #TMP_ANOTACOES_CAND_VAGA AS B ON A.VAGAS_Cod_Vaga = B.COD_VAGA
	WHERE	ISNULL(A.QTD_ANOTACOES_CAND_VAGA, 0) <> B.QTD_ANOTACOES_CAND_VAGA ;


	-- DROP TABLE #TMP_MSG_CANDIDATO ;
	SELECT	A.COD_VAGA ,
			SUM(QTD_MSG) AS QTD_MSG_CANDIDATO
	INTO	#TMP_MSG_CANDIDATO
	FROM	[Relatorio].[dbo].[TAB_PROJ_TRANSP_DT_CADASTRAMENTO] AS A
	GROUP BY
			A.COD_VAGA ;

	
	-- DROP TABLE #TMP_FASES_PROCESSO ;
	SELECT	A.CodVaga_faseCand AS COD_VAGA ,
			CASE
				WHEN COUNT(DISTINCT A.CodFase_FaseCand) = 1
					THEN 'UMA'
				WHEN COUNT(DISTINCT A.CodFase_FaseCand) = 2
					THEN 'DUAS'
				WHEN COUNT(DISTINCT A.CodFase_FaseCand) > 2
					THEN 'MAIS DE DUAS'
			ELSE 'NENHUMA'
			END AS FASES_PROCESSO ,
			COUNT(DISTINCT A.CodFase_faseCand) AS QTD_FASES_PROCESSO
	INTO	#TMP_FASES_PROCESSO
	FROM	[hrh-data].[dbo].[HistoricoFasesCand] AS A
	GROUP BY
			A.CodVaga_faseCand ;


	CREATE NONCLUSTERED INDEX IDX_#TMP_FASES_PROCESSO_COD_VAGA ON #TMP_FASES_PROCESSO (COD_VAGA) ;

	UPDATE	[VAGAS_DW].[VAGAS]
	SET		FASES_PROCESSO = B.FASES_PROCESSO ,
			QTD_FASES_PROCESSO = B.QTD_FASES_PROCESSO
	FROM	[VAGAS_DW].[VAGAS] AS A		INNER JOIN #TMP_FASES_PROCESSO AS B ON A.VAGAS_Cod_Vaga = B.COD_VAGA
	WHERE	ISNULL(A.QTD_FASES_PROCESSO, 0) <> B.QTD_FASES_PROCESSO ;


	-- DROP TABLE #TMP_ENVIO_CVs_EMAIL ;
	SELECT	B.CodVaga_email AS COD_VAGA ,
			COUNT(*) AS QTD_ENVIO_CVs_EMAIL
	INTO	#TMP_ENVIO_CVs_EMAIL
	FROM	[hrh-data].[dbo].[Clientes-Relatorios] AS A		INNER JOIN [hrh-data].[dbo].[Email] AS B ON A.Cod_rel = B.AnexoFmt_email
	WHERE	(A.IdFmt_rel = 'padrão-programável'
			  OR A.IdFmt_rel = 'padrão-confidencial'
			  OR A.IdFmt_rel = 'padrão' )
	GROUP BY
			B.CodVaga_email ;

	CREATE NONCLUSTERED INDEX IDX_#TMP_ENVIO_CVs_EMAIL_COD_VAGA ON #TMP_ENVIO_CVs_EMAIL (COD_VAGA) ;

	UPDATE	[VAGAS_DW].[VAGAS]
	SET		QTD_ENVIO_CVs_EMAIL = B.QTD_ENVIO_CVs_EMAIL
	FROM	[VAGAS_DW].[VAGAS] AS A		INNER JOIN #TMP_ENVIO_CVs_EMAIL AS B ON A.COD_VAGA = B.COD_VAGA
	WHERE	ISNULL(A.QTD_ENVIO_CVs_EMAIL, 0) <> B.QTD_ENVIO_CVs_EMAIL ;



	-- DROP TABLE #TMP_FEEDBACK_ENVIADO_VAGA ;
	SELECT	A.CodVaga_vagAtrib AS COD_VAGA
	INTO	#TMP_FEEDBACK_ENVIADO_VAGA
	FROM	[hrh-data].[dbo].[Vagas_Atributos] AS A
	WHERE	A.CodAtrib_vagAtrib = 3 -- Feedback enviado

	CREATE NONCLUSTERED INDEX IDX_#TMP_FEEDBACK_ENVIADO_VAGA_COD_VAGA ON #TMP_FEEDBACK_ENVIADO_VAGA (COD_VAGA) ;

	UPDATE	[VAGAS_DW].[VAGAS]
	SET		FEEDBACK_ENVIADO = IIF(B.CodVaga_vagAtrib IS NULL, 'NÃO', 'SIM')
	FROM	[VAGAS_DW].[VAGAS] AS A		LEFT OUTER JOIN #TMP_FEEDBACK_ENVIADO_VAGA AS B ON A.VAGAS_Cod_Vaga = B.COD_VAGA ;


	-- DROP TABLE #TMP_CANDIDATOS_FEEDBACK ;
	SELECT	A.CodVaga_hist AS COD_VAGA ,
			COUNT(DISTINCT A.CodCand_hist) AS QTD_CANDIDATOS_FEEDBACK
	INTO	#TMP_CANDIDATOS_FEEDBACK
	FROM	[hrh-data].[dbo].[Historico] AS A		INNER JOIN [hrh-data].[dbo].[Vagas] AS B ON A.CodVaga_hist = B.Cod_vaga
	WHERE	A.Tipo_hist  = -107 -- Mensagem enviada ao candidato
			AND A.Dt_hist > B.DtFechamento_vaga -- Data de envio da mensagem ao candidato posterior a data de fechamento da vaga.
			AND EXISTS ( SELECT	1
						 FROM	[hrh-data].[dbo].[Vagas_Atributos] AS A1
						 WHERE	A.CodVaga_hist = A1.Codvaga_vagAtrib
								AND A1.CodAtrib_vagAtrib = 3 )
	GROUP BY
			A.CodVaga_hist ;


	CREATE NONCLUSTERED INDEX IDX_#TMP_CANDIDATOS_FEEDBACK_COD_VAGA ON #TMP_CANDIDATOS_FEEDBACK (COD_VAGA) ;

	UPDATE	[VAGAS_DW].[VAGAS]
	SET		QTD_CANDIDATOS_FEEDBACK = B.QTD_CANDIDATOS_FEEDBACK
	FROM	[VAGAS_DW].[VAGAS] AS A		INNER JOIN #TMP_CANDIDATOS_FEEDBACK AS B ON A.VAGAS_Cod_Vaga = B.COD_VAGA
	WHERE	ISNULL(A.QTD_CANDIDATOS_FEEDBACK, 0) <> B.QTD_CANDIDATOS_FEEDBACK ;


	
	-- DROP TABLE #TMP_VAGA_CANDIDATO_CONTRATADO ;
	SELECT	A.CodVaga_vagAtrib AS COD_VAGA
	INTO	#TMP_VAGA_CANDIDATO_CONTRATADO
	FROM	[hrh-data].[dbo].[Vagas_Atributos] AS A
	WHERE	A.CodAtrib_vagAtrib IN (1,2) ;

	CREATE NONCLUSTERED INDEX #TMP_VAGA_CANDIDATO_CONTRATADO_COD_VAGA ON #TMP_VAGA_CANDIDATO_CONTRATADO (COD_VAGA) ;

	UPDATE	[VAGAS_DW].[VAGAS]
	SET		VAGA_CANDIDATO_CONTRATADO = IIF(B.COD_VAGA IS NULL, 'NÃO', 'SIM')
	FROM	[VAGAS_DW].[VAGAS] AS A		LEFT OUTER JOIN #TMP_VAGA_CANDIDATO_CONTRATADO AS B ON A.VAGAS_Cod_vaga = B.COD_VAGA
										AND	ISNULL(A.VAGA_CANDIDATO_CONTRATADO, 'NÃO') = 'NÃO' ;


	-- DROP TABLE #TMP_VAGA_FECHADA_CANDIDATO ;
	SELECT	DISTINCT A.CodVaga_vagAtrib AS COD_VAGA ,
		IIF ( (	  SELECT	COUNT(*)
							FROM		[hrh-data].[dbo].[Vagas_atributos] AS A1
							WHERE		A.CodVaga_vagAtrib = A1.CodVaga_vagAtrib
									AND A1.CodAtrib_vagAtrib IN (1, 2) ) > 1, 'INTERNO/EXTERNO',
									(	SELECT	IIF(CONVERT(VARCHAR, AA1.CodAtrib_vagAtrib) = 1, 'INTERNO', 'EXTERNO')
										FROM	[hrh-data].[dbo].[Vagas_atributos] AS AA1
										WHERE	A.CodVaga_vagAtrib = AA1.CodVaga_vagAtrib
												AND AA1.CodAtrib_vagAtrib IN (1,2) ) ) AS FECHADA_CANDIDATO
	INTO	#TMP_VAGA_FECHADA_CANDIDATO				  
	FROM	[hrh-data].[dbo].[Vagas_atributos] AS A
	WHERE	A.CodAtrib_vagAtrib IN (1, 2) ;


	CREATE NONCLUSTERED INDEX IDX_#TMP_VAGA_FECHADA_CANDIDATO_COD_VAGA ON #TMP_VAGA_FECHADA_CANDIDATO (COD_VAGA) ;

	UPDATE	[VAGAS_DW].[VAGAS]
	SET		FECHADA_CANDIDATO = ISNULL(B.FECHADA_CANDIDATO, 'NÃO INFORMADO')
	FROM	[VAGAS_DW].[VAGAS] AS A		LEFT OUTER JOIN #TMP_VAGA_FECHADA_CANDIDATO AS B ON A.COD_VAGA = B.COD_VAGA
										AND ISNULL(A.FECHADA_CANDIDATO, 'NÃO INFORMADO') <> B.FECHADA_CANDIDATO ;


	-- DROP TABLE #TMP_CANDIDATOS_CONTRATADOS ;
	SELECT	A.CodVaga_CandCon AS COD_VAGA ,
			COUNT(*) AS QTD_CAND_CONTRATADOS
	INTO	#TMP_CANDIDATOS_CONTRATADOS
	FROM	[hrh-data].[dbo].[Candidatos_contratados] AS A
	GROUP BY
			A.CodVaga_CandCon ;

	CREATE NONCLUSTERED INDEX IDX_#TMP_CANDIDATOS_CONTRATADOS_COD_VAGA ON #TMP_CANDIDATOS_CONTRATADOS (COD_VAGA) ;

	UPDATE	[VAGAS_DW].[VAGAS]
	SET		QTD_CAND_CONTRATADOS = B.QTD_CAND_CONTRATADOS
	FROM	[VAGAS_DW].[VAGAS] AS A		INNER JOIN #TMP_CANDIDATOS_CONTRATADOS AS B ON A.VAGAS_Cod_Vaga = B.COD_VAGA
	WHERE	ISNULL(A.QTD_CAND_CONTRATADOS, 0) <> B.QTD_CAND_CONTRATADOS ;


	-- DROP TABLE #TMP_TEMPO_DIAS_CONTRATACAO ;
	SELECT	A.CodVaga_CandCon AS COD_VAGA ,
			DATEDIFF(DAY,  ISNULL(B.DtPrimInicioWeb_vaga, B.DtInicioWeb_vaga) ,
							( SELECT	TOP 1 CONVERT(DATE, A1.Data_CandCon)
							  FROM		[hrh-data].[dbo].[Candidatos_contratados] AS A1
							  WHERE		A.CodVaga_CandCon = A1.CodVaga_CandCon
							  ORDER BY
										A1.Data_CandCon ASC )) AS TEMPO_DIAS_CONTRATACAO
	FROM	[hrh-data].[dbo].[Candidatos_contratados] AS A			INNER JOIN [hrh-data].[dbo].[Vagas] AS B ON A.CodVaga_CandCon = B.Cod_vaga ;