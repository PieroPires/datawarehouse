-- select * from vagas_dw.TMP_VAGAS
-- EXEC VAGAS_DW.SPR_Carga_Vagas
USE VAGAS_DW
GO

IF EXISTS ( SELECT * FROM SYS.OBJECTS WHERE NAME = 'SPR_OLAP_Carga_Vagas' AND SCHEMA_NAME(SCHEMA_ID) = 'VAGAS_DW')
DROP PROCEDURE VAGAS_DW.SPR_OLAP_Carga_Vagas
GO

-- =============================================
-- Author: Luiz Fernando Braz
-- Create date: 29/09/2015
-- Description: Procedure para alimentação do DW
-- =============================================
CREATE PROCEDURE VAGAS_DW.SPR_OLAP_Carga_Vagas

AS
SET NOCOUNT ON

DECLARE @DT_CARGA_INICIO SMALLDATETIME,
		@DT_CARGA_FIM SMALLDATETIME

SELECT @DT_CARGA_INICIO = MIN(DATA_ATUALIZACAO),
	   @DT_CARGA_FIM = DATEADD(DAY,1,MAX(DATA_ATUALIZACAO))	
FROM VAGAS_DW.TMP_VAGAS

DELETE VAGAS_DW.VAGAS 
FROM VAGAS_DW.VAGAS A
WHERE EXISTS ( SELECT 1 FROM VAGAS_DW.TMP_VAGAS 
				WHERE VAGAS_Cod_Vaga = A.VAGAS_Cod_Vaga )


-- Enriquecendo campos de CNAES:
UPDATE [VAGAS_DW].[TMP_VAGAS]
SET CNAE_SECAO_ID	= B.CNAE_SECAO_ID ,
	CNAE_SECAO		= B.CNAE_SECAO ,
	CNAE_DIVISAO_ID = B.CNAE_DIVISAO_ID ,
	CNAE_DIVISAO	= B.CNAE_DIVISAO ,
	CNAE_CLASSE_ID	= B.CNAE_CLASSE_ID ,
	CNAE_CLASSE		= B.CNAE_CLASSE ,
	CNAE_FAIXA_FUNCIONARIOS = B.CNAE_FAIXA_FUNCIONARIOS ,
	CNAE_SUBCLASSE_ID_C = B.CNAE_SUBCLASSE_ID_C ,
	CNAE_SUBCLASSE_DESCR_C = B.CNAE_SUBCLASSE_DESCR_C
FROM [VAGAS_DW].[TMP_VAGAS]	AS A	OUTER APPLY ( SELECT TOP 1 A1.CNAE_SECAO_ID ,
															   A1.CNAE_SECAO ,
															   A1.CNAE_DIVISAO_ID ,
															   A1.CNAE_DIVISAO ,
															   A1.CNAE_CLASSE_ID ,
															   A1.CNAE_CLASSE ,
															   A1.CNAE_FAIXA_FUNCIONARIOS ,
															   A1.CNAE_SUBCLASSE_ID_C ,
															   A1.CNAE_SUBCLASSE_DESCR_C
												  FROM [VAGAS_DW].[CLIENTES] AS A1
												  WHERE A.CLIENTE = A1.CLIENTE_VAGAS
														AND A1.DATA_REFERENCIA = (SELECT MAX(DATA_REFERENCIA) FROM [VAGAS_DW].[VAGAS_DW].[CLIENTES])) AS B
				
-- CARREGAR CUBO
INSERT INTO VAGAS_DW.VAGAS (VAGAS_Cod_Vaga,COD_CLI,CLIENTE,CARGO,ESCOLARIDADE,NIVEL,CIDADE,UF,PREF_SEXO,AREA_01,AREA_02,AREA_03,ACEITA_CAND_OUTRA_REGIAO,
VAGA_VALIDADA,DATA_CADASTRAMENTO_SOURCE,DATA_CADASTRAMENTO,DATA_VALIDACAO_SOURCE,DATA_VALIDACAO,DATA_PUBLICACAO_SOURCE,DATA_PUBLICACAO,
ACEITA_CAND_OUTRO_NIVEL,ACEITA_CAND_OUTRA_AREA,DISPONIB_VIAGEM,DATA_EXPIRACAO_SOURCE,DATA_EXPIRACAO,DATA_ULT_TRIAGEM_SOURCE,
DATA_ULT_TRIAGEM,SOLICITA_PREENCHIMENTO_FICHA,PCD,ANUNCIO_IDENTIFICADO,SEGMENTO,GRUPO_SEGMENTO,QTD_POSICOES,QTD_DIAS_ALERTADO,
QTD_ALERTA_DISPARADO,PERC_RETORNO,QTD_PageViews,PAIS,DATA_ATUALIZACAO_SOURCE,DATA_ATUALIZACAO,VEICULACAO_SUSPENSA,CLIENTE_BLOQUEADO,
ATINGIU_LIMITE_CANDIDATURAS,NAV_EXC,CAPTACAO_CONTINUA,EXIBE_VAGAS_COM,INVISIVEL,TIPO_PROCESSO,FLAG_VAGA_TESTE, CNAE_SECAO_ID, CNAE_SECAO, CNAE_DIVISAO_ID, CNAE_DIVISAO, CNAE_CLASSE_ID, CNAE_CLASSE, CNAE_FAIXA_FUNCIONARIOS,CNAE_SUBCLASSE_ID_C, CNAE_SUBCLASSE_DESCR_C,REGIAO, COD_FUNC )
SELECT * FROM VAGAS_DW.TMP_VAGAS

-- MARCAR VAGAS INATIVAS / ATIVAS
UPDATE VAGAS_DW.VAGAS SET VAGA_ATIVA = 'NÃO'
FROM VAGAS_DW.VAGAS 
WHERE DATA_EXPIRACAO < CONVERT(SMALLDATETIME,CONVERT(VARCHAR,CASE WHEN DATEPART(WEEKDAY,GETDATE()) = 2 /* SEGUNDA */ 
																  THEN DATEADD(DAY,-3,GETDATE()) 
																  ELSE DATEADD(DAY,-1,GETDATE()) END,112))
AND ( VAGA_ATIVA IS NULL OR VAGA_ATIVA = 'SIM' )

UPDATE VAGAS_DW.VAGAS SET VAGA_ATIVA = 'NÃO' 
FROM VAGAS_DW.VAGAS
WHERE VEICULACAO_SUSPENSA = 'SIM'
OR CLIENTE_BLOQUEADO = 'SIM'
OR ATINGIU_LIMITE_CANDIDATURAS = 'SIM'
OR INVISIVEL = 'SIM' 

UPDATE VAGAS_DW.VAGAS SET VAGA_ATIVA = 'SIM'
FROM VAGAS_DW.VAGAS 
WHERE VAGA_ATIVA IS NULL 